{
  "api/Actions.ActionHelpers.html": {
    "href": "api/Actions.ActionHelpers.html",
    "title": "Class ActionHelpers | Cyber Conflict Simulator",
    "keywords": "Class ActionHelpers Helper functions for actions Inheritance System.Object ActionHelpers Namespace : Actions Assembly : Actions.dll Syntax public static class ActionHelpers : object Fields rand Declaration public static Random rand Field Value Random Methods AdjustOrganizationReputation(IReadOnlyApplication, Object, Object) This method is used to calculate effect on news story's impact on organizations reputation after publishing denials or press releases by the actor who represents a PR expert. To prevent multiple calls on same event, impact on actor's organization is removed from \"impacts\" list following method completion. To be modified in later versions. Declaration public static void AdjustOrganizationReputation(IReadOnlyApplication application, dynamic actor, dynamic damagingEvent) Parameters IReadOnlyApplication application System.Object actor Public relations expert System.Object damagingEvent Event that has negative impact on organization's reputation. Can be either a newsStory or an event DiscoverNewApplication(Object, IReadOnlyApplication, ILandscape) Discover given software entity to player's landscape. Declaration public static bool DiscoverNewApplication(dynamic discoveredApplication, IReadOnlyApplication application, ILandscape playerLandscape) Parameters System.Object discoveredApplication IReadOnlyApplication application ILandscape playerLandscape Returns System.Boolean True if player's landscape is updated, false otherwise DiscoverNewMachine(Object, ILandscape) Discover given machine entity to player's landscape. Declaration public static bool DiscoverNewMachine(dynamic discoveredMachine, ILandscape playerLandscape) Parameters System.Object discoveredMachine ILandscape playerLandscape Returns System.Boolean FillObject(Object, Object, Object) Helper for filling in objects, according to the _attributeConfig of the action Declaration public static DynamicDictionary FillObject(dynamic originalToFill, dynamic originalFiller, dynamic config) Parameters System.Object originalToFill Original object to be filled, will be deepcopied and known simple attributes kept System.Object originalFiller Original filler object, won't be tempered with System.Object config Dynamic Dictionary containing attribute configuration (simple-complex pairs) Returns DynamicDictionary The filled object GetParam(String, IEnumerable<Parameter>) Declaration public static Parameter GetParam(string key, IEnumerable<Parameter> parameters) Parameters System.String key IEnumerable < Parameter > parameters Returns Parameter GetRandomDoubleInInterval(Double, Double) Declaration public static double GetRandomDoubleInInterval(double min, double max) Parameters System.Double min System.Double max Returns System.Double LoadAttributeConfig(Type) Declaration public static DynamicDictionary LoadAttributeConfig(Type type) Parameters Type type Returns DynamicDictionary NumberOfUnpublished(Object, ILandscape) Calculates number of unpublished data units of given data object according to the given landscape. Declaration public static int NumberOfUnpublished(dynamic dataObject, ILandscape landscape) Parameters System.Object dataObject ILandscape landscape Returns System.Int32 Size of unpublished ranges Overlap((Int32 lower, Int32 upper), (Int32 lower, Int32 upper), out String) Calculates the overlap between two intervals. Declaration public static int Overlap((int lower, int upper) first, (int lower, int upper) second, out string overlapCase) Parameters System.ValueTuple < System.Int32 , System.Int32 > first System.ValueTuple < System.Int32 , System.Int32 > second System.String overlapCase Indicates which part of first interval is overlapping the second one. Returns System.Int32 RecordPublished(Object, ILandscape) Records the range of given dataObject into the global 'published' list for the data type. Declaration public static void RecordPublished(dynamic dataObject, ILandscape landscape) Parameters System.Object dataObject ILandscape landscape RoundIfNearValue(ref Double, Double, Double) Used to round double values near integers to integers Declaration public static bool RoundIfNearValue(ref double value, double other, double tolerance = 0.001) Parameters System.Double value System.Double other System.Double tolerance Returns System.Boolean StoreDataDefinitions(Object, ILandscape, ILandscape) For a given data_container object, retrieves defitions of the data it carries and stores them on the given player landscape, removing 'affects' in the process. Declaration public static void StoreDataDefinitions(dynamic dataContainer, ILandscape globalLandscape, ILandscape playerLandscape) Parameters System.Object dataContainer ILandscape globalLandscape ILandscape playerLandscape StringToTupleRange(String) Declaration public static (int lower, int upper) StringToTupleRange(string range) Parameters System.String range Returns System.ValueTuple < System.Int32 , System.Int32 > TupleToStringRange((Int32 lower, Int32 upper)) Declaration public static string TupleToStringRange((int lower, int upper) range) Parameters System.ValueTuple < System.Int32 , System.Int32 > range Returns System.String UnifyRanges(List<(Int32 lower, Int32 upper)>) Performs union on overlapping ranges and returns a list of non overlapping ranges. Declaration public static List<(int lower, int upper)> UnifyRanges(List<(int lower, int upper)> ranges) Parameters List < System.ValueTuple < System.Int32 , System.Int32 >> ranges Returns List < System.ValueTuple < System.Int32 , System.Int32 >>"
  },
  "api/Actions.AnalyzeBlackmail.html": {
    "href": "api/Actions.AnalyzeBlackmail.html",
    "title": "Class AnalyzeBlackmail | Cyber Conflict Simulator",
    "keywords": "Class AnalyzeBlackmail Inheritance System.Object ActionBase AnalyzeBlackmail Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class AnalyzeBlackmail : ActionBase Fields _compromisedMachines Declaration public List<dynamic> _compromisedMachines Field Value List < System.Object > _durationPercentageList Declaration public List<double> _durationPercentageList Field Value List < System.Double > _isValid Declaration public bool _isValid Field Value System.Boolean _reportLogs Declaration public List<string> _reportLogs Field Value List < System.String > config Declaration public static ActionConfig config Field Value ActionConfig TotalDuration Declaration public double TotalDuration Field Value System.Double Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.AnalyzeCredentialUsage.html": {
    "href": "api/Actions.AnalyzeCredentialUsage.html",
    "title": "Class AnalyzeCredentialUsage | Cyber Conflict Simulator",
    "keywords": "Class AnalyzeCredentialUsage Inheritance System.Object ActionBase AnalyzeCredentialUsage Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class AnalyzeCredentialUsage : ActionBase Fields _logsOfInterest Declaration public List<Log> _logsOfInterest Field Value List < Log > _totalDuration Declaration public double _totalDuration Field Value System.Double config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.AnalyzeEmailLogs.html": {
    "href": "api/Actions.AnalyzeEmailLogs.html",
    "title": "Class AnalyzeEmailLogs | Cyber Conflict Simulator",
    "keywords": "Class AnalyzeEmailLogs Inheritance System.Object ActionBase AnalyzeEmailLogs Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class AnalyzeEmailLogs : ActionBase Fields _totalDuration Declaration public double _totalDuration Field Value System.Double config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.AnalyzeLog.html": {
    "href": "api/Actions.AnalyzeLog.html",
    "title": "Class AnalyzeLog | Cyber Conflict Simulator",
    "keywords": "Class AnalyzeLog Inheritance System.Object ActionBase AnalyzeLog Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class AnalyzeLog : ActionBase Fields _allControls Declaration public bool _allControls Field Value System.Boolean _logCount Declaration public double _logCount Field Value System.Double _logsOfInterest Declaration public List<Log> _logsOfInterest Field Value List < Log > _publishedLogs Declaration public List<Log> _publishedLogs Field Value List < Log > config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.AnalyzeMail.html": {
    "href": "api/Actions.AnalyzeMail.html",
    "title": "Class AnalyzeMail | Cyber Conflict Simulator",
    "keywords": "Class AnalyzeMail Inheritance System.Object ActionBase AnalyzeMail Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class AnalyzeMail : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.AnalyzeWebsiteVisits.html": {
    "href": "api/Actions.AnalyzeWebsiteVisits.html",
    "title": "Class AnalyzeWebsiteVisits | Cyber Conflict Simulator",
    "keywords": "Class AnalyzeWebsiteVisits Inheritance System.Object ActionBase AnalyzeWebsiteVisits Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class AnalyzeWebsiteVisits : ActionBase Fields _logsOfInterest Declaration public List<Log> _logsOfInterest Field Value List < Log > _publishedLogs Declaration public List<Log> _publishedLogs Field Value List < Log > config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.BeginKeylogging.html": {
    "href": "api/Actions.BeginKeylogging.html",
    "title": "Class BeginKeylogging | Cyber Conflict Simulator",
    "keywords": "Class BeginKeylogging Inheritance System.Object ActionBase BeginKeylogging Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Finally() Namespace : Actions Assembly : Actions.dll Syntax public class BeginKeylogging : ActionBase Fields _loggingDuration Declaration public double _loggingDuration Field Value System.Double _loggingStarted Declaration public bool _loggingStarted Field Value System.Boolean _newCredentialLogged Declaration public bool _newCredentialLogged Field Value System.Boolean config Declaration public static ActionConfig config Field Value ActionConfig Properties GatheredCredentials Declaration public List<dynamic> GatheredCredentials { get; set; } Property Value List < System.Object > Methods Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) OnStop() Declaration public override void OnStop() Overrides ActionBase.OnStop() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.Blackmail.html": {
    "href": "api/Actions.Blackmail.html",
    "title": "Class Blackmail | Cyber Conflict Simulator",
    "keywords": "Class Blackmail Inheritance System.Object ActionBase Blackmail Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class Blackmail : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig totalTime Declaration public double totalTime Field Value System.Double Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.ChangeDnsRecord.html": {
    "href": "api/Actions.ChangeDnsRecord.html",
    "title": "Class ChangeDnsRecord | Cyber Conflict Simulator",
    "keywords": "Class ChangeDnsRecord Inheritance System.Object ActionBase ChangeDnsRecord Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Update() ActionBase.OnStop() ActionBase.TimeToFinish() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class ChangeDnsRecord : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.CheckIOC.html": {
    "href": "api/Actions.CheckIOC.html",
    "title": "Class CheckIOC | Cyber Conflict Simulator",
    "keywords": "Class CheckIOC This action \"hunts\" for IOCs on target machine. It checks for matching malware hashes that player has in his invetory. This action supports 2 mode of work: remote and local. Inheritance System.Object ActionBase CheckIOC Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class CheckIOC : ActionBase Fields _attributeConfig Declaration public static DynamicDictionary _attributeConfig Field Value DynamicDictionary config Declaration public static ActionConfig config Field Value ActionConfig totalTime Declaration public double totalTime Field Value System.Double Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.ConnectMachine.html": {
    "href": "api/Actions.ConnectMachine.html",
    "title": "Class ConnectMachine | Cyber Conflict Simulator",
    "keywords": "Class ConnectMachine Connect machine to given trust zone. Inheritance System.Object ActionBase ConnectMachine Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Update() ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class ConnectMachine : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.CrackPasswords.html": {
    "href": "api/Actions.CrackPasswords.html",
    "title": "Class CrackPasswords | Cyber Conflict Simulator",
    "keywords": "Class CrackPasswords Inheritance System.Object ActionBase CrackPasswords Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Finally() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class CrackPasswords : ActionBase Fields _durationPercentageList Declaration public List<double> _durationPercentageList Field Value List < System.Double > _totalDuration Declaration public double _totalDuration Field Value System.Double _userAccounts Declaration public List<dynamic> _userAccounts Field Value List < System.Object > config Declaration public static ActionConfig config Field Value ActionConfig Methods Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.CreateBackup.html": {
    "href": "api/Actions.CreateBackup.html",
    "title": "Class CreateBackup | Cyber Conflict Simulator",
    "keywords": "Class CreateBackup Inheritance System.Object ActionBase CreateBackup Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class CreateBackup : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig totalDuration Declaration public double totalDuration Field Value System.Double Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() If target is file, add it's time If target is os, enumerate it's files and add their time Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.CreateBackupPeriodically.html": {
    "href": "api/Actions.CreateBackupPeriodically.html",
    "title": "Class CreateBackupPeriodically | Cyber Conflict Simulator",
    "keywords": "Class CreateBackupPeriodically Inheritance System.Object ActionBase CreateBackupPeriodically Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Finally() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class CreateBackupPeriodically : ActionBase Fields backupInProgress Declaration public bool backupInProgress Field Value System.Boolean config Declaration public static ActionConfig config Field Value ActionConfig timePerBackup Declaration public double timePerBackup Field Value System.Double timeSinceLastBackup Declaration public double timeSinceLastBackup Field Value System.Double Methods Initialize() Used to set duration of the action. For every object to backup defined in config: if it is file, add it's time if it is os, enumerate it's files and add their time Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.CreateNewService.html": {
    "href": "api/Actions.CreateNewService.html",
    "title": "Class CreateNewService | Cyber Conflict Simulator",
    "keywords": "Class CreateNewService Inheritance System.Object ActionBase CreateNewService Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Update() ActionBase.OnStop() ActionBase.TimeToFinish() Namespace : Actions Assembly : Actions.dll Syntax public class CreateNewService : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.CreatePhishingWebsite.html": {
    "href": "api/Actions.CreatePhishingWebsite.html",
    "title": "Class CreatePhishingWebsite | Cyber Conflict Simulator",
    "keywords": "Class CreatePhishingWebsite Inheritance System.Object ActionBase CreatePhishingWebsite Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class CreatePhishingWebsite : ActionBase Fields _totalDuration Declaration public double _totalDuration Field Value System.Double config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.CreateSpearPhishingMail.html": {
    "href": "api/Actions.CreateSpearPhishingMail.html",
    "title": "Class CreateSpearPhishingMail | Cyber Conflict Simulator",
    "keywords": "Class CreateSpearPhishingMail Inheritance System.Object ActionBase CreateSpearPhishingMail Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class CreateSpearPhishingMail : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig totalTime Declaration public double totalTime Field Value System.Double Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.DecryptFile.html": {
    "href": "api/Actions.DecryptFile.html",
    "title": "Class DecryptFile | Cyber Conflict Simulator",
    "keywords": "Class DecryptFile Inheritance System.Object ActionBase DecryptFile Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Finally() ActionBase.OnStop() ActionBase.TimeToFinish() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class DecryptFile : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.DeleteFile.html": {
    "href": "api/Actions.DeleteFile.html",
    "title": "Class DeleteFile | Cyber Conflict Simulator",
    "keywords": "Class DeleteFile Inheritance System.Object ActionBase DeleteFile Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class DeleteFile : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig totalDuration Declaration public double totalDuration Field Value System.Double Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.DenyNewsStory.html": {
    "href": "api/Actions.DenyNewsStory.html",
    "title": "Class DenyNewsStory | Cyber Conflict Simulator",
    "keywords": "Class DenyNewsStory Inheritance System.Object ActionBase DenyNewsStory Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Update() ActionBase.OnStop() ActionBase.TimeToFinish() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class DenyNewsStory : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.DisconnectMachine.html": {
    "href": "api/Actions.DisconnectMachine.html",
    "title": "Class DisconnectMachine | Cyber Conflict Simulator",
    "keywords": "Class DisconnectMachine Disconect machine from given trust zone. Inheritance System.Object ActionBase DisconnectMachine Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Update() ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class DisconnectMachine : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.DiscoverSharedFiles.html": {
    "href": "api/Actions.DiscoverSharedFiles.html",
    "title": "Class DiscoverSharedFiles | Cyber Conflict Simulator",
    "keywords": "Class DiscoverSharedFiles Inheritance System.Object ActionBase DiscoverSharedFiles Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Update() ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class DiscoverSharedFiles : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.DownloadFile.html": {
    "href": "api/Actions.DownloadFile.html",
    "title": "Class DownloadFile | Cyber Conflict Simulator",
    "keywords": "Class DownloadFile Inheritance System.Object ActionBase DownloadFile Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class DownloadFile : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig estimatedTime Declaration public double estimatedTime Field Value System.Double FileTransfered Declaration public bool FileTransfered Field Value System.Boolean protocol Declaration public string protocol Field Value System.String Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.DropAsset.html": {
    "href": "api/Actions.DropAsset.html",
    "title": "Class DropAsset | Cyber Conflict Simulator",
    "keywords": "Class DropAsset Drops asset from player's inventory Inheritance System.Object ActionBase DropAsset Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Update() ActionBase.OnStop() ActionBase.TimeToFinish() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class DropAsset : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.EncryptFile.html": {
    "href": "api/Actions.EncryptFile.html",
    "title": "Class EncryptFile | Cyber Conflict Simulator",
    "keywords": "Class EncryptFile Inheritance System.Object ActionBase EncryptFile Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Finally() ActionBase.OnStop() ActionBase.TimeToFinish() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class EncryptFile : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.Events.html": {
    "href": "api/Actions.Events.html",
    "title": "Class Events | Cyber Conflict Simulator",
    "keywords": "Class Events Inheritance System.Object Events Namespace : Actions Assembly : Actions.dll Syntax public static class Events : object Methods ConnectMachine(String, Object, Object, Object, ActionBase) Physically connect machine to given trust zone. Declaration public static bool ConnectMachine(string playerId, dynamic actor, dynamic machine, dynamic trustZone, ActionBase action) Parameters System.String playerId System.Object actor System.Object machine System.Object trustZone ActionBase action Returns System.Boolean true if connect successful, false otherwise CreateBackup(String, Object, Object, Object, Object, ActionBase, Object, Boolean) Creates backup for given target at given destination. If backupFile parameter is given, put backup info in its collection, else create new backupFile Declaration public static bool CreateBackup(string playerId, dynamic actor, dynamic target, dynamic backupServer, dynamic backupDestination, ActionBase action, dynamic backupFile = null, bool verbose = true) Parameters System.String playerId System.Object actor System.Object target . System.Object backupServer Backup server responsible for creating a backup. System.Object backupDestination Backup destination file system. ActionBase action System.Object backupFile Backup file where to put backup info System.Boolean verbose To print logs or not Returns System.Boolean true if creation is successful, false otherwise CreateNewService(String, Object, Object, Object, ActionBase) Tries to turn given software into a service on its machine's OS. Declaration public static bool CreateNewService(string playerId, dynamic actor, dynamic machine, dynamic software, ActionBase action) Parameters System.String playerId System.Object actor System.Object machine machine the target is located on. System.Object software software to be converted to a service. ActionBase action Returns System.Boolean true if service conversion successful, false otherwise DeleteFile(String, Object, Object, Object, Object, ActionBase, Boolean) Declaration public static bool DeleteFile(string playerId, dynamic actor, dynamic machine, dynamic targetMachine, dynamic file, ActionBase action, bool verbose = false) Parameters System.String playerId System.Object actor System.Object machine System.Object targetMachine System.Object file ActionBase action System.Boolean verbose Returns System.Boolean DisconnectMachine(String, Object, Object, Object, ActionBase) Physically disconnect machine to given trust zone. Declaration public static bool DisconnectMachine(string playerId, dynamic actor, dynamic machine, dynamic trustZone, ActionBase action) Parameters System.String playerId System.Object actor System.Object machine System.Object trustZone ActionBase action Returns System.Boolean true if disconnect successful, false otherwise DropAsset(String, Object, Object, ActionBase) Triggers controls and logs observables for action take asset Declaration public static bool DropAsset(string playerId, dynamic actor, dynamic asset, ActionBase action) Parameters System.String playerId System.Object actor System.Object asset ActionBase action Returns System.Boolean true if take asset successful, false otherwise Remarks Physical controls do not exist at the moment EncryptFile(IReadOnlyApplication, String, Object, Object, Object, Object, Boolean, Observable, ActionBase, String) Peforms encryption on a given file, after checking all conditions Declaration public static bool EncryptFile(IReadOnlyApplication application, string playerId, dynamic actor, dynamic source, dynamic targetMachine, dynamic file, bool destroyKey, Observable observable, ActionBase action, string uniqueKey = null) Parameters IReadOnlyApplication application System.String playerId System.Object actor System.Object source System.Object targetMachine System.Object file System.Boolean destroyKey If true, the encryption key will be discarded after encryption. Observable observable ActionBase action System.String uniqueKey A key used for encryption, if not passed, a key is generated automatically Returns System.Boolean True if encryption is successful, false otherwise InstallSoftware(String, Object, Object, Object, ActionBase) Declaration public static string InstallSoftware(string playerId, dynamic actor, dynamic machine, dynamic software, ActionBase action) Parameters System.String playerId System.Object actor System.Object machine System.Object software ActionBase action Returns System.String Login(String, Object, Object, Object, Object, Object, String, ActionBase, Boolean) Login at the target machine(OS login), software or TrustZone (VPN login) using given credentials and protocol Declaration public static bool Login(string playerId, dynamic actor, dynamic source, dynamic sourceApp, dynamic target, dynamic accounts, string protocol, ActionBase action, bool remoteLogin = true) Parameters System.String playerId System.Object actor System.Object source System.Object sourceApp Used for VPN login, otherwise should be empty string System.Object target System.Object accounts List of account objects, each containing a 'user_account_id' string field System.String protocol String of format 'protocol:port' ActionBase action System.Boolean remoteLogin Login mode, remote if true, local if false Returns System.Boolean True if login succeeds, false otherwise Logout(String, Object, Object, Object, ActionBase) Event to log out target object from source object. Declaration public static bool Logout(string playerId, dynamic actor, dynamic source, dynamic target, ActionBase action) Parameters System.String playerId Id of player which triggered the event. System.Object actor Entity who triggered the event. System.Object source Entity from which the target attempts to log out of. System.Object target Entity to log out ActionBase action Reference to triger action Returns System.Boolean true if log out is successful, false otherwise. ModifyData(String, Object, Object, Object, Object, ActionBase) Declaration public static bool ModifyData(string playerId, dynamic actor, dynamic target, dynamic value, dynamic adverseEvent, ActionBase action) Parameters System.String playerId System.Object actor System.Object target System.Object value System.Object adverseEvent ActionBase action Returns System.Boolean PatchSoftware(Object, ActionBase) Declaration public static void PatchSoftware(dynamic softwareOrOS, ActionBase action) Parameters System.Object softwareOrOS ActionBase action ResolveDNS(Object, String, ActionBase) Declaration public static string ResolveDNS(dynamic machine, string url, ActionBase action) Parameters System.Object machine System.String url ActionBase action Returns System.String RunSoftware(String, Object, Object, Object, ActionBase) Declaration public static bool RunSoftware(string playerId, dynamic actor, dynamic machine, dynamic software, ActionBase action) Parameters System.String playerId System.Object actor System.Object machine System.Object software ActionBase action Returns System.Boolean ScrapeMemory(String, Object, Object, String, ActionBase) Exfiltration event that reads memory data and sends them to attacker's destination specified in scraper's functionality properties Declaration public static bool ScrapeMemory(string playerId, dynamic actor, dynamic target, string exfiltrateTo, ActionBase action) Parameters System.String playerId Atacker id System.Object actor Actor object System.Object target Target machine object where scraper is running System.String exfiltrateTo Location id of the machine where extraction should be done(specified in malware's functionality) ActionBase action Returns System.Boolean ShutDownMachine(String, Object, Object, Object, ActionBase) Shuts down machine corresponding to the given targetId, from the machine given by sourceId Declaration public static bool ShutDownMachine(string playerId, dynamic actor, dynamic source, dynamic target, ActionBase action) Parameters System.String playerId System.Object actor System.Object source System.Object target ActionBase action Returns System.Boolean true if shutdown successful, false otherwise TakeAsset(String, Object, Object, ActionBase) Triggers controls and logs observables for action take asset Declaration public static bool TakeAsset(string playerId, dynamic actor, dynamic asset, ActionBase action) Parameters System.String playerId System.Object actor System.Object asset ActionBase action Returns System.Boolean true if take asset successful, false otherwise Remarks Physical controls do not exist at the moment TurnOnMachine(String, Object, Object, ActionBase) Turn on machine corresponding to the given targetId Declaration public static bool TurnOnMachine(string playerId, dynamic actor, dynamic target, ActionBase action) Parameters System.String playerId System.Object actor System.Object target ActionBase action Returns System.Boolean true if successful, false otherwise VisitWebsite(IReadOnlyApplication, String, Object, Object, String, ActionBase, Object) Tries to visit a website. In effect this method takes software carried by url and installs it on the given machine Declaration public static void VisitWebsite(IReadOnlyApplication application, string playerId, dynamic actor, dynamic machine, string url, ActionBase action, dynamic mail = null) Parameters IReadOnlyApplication application System.String playerId Player whose actor is visiting the website System.Object actor Actor who is visiting the website System.Object machine machine the actor is visiting the website on System.String url ActionBase action System.Object mail Mail that contains the url to the website"
  },
  "api/Actions.ExploitSoftware.html": {
    "href": "api/Actions.ExploitSoftware.html",
    "title": "Class ExploitSoftware | Cyber Conflict Simulator",
    "keywords": "Class ExploitSoftware Inheritance System.Object ActionBase ExploitSoftware Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() ActionBase.TimeToFinish() Namespace : Actions Assembly : Actions.dll Syntax public class ExploitSoftware : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig totalTime Declaration public double totalTime Field Value System.Double Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.html": {
    "href": "api/Actions.html",
    "title": "Namespace Actions | Cyber Conflict Simulator",
    "keywords": "Namespace Actions Classes ActionHelpers Helper functions for actions AnalyzeBlackmail AnalyzeCredentialUsage AnalyzeEmailLogs AnalyzeLog AnalyzeMail AnalyzeWebsiteVisits BeginKeylogging Blackmail ChangeDnsRecord CheckIOC This action \"hunts\" for IOCs on target machine. It checks for matching malware hashes that player has in his invetory. This action supports 2 mode of work: remote and local. ConnectMachine Connect machine to given trust zone. CrackPasswords CreateBackup CreateBackupPeriodically CreateNewService CreatePhishingWebsite CreateSpearPhishingMail DecryptFile DeleteFile DenyNewsStory DisconnectMachine Disconect machine from given trust zone. DiscoverSharedFiles DownloadFile DropAsset Drops asset from player's inventory EncryptFile Events ExploitSoftware InfectWebsite InspectSystem InstallSoftware LocateCredentials LoginLocal LoginRemote Logout ModifyData NetworkScan NetworkScan.PortRange NotifyAboutIncident OrderCredentialChange PatchSoftware PerformForensics PerformRansomwareAttack PerformReversing PublishData PublishPressRelease PullResourceBack ReadMail Tries to deliver mail to actors work station. Checks if mail.to matches to existing actor in CL. Selects device on which the mail is read randomly. Checks if path between current mail location object and destination exists. Triggers controlls on path. Adds new mail object to the global CL if all above actions passed. Recon ReconfigureControl Reinstall RelocateActor Relocates actor by setting target physical zone and transport type RemoveMalwareManually Removes identified malware from target machine. Prerequisite is that player has correct IoC for this malware. RequestAssistance RespondToBlackmail RestoreFromBackup RunSoftware ScadaSetValue SellData SendMail SendResourceBack ShutDownMachine TakeAsset Takes asset from physical zone and moves it to actor's asset list TriggerPatching TurnOnMachine UpdateValueOverTime Updates given object over a period of time UpgradeSoftware UploadFile VirusScan Scans the target (single machine, machines in an organization or machines in a group) for malwares using the antivirus control VPNLogin Try to login to VPN WarnAboutPhishingMails"
  },
  "api/Actions.InfectWebsite.html": {
    "href": "api/Actions.InfectWebsite.html",
    "title": "Class InfectWebsite | Cyber Conflict Simulator",
    "keywords": "Class InfectWebsite Inheritance System.Object ActionBase InfectWebsite Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Update() ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class InfectWebsite : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.InspectSystem.html": {
    "href": "api/Actions.InspectSystem.html",
    "title": "Class InspectSystem | Cyber Conflict Simulator",
    "keywords": "Class InspectSystem Inheritance System.Object ActionBase InspectSystem Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class InspectSystem : ActionBase Fields _attributeConfig Declaration public static DynamicDictionary _attributeConfig Field Value DynamicDictionary config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.InstallSoftware.html": {
    "href": "api/Actions.InstallSoftware.html",
    "title": "Class InstallSoftware | Cyber Conflict Simulator",
    "keywords": "Class InstallSoftware Inheritance System.Object ActionBase InstallSoftware Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class InstallSoftware : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig totalDuration Declaration public double totalDuration Field Value System.Double Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.LocateCredentials.html": {
    "href": "api/Actions.LocateCredentials.html",
    "title": "Class LocateCredentials | Cyber Conflict Simulator",
    "keywords": "Class LocateCredentials Inheritance System.Object ActionBase LocateCredentials Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class LocateCredentials : ActionBase Fields _totalDuration Declaration public double _totalDuration Field Value System.Double config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.LoginLocal.html": {
    "href": "api/Actions.LoginLocal.html",
    "title": "Class LoginLocal | Cyber Conflict Simulator",
    "keywords": "Class LoginLocal Inheritance System.Object ActionBase LoginLocal Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class LoginLocal : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig totalDuration Declaration public double totalDuration Field Value System.Double Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.LoginRemote.html": {
    "href": "api/Actions.LoginRemote.html",
    "title": "Class LoginRemote | Cyber Conflict Simulator",
    "keywords": "Class LoginRemote Inheritance System.Object ActionBase LoginRemote Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class LoginRemote : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig totalDuration Declaration public double totalDuration Field Value System.Double Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.Logout.html": {
    "href": "api/Actions.Logout.html",
    "title": "Class Logout | Cyber Conflict Simulator",
    "keywords": "Class Logout Inheritance System.Object ActionBase Logout Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class Logout : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig totalDuration Declaration public double totalDuration Field Value System.Double Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.ModifyData.html": {
    "href": "api/Actions.ModifyData.html",
    "title": "Class ModifyData | Cyber Conflict Simulator",
    "keywords": "Class ModifyData Inheritance System.Object ActionBase ModifyData Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class ModifyData : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.NetworkScan.html": {
    "href": "api/Actions.NetworkScan.html",
    "title": "Class NetworkScan | Cyber Conflict Simulator",
    "keywords": "Class NetworkScan Inheritance System.Object ActionBase NetworkScan Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Finally() ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class NetworkScan : ActionBase Fields _attributeConfig Declaration public static DynamicDictionary _attributeConfig Field Value DynamicDictionary _currentlyBeingScanned Declaration public (string machineId, string trustZoneId) _currentlyBeingScanned Field Value System.ValueTuple < System.String , System.String > _currentPort Declaration public int _currentPort Field Value System.Int32 _duration Declaration public double _duration Field Value System.Double _endPort Declaration public int _endPort Field Value System.Int32 _mode Declaration public string _mode Field Value System.String _portScanDuration Declaration public double? _portScanDuration Field Value System.Nullable < System.Double > _scanned Declaration public List<string> _scanned Field Value List < System.String > _startPort Declaration public int _startPort Field Value System.Int32 _toBeScanned Declaration public Stack<(string machineId, string trustZoneId)> _toBeScanned Field Value Stack < System.ValueTuple < System.String , System.String >> config Declaration public static ActionConfig config Field Value ActionConfig Methods Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.NetworkScan.PortRange.html": {
    "href": "api/Actions.NetworkScan.PortRange.html",
    "title": "Class NetworkScan.PortRange | Cyber Conflict Simulator",
    "keywords": "Class NetworkScan.PortRange Inheritance System.Object NetworkScan.PortRange Namespace : Actions Assembly : Actions.dll Syntax public class PortRange : object Constructors PortRange(Int32, Int32) Declaration public PortRange(int startPort, int endPort) Parameters System.Int32 startPort System.Int32 endPort Fields EndPort Declaration public int EndPort Field Value System.Int32 StartPort Declaration public int StartPort Field Value System.Int32 Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.NotifyAboutIncident.html": {
    "href": "api/Actions.NotifyAboutIncident.html",
    "title": "Class NotifyAboutIncident | Cyber Conflict Simulator",
    "keywords": "Class NotifyAboutIncident Inheritance System.Object ActionBase NotifyAboutIncident Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class NotifyAboutIncident : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.OrderCredentialChange.html": {
    "href": "api/Actions.OrderCredentialChange.html",
    "title": "Class OrderCredentialChange | Cyber Conflict Simulator",
    "keywords": "Class OrderCredentialChange Inheritance System.Object ActionBase OrderCredentialChange Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class OrderCredentialChange : ActionBase Fields _totalDuration Declaration public double _totalDuration Field Value System.Double accountObjectList Declaration public List<dynamic> accountObjectList Field Value List < System.Object > actorAndSoftwareListId Declaration public List<string> actorAndSoftwareListId Field Value List < System.String > aosAccountList Declaration public List<dynamic> aosAccountList Field Value List < System.Object > config Declaration public static ActionConfig config Field Value ActionConfig dataContainerId Declaration public string dataContainerId Field Value System.String Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.PatchSoftware.html": {
    "href": "api/Actions.PatchSoftware.html",
    "title": "Class PatchSoftware | Cyber Conflict Simulator",
    "keywords": "Class PatchSoftware Inheritance System.Object ActionBase PatchSoftware Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class PatchSoftware : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.PerformForensics.html": {
    "href": "api/Actions.PerformForensics.html",
    "title": "Class PerformForensics | Cyber Conflict Simulator",
    "keywords": "Class PerformForensics Inheritance System.Object ActionBase PerformForensics Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class PerformForensics : ActionBase Fields _attributeConfig Declaration public static DynamicDictionary _attributeConfig Field Value DynamicDictionary config Declaration public static ActionConfig config Field Value ActionConfig DiscoverableActions Declaration public readonly List<string> DiscoverableActions Field Value List < System.String > FACTOR No skill division factor. Declaration public readonly double FACTOR Field Value System.Double HOST_TIME Time added to total time by host. For now, always zero. Declaration public readonly double HOST_TIME Field Value System.Double PHYSICAL_TIME Time added to total time for physical mode. Declaration public readonly double PHYSICAL_TIME Field Value System.Double RUN_TIME Mean time to perform action Declaration public readonly double RUN_TIME Field Value System.Double Properties T Declaration public double T { get; set; } Property Value System.Double TargetTurnedOff Declaration public bool TargetTurnedOff { get; set; } Property Value System.Boolean Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.PerformRansomwareAttack.html": {
    "href": "api/Actions.PerformRansomwareAttack.html",
    "title": "Class PerformRansomwareAttack | Cyber Conflict Simulator",
    "keywords": "Class PerformRansomwareAttack Inheritance System.Object ActionBase PerformRansomwareAttack Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class PerformRansomwareAttack : ActionBase Fields _availability Declaration public double _availability Field Value System.Double _targetIsFileSystem Declaration public bool _targetIsFileSystem Field Value System.Boolean _targetIsOs Declaration public bool _targetIsOs Field Value System.Boolean _totalDuration Declaration public double _totalDuration Field Value System.Double config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.PerformReversing.html": {
    "href": "api/Actions.PerformReversing.html",
    "title": "Class PerformReversing | Cyber Conflict Simulator",
    "keywords": "Class PerformReversing Inheritance System.Object ActionBase PerformReversing Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class PerformReversing : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig FUNCTIONALITY_TIME Time added per 1 functionality Declaration public readonly double FUNCTIONALITY_TIME Field Value System.Double IOC_DETECTION_INTERVAL Interval for action to detect IOC Declaration public readonly double IOC_DETECTION_INTERVAL Field Value System.Double IOC_DETECTION_MEAN_TIME Mean time for action to detect IOC Declaration public readonly double IOC_DETECTION_MEAN_TIME Field Value System.Double RUN_TIME Time to perform reversing on a software with no functionalities. Declaration public readonly double RUN_TIME Field Value System.Double Properties IOC IOC reversed form software. Declaration public string IOC { get; } Property Value System.String T Time to perform action. Declaration public double T { get; } Property Value System.Double Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.PublishData.html": {
    "href": "api/Actions.PublishData.html",
    "title": "Class PublishData | Cyber Conflict Simulator",
    "keywords": "Class PublishData Inheritance System.Object ActionBase PublishData Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class PublishData : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.PublishPressRelease.html": {
    "href": "api/Actions.PublishPressRelease.html",
    "title": "Class PublishPressRelease | Cyber Conflict Simulator",
    "keywords": "Class PublishPressRelease Inheritance System.Object ActionBase PublishPressRelease Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Update() ActionBase.OnStop() ActionBase.TimeToFinish() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class PublishPressRelease : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.PullResourceBack.html": {
    "href": "api/Actions.PullResourceBack.html",
    "title": "Class PullResourceBack | Cyber Conflict Simulator",
    "keywords": "Class PullResourceBack Inheritance System.Object ActionBase PullResourceBack Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class PullResourceBack : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.ReadMail.html": {
    "href": "api/Actions.ReadMail.html",
    "title": "Class ReadMail | Cyber Conflict Simulator",
    "keywords": "Class ReadMail Tries to deliver mail to actors work station. Checks if mail.to matches to existing actor in CL. Selects device on which the mail is read randomly. Checks if path between current mail location object and destination exists. Triggers controlls on path. Adds new mail object to the global CL if all above actions passed. Inheritance System.Object ActionBase ReadMail Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Update() ActionBase.OnStop() ActionBase.TimeToFinish() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class ReadMail : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.Recon.html": {
    "href": "api/Actions.Recon.html",
    "title": "Class Recon | Cyber Conflict Simulator",
    "keywords": "Class Recon Inheritance System.Object ActionBase Recon Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Finally() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class Recon : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Properties FoundAllInfo Declaration public bool FoundAllInfo { get; } Property Value System.Boolean Methods Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.ReconfigureControl.html": {
    "href": "api/Actions.ReconfigureControl.html",
    "title": "Class ReconfigureControl | Cyber Conflict Simulator",
    "keywords": "Class ReconfigureControl Inheritance System.Object ActionBase ReconfigureControl Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class ReconfigureControl : ActionBase Fields _totalDuration Declaration public double _totalDuration Field Value System.Double config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.Reinstall.html": {
    "href": "api/Actions.Reinstall.html",
    "title": "Class Reinstall | Cyber Conflict Simulator",
    "keywords": "Class Reinstall Inheritance System.Object ActionBase Reinstall Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class Reinstall : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig defaultInstallTime Declaration public double defaultInstallTime Field Value System.Double defaultSoftwareInstallTime Declaration public double defaultSoftwareInstallTime Field Value System.Double reinstallDuration Declaration public double reinstallDuration Field Value System.Double Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.RelocateActor.html": {
    "href": "api/Actions.RelocateActor.html",
    "title": "Class RelocateActor | Cyber Conflict Simulator",
    "keywords": "Class RelocateActor Relocates actor by setting target physical zone and transport type Inheritance System.Object ActionBase RelocateActor Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class RelocateActor : ActionBase Fields _totalDuration Declaration public double _totalDuration Field Value System.Double config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.RemoveMalwareManually.html": {
    "href": "api/Actions.RemoveMalwareManually.html",
    "title": "Class RemoveMalwareManually | Cyber Conflict Simulator",
    "keywords": "Class RemoveMalwareManually Removes identified malware from target machine. Prerequisite is that player has correct IoC for this malware. Inheritance System.Object ActionBase RemoveMalwareManually Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class RemoveMalwareManually : ActionBase Fields _duration Declaration public double _duration Field Value System.Double _totalDuration Declaration public double _totalDuration Field Value System.Double config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.RequestAssistance.html": {
    "href": "api/Actions.RequestAssistance.html",
    "title": "Class RequestAssistance | Cyber Conflict Simulator",
    "keywords": "Class RequestAssistance Inheritance System.Object ActionBase RequestAssistance Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class RequestAssistance : ActionBase Fields _answer Declaration public string _answer Field Value System.String _answerContent Declaration public List<dynamic> _answerContent Field Value List < System.Object > _answerRecieved Declaration public bool _answerRecieved Field Value System.Boolean _offerSent Declaration public bool _offerSent Field Value System.Boolean _responderPlayer Declaration public IPlayer _responderPlayer Field Value IPlayer _sendRequestToPlayer Declaration public bool _sendRequestToPlayer Field Value System.Boolean _sessionId Declaration public string _sessionId Field Value System.String _totalDuration Declaration public double _totalDuration Field Value System.Double config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.RespondToBlackmail.html": {
    "href": "api/Actions.RespondToBlackmail.html",
    "title": "Class RespondToBlackmail | Cyber Conflict Simulator",
    "keywords": "Class RespondToBlackmail Inheritance System.Object ActionBase RespondToBlackmail Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class RespondToBlackmail : ActionBase Fields _totalDuration Declaration public double _totalDuration Field Value System.Double config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.RestoreFromBackup.html": {
    "href": "api/Actions.RestoreFromBackup.html",
    "title": "Class RestoreFromBackup | Cyber Conflict Simulator",
    "keywords": "Class RestoreFromBackup Inheritance System.Object ActionBase RestoreFromBackup Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class RestoreFromBackup : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig totalDuration Declaration public double totalDuration Field Value System.Double Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.RunSoftware.html": {
    "href": "api/Actions.RunSoftware.html",
    "title": "Class RunSoftware | Cyber Conflict Simulator",
    "keywords": "Class RunSoftware Inheritance System.Object ActionBase RunSoftware Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Update() ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class RunSoftware : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.ScadaSetValue.html": {
    "href": "api/Actions.ScadaSetValue.html",
    "title": "Class ScadaSetValue | Cyber Conflict Simulator",
    "keywords": "Class ScadaSetValue Inheritance System.Object ActionBase ScadaSetValue Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Update() ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class ScadaSetValue : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.SellData.html": {
    "href": "api/Actions.SellData.html",
    "title": "Class SellData | Cyber Conflict Simulator",
    "keywords": "Class SellData Inheritance System.Object ActionBase SellData Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class SellData : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.SendMail.html": {
    "href": "api/Actions.SendMail.html",
    "title": "Class SendMail | Cyber Conflict Simulator",
    "keywords": "Class SendMail Inheritance System.Object ActionBase SendMail Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class SendMail : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.SendResourceBack.html": {
    "href": "api/Actions.SendResourceBack.html",
    "title": "Class SendResourceBack | Cyber Conflict Simulator",
    "keywords": "Class SendResourceBack Inheritance System.Object ActionBase SendResourceBack Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Update() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class SendResourceBack : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.ShutDownMachine.html": {
    "href": "api/Actions.ShutDownMachine.html",
    "title": "Class ShutDownMachine | Cyber Conflict Simulator",
    "keywords": "Class ShutDownMachine Inheritance System.Object ActionBase ShutDownMachine Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class ShutDownMachine : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig totalTime Declaration public double totalTime Field Value System.Double Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.TakeAsset.html": {
    "href": "api/Actions.TakeAsset.html",
    "title": "Class TakeAsset | Cyber Conflict Simulator",
    "keywords": "Class TakeAsset Takes asset from physical zone and moves it to actor's asset list Inheritance System.Object ActionBase TakeAsset Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.Update() ActionBase.OnStop() ActionBase.TimeToFinish() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class TakeAsset : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.TriggerPatching.html": {
    "href": "api/Actions.TriggerPatching.html",
    "title": "Class TriggerPatching | Cyber Conflict Simulator",
    "keywords": "Class TriggerPatching Inheritance System.Object ActionBase TriggerPatching Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Finally() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class TriggerPatching : ActionBase Fields actorReleased Declaration public bool actorReleased Field Value System.Boolean config Declaration public static ActionConfig config Field Value ActionConfig timeSinceLastPatch Declaration public double timeSinceLastPatch Field Value System.Double Methods Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.TurnOnMachine.html": {
    "href": "api/Actions.TurnOnMachine.html",
    "title": "Class TurnOnMachine | Cyber Conflict Simulator",
    "keywords": "Class TurnOnMachine Inheritance System.Object ActionBase TurnOnMachine Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class TurnOnMachine : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig totalTime Declaration public double totalTime Field Value System.Double Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.UpdateValueOverTime.html": {
    "href": "api/Actions.UpdateValueOverTime.html",
    "title": "Class UpdateValueOverTime | Cyber Conflict Simulator",
    "keywords": "Class UpdateValueOverTime Updates given object over a period of time Inheritance System.Object ActionBase UpdateValueOverTime Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Finally() ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class UpdateValueOverTime : ActionBase Fields _action Delegate function which updates target values Declaration public Func<dynamic, bool> _action Field Value Func < System.Object , System.Boolean > config Action configuration data Declaration public static ActionConfig config Field Value ActionConfig Methods Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.UpgradeSoftware.html": {
    "href": "api/Actions.UpgradeSoftware.html",
    "title": "Class UpgradeSoftware | Cyber Conflict Simulator",
    "keywords": "Class UpgradeSoftware Inheritance System.Object ActionBase UpgradeSoftware Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Initialize() ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class UpgradeSoftware : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.UploadFile.html": {
    "href": "api/Actions.UploadFile.html",
    "title": "Class UploadFile | Cyber Conflict Simulator",
    "keywords": "Class UploadFile Inheritance System.Object ActionBase UploadFile Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class UploadFile : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig estimatedTime Declaration public double estimatedTime Field Value System.Double FileTransfered Declaration public bool FileTransfered Field Value System.Boolean protocol Declaration public string protocol Field Value System.String Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.VirusScan.html": {
    "href": "api/Actions.VirusScan.html",
    "title": "Class VirusScan | Cyber Conflict Simulator",
    "keywords": "Class VirusScan Scans the target (single machine, machines in an organization or machines in a group) for malwares using the antivirus control Inheritance System.Object ActionBase VirusScan Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class VirusScan : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig TargetMachines Declaration public List<dynamic> TargetMachines Field Value List < System.Object > TotalDuration Declaration public double TotalDuration Field Value System.Double VirusFound Declaration public bool VirusFound Field Value System.Boolean Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.VPNLogin.html": {
    "href": "api/Actions.VPNLogin.html",
    "title": "Class VPNLogin | Cyber Conflict Simulator",
    "keywords": "Class VPNLogin Try to login to VPN Inheritance System.Object ActionBase VPNLogin Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.Update() ActionBase.OnStop() Namespace : Actions Assembly : Actions.dll Syntax public class VPNLogin : ActionBase Fields config Declaration public static ActionConfig config Field Value ActionConfig Done Declaration public bool Done Field Value System.Boolean totalTime Declaration public double totalTime Field Value System.Double Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() OnConditionFail(ConditionCheckOutput) Declaration public override bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean Overrides ActionBase.OnConditionFail(ConditionCheckOutput) TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Actions.WarnAboutPhishingMails.html": {
    "href": "api/Actions.WarnAboutPhishingMails.html",
    "title": "Class WarnAboutPhishingMails | Cyber Conflict Simulator",
    "keywords": "Class WarnAboutPhishingMails Inheritance System.Object ActionBase WarnAboutPhishingMails Inherited Members ActionBase.App ActionBase.State ActionBase.Logger(LoggerType) ActionBase.GetParam(String) ActionBase.Kill() ActionBase.Finish() CCSPluginAPI.ActionBase.DoAction(Type, System.String, List<>) ActionBase.AssertNotNull(String, Object[]) ActionBase.AddToLog(String, Object, Observable, Boolean) ActionBase.UpdateObjectOnPlayerLandscape(String, String) ActionBase.OnStop() ActionBase.OnConditionFail(ConditionCheckOutput) Namespace : Actions Assembly : Actions.dll Syntax public class WarnAboutPhishingMails : ActionBase Fields _actorAndOrgIDs List containing objects that need to have its security awareness updated. Declaration public List<string> _actorAndOrgIDs Field Value List < System.String > _actorReleased Is actor released from action. Declaration public bool _actorReleased Field Value System.Boolean _actorsInitialAwareness Collection of actors initial security awareness values. Declaration public Dictionary<string, double> _actorsInitialAwareness Field Value Dictionary < System.String , System.Double > _awarenessDecrease Security awareness reduction factor. Declaration public double _awarenessDecrease Field Value System.Double _awarenessIncrease Security awareness increase factor. Declaration public double _awarenessIncrease Field Value System.Double _timeToRelease Time required until actor is released from action. Declaration public double _timeToRelease Field Value System.Double _totalDuration Duration of action. Declaration public double _totalDuration Field Value System.Double config Declaration public static ActionConfig config Field Value ActionConfig Methods Finally() Declaration public override void Finally() Overrides ActionBase.Finally() Initialize() Declaration public override void Initialize() Overrides ActionBase.Initialize() TimeToFinish() Declaration public override double TimeToFinish() Returns System.Double Overrides ActionBase.TimeToFinish() Update() Declaration public override void Update() Overrides ActionBase.Update() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.ActionBase.html": {
    "href": "api/CCSPluginAPI.ActionBase.html",
    "title": "Class ActionBase | Cyber Conflict Simulator",
    "keywords": "Class ActionBase Inheritance System.Object ActionBase AnalyzeBlackmail AnalyzeCredentialUsage AnalyzeEmailLogs AnalyzeLog AnalyzeMail AnalyzeWebsiteVisits BeginKeylogging Blackmail ChangeDnsRecord CheckIOC ConnectMachine CrackPasswords CreateBackup CreateBackupPeriodically CreateNewService CreatePhishingWebsite CreateSpearPhishingMail DecryptFile DeleteFile DenyNewsStory DisconnectMachine DiscoverSharedFiles DownloadFile DropAsset EncryptFile ExploitSoftware InfectWebsite InspectSystem InstallSoftware LocateCredentials LoginLocal LoginRemote Logout ModifyData NetworkScan NotifyAboutIncident OrderCredentialChange PatchSoftware PerformForensics PerformRansomwareAttack PerformReversing PublishData PublishPressRelease PullResourceBack ReadMail Recon ReconfigureControl Reinstall RelocateActor RemoveMalwareManually RequestAssistance RespondToBlackmail RestoreFromBackup RunSoftware ScadaSetValue SellData SendMail SendResourceBack ShutDownMachine TakeAsset TriggerPatching TurnOnMachine UpdateValueOverTime UpgradeSoftware UploadFile VirusScan VPNLogin WarnAboutPhishingMails Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public abstract class ActionBase : object Properties App Declaration public IReadOnlyApplication App { get; set; } Property Value IReadOnlyApplication State Property containig all relevant information about current state of the simulation. Provides API for action flow management. Declaration public IActionState State { get; set; } Property Value IActionState Methods AddToLog(String, Object, Observable, Boolean) Declaration public void AddToLog(string msg, dynamic entity = null, Observable observable = null, bool onlyDebug = false) Parameters System.String msg System.Object entity Observable observable System.Boolean onlyDebug AssertNotNull(String, Object[]) Checks if the given entities are not null and, if any are, logs the given message to player and debug log, kills action and returns true. Otherwise returns false. Declaration public bool AssertNotNull(string msg, params dynamic[] entities) Parameters System.String msg System.Object [] entities Returns System.Boolean DoAction(Type, String, List<Parameter>) Declaration public string DoAction(Type type, string playerId, List<Parameter> parameters) Parameters Type type System.String playerId List < Parameter > parameters Returns System.String Finally() Declaration public virtual void Finally() Finish() Finishes the action, setting its State.Progress to 1, State.Status to Finished and State.Success to true. A finished action won't receive any more calls to Update() or Finally() methods. Declaration public void Finish() GetParam(String) Declaration public Parameter GetParam(string key) Parameters System.String key Returns Parameter Initialize() Declaration public virtual void Initialize() Kill() Kills the action, setting its State.Progress to 1, State.Status to Finished and State.Success to false. A killed action won't go through any further processing and won't receive any more calls to Update() or Finally() methods. Declaration public void Kill() Logger(LoggerType) Retrieves logger object that can be used for logging, warning etc. This log isn't displayed to the players, rather used for debugging purposes. Declaration public Logger Logger(LoggerType type) Parameters LoggerType type Returns Logger OnConditionFail(ConditionCheckOutput) Triggered when any condition or precondition is not valid. Action decides whether or not to continue its execution. Declaration public virtual bool OnConditionFail(ConditionCheckOutput conditionCheckOutput) Parameters ConditionCheckOutput conditionCheckOutput Returns System.Boolean bool -> if true, Update() is called, if false, action is killed OnStop() Declaration public virtual void OnStop() TimeToFinish() Declaration public virtual double TimeToFinish() Returns System.Double Update() Declaration public virtual void Update() UpdateObjectOnPlayerLandscape(String, String) Updates the attribute given by attr of the object with the given ID on the landscape of the player issuing the Action. Declaration public bool UpdateObjectOnPlayerLandscape(string entityId, string attr) Parameters System.String entityId System.String attr Returns System.Boolean Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.ActionConfig.html": {
    "href": "api/CCSPluginAPI.ActionConfig.html",
    "title": "Class ActionConfig | Cyber Conflict Simulator",
    "keywords": "Class ActionConfig Inheritance System.Object ActionConfig Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public class ActionConfig : object Properties ActionType Declaration public Type ActionType { get; set; } Property Value Type Conditions Dictionary containing conditions that action can be performed Declaration public Dictionary<string, string> Conditions { get; set; } Property Value Dictionary < System.String , System.String > Description Action description Declaration public string Description { get; set; } Property Value System.String Name Name of action Declaration public string Name { get; set; } Property Value System.String Outputs A Dictionary mapping name of each output to its Attribute description. Declaration public Dictionary<string, Attribute> Outputs { get; set; } Property Value Dictionary < System.String , Attribute > Parameters List of all action parameters Declaration public List<ParameterConfig> Parameters { get; set; } Property Value List < ParameterConfig > Side Attribute that determines which side is allowed to use this action.null If not specified both each side is allowed. Declaration public string Side { get; set; } Property Value System.String Standalone Attribute that determines whether action can be instantiated by player. Default true If false, only already instantiated actions can initiate instantiation of the action. Declaration public bool Standalone { get; set; } Property Value System.Boolean StaticParameters A dictionary used for defining arbitrary static parameters for the action. Accessible any time from the action. Declaration public Dictionary<string, object> StaticParameters { get; set; } Property Value Dictionary < System.String , System.Object > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.ActionStatus.html": {
    "href": "api/CCSPluginAPI.ActionStatus.html",
    "title": "Enum ActionStatus | Cyber Conflict Simulator",
    "keywords": "Enum ActionStatus Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public enum ActionStatus : int Finished Idle InProgress Suspended Unitinialized Extension Methods Helpers.DeepCopy<ActionStatus>()"
  },
  "api/CCSPluginAPI.Attribute.html": {
    "href": "api/CCSPluginAPI.Attribute.html",
    "title": "Class Attribute | Cyber Conflict Simulator",
    "keywords": "Class Attribute Inheritance System.Object Attribute Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public class Attribute : object Properties Description Declaration public string Description { get; set; } Property Value System.String DisplayName Declaration public string DisplayName { get; set; } Property Value System.String EnumItems Declaration public List<string> EnumItems { get; set; } Property Value List < System.String > Items Declaration public Attribute Items { get; set; } Property Value Attribute ItemType Declaration public string ItemType { get; set; } Property Value System.String Labels Declaration public List<string> Labels { get; set; } Property Value List < System.String > Maximum Declaration public int Maximum { get; set; } Property Value System.Int32 Minimum Declaration public int Minimum { get; set; } Property Value System.Int32 Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.ConditionCheckOutput.html": {
    "href": "api/CCSPluginAPI.ConditionCheckOutput.html",
    "title": "Class ConditionCheckOutput | Cyber Conflict Simulator",
    "keywords": "Class ConditionCheckOutput Inheritance System.Object ConditionCheckOutput Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public class ConditionCheckOutput : object Properties ConditionOutput key = condition key from action config; value = is condition satisfied (expects boolean) Declaration public Dictionary<string, object> ConditionOutput { get; set; } Property Value Dictionary < System.String , System.Object > ConditionsPass Declaration public bool ConditionsPass { get; set; } Property Value System.Boolean Pass Declaration public bool Pass { get; } Property Value System.Boolean PreconditionOutput key = parameter key; value = List of dictionaries where: key = precondition key from action config; value = is precondition satisfied (expects boolean) Declaration public Dictionary<string, List<Dictionary<string, object>>> PreconditionOutput { get; set; } Property Value Dictionary < System.String , List < Dictionary < System.String , System.Object >>> PreconditionsPass Declaration public bool PreconditionsPass { get; set; } Property Value System.Boolean Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.ControlBase.html": {
    "href": "api/CCSPluginAPI.ControlBase.html",
    "title": "Class ControlBase | Cyber Conflict Simulator",
    "keywords": "Class ControlBase Inheritance System.Object ControlBase AAAControl AntiSpamControl AVControl BlockControl DNSBlacklistControl FirewallControl NIPSControl SecurityAwarenessControl WBListingControl WebProxyControl Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public abstract class ControlBase : object Properties IsActive Indicates whether the control instance is active. Only active controls will be triggered. Declaration public bool IsActive { get; } Property Value System.Boolean Mode Lists the modes of operation the control instance is configured to perform. Declaration public IReadOnlyList<string> Mode { get; } Property Value IReadOnlyList < System.String > Name Name of the control instance. Declaration public string Name { get; set; } Property Value System.String ResidingObjectId Id of the landscape object the control is located on. Declaration public string ResidingObjectId { get; set; } Property Value System.String TypeId The control type id as defined by its label. Declaration public string TypeId { get; set; } Property Value System.String TypeName The control type name as defined by its label. Declaration public string TypeName { get; set; } Property Value System.String Methods Configure(Object) Configure the control instance according to it's landscape entity. Declaration public void Configure(dynamic controlEntity) Parameters System.Object controlEntity ConfigureAndTrigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) Configures the control instance (using the corresponding control object on the given entity) and triggers it. Declaration public ControlOutput ConfigureAndTrigger(dynamic entity, Observable observable, IReadOnlyApplication application, double? random = null) Parameters System.Object entity Observable observable IReadOnlyApplication application System.Nullable < System.Double > random Returns ControlOutput GetPlayerForLogEntity(Object, IReadOnlyApplication) Get controling player of given entity Declaration protected IPlayer GetPlayerForLogEntity(dynamic entity, IReadOnlyApplication app) Parameters System.Object entity IReadOnlyApplication app Returns IPlayer Initialize(String, String, String, String) Sets the name and type for the control instance, uniquely tying it to a landscape control entity. Declaration public void Initialize(string name, string typeId, string typeName, string residingObjectId) Parameters System.String name System.String typeId System.String typeName System.String residingObjectId Logger(LoggerType) Declaration public static Logger Logger(LoggerType type) Parameters LoggerType type Returns Logger Reconfigure(Object) Initializes (first time) and updates (every following trigger) control's configuration using the control entity retrieved from global landscape. Declaration protected abstract void Reconfigure(dynamic controlEntity) Parameters System.Object controlEntity Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) Performs the control's logic using the given entity, observable and, if neccessary, random value. Returns a ControlOutput object. Declaration protected abstract ControlOutput Trigger(dynamic entity, Observable observable, IReadOnlyApplication application, double? random = null) Parameters System.Object entity Observable observable IReadOnlyApplication application System.Nullable < System.Double > random Returns ControlOutput WriteToLog(Boolean, Object, Observable, IReadOnlyApplication, String, Boolean) Write control log entry into application log and alert the corresponding player if the control is configured for it. Declaration protected void WriteToLog(bool pass, dynamic entity, Observable observable, IReadOnlyApplication app, string msgSuffix = \"\", bool onlyDebug = false) Parameters System.Boolean pass System.Object entity Observable observable IReadOnlyApplication app System.String msgSuffix System.Boolean onlyDebug Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.ControlOutput.html": {
    "href": "api/CCSPluginAPI.ControlOutput.html",
    "title": "Class ControlOutput | Cyber Conflict Simulator",
    "keywords": "Class ControlOutput Contains properties neccessary for determining a control's output Inheritance System.Object ControlOutput Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public class ControlOutput : object Constructors ControlOutput() Creates a ControlOutput with Reaction set to Pass. Declaration public ControlOutput() ControlOutput(ControlReaction) Creates a ControlOutput with the given reaction. Declaration public ControlOutput(ControlReaction reaction) Parameters ControlReaction reaction ControlOutput(ControlReaction, String) Creates a ControlOutput with the given reaction and info. Declaration public ControlOutput(ControlReaction reaction, string info) Parameters ControlReaction reaction System.String info Properties Info Declaration public string Info { get; } Property Value System.String Pass Declaration public bool Pass { get; } Property Value System.Boolean Reaction Declaration public ControlReaction Reaction { get; } Property Value ControlReaction Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.ControlReaction.html": {
    "href": "api/CCSPluginAPI.ControlReaction.html",
    "title": "Enum ControlReaction | Cyber Conflict Simulator",
    "keywords": "Enum ControlReaction Enumerates possible reactions of controls to observables. Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public enum ControlReaction : int Alert Block Pass Request Extension Methods Helpers.DeepCopy<ControlReaction>()"
  },
  "api/CCSPluginAPI.Extensions.html": {
    "href": "api/CCSPluginAPI.Extensions.html",
    "title": "Class Extensions | Cyber Conflict Simulator",
    "keywords": "Class Extensions Inheritance System.Object Extensions Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public static class Extensions : object Methods Log(Logger, String, Object) Extension method for NLog class for adding logObject as one log record. A object is created with one property with name logName and value logObj Declaration public static void Log(this Logger logger, string logName, dynamic logObj) Parameters Logger logger System.String logName System.Object logObj"
  },
  "api/CCSPluginAPI.FileAccessMode.html": {
    "href": "api/CCSPluginAPI.FileAccessMode.html",
    "title": "Enum FileAccessMode | Cyber Conflict Simulator",
    "keywords": "Enum FileAccessMode Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public enum FileAccessMode : int Read Write Extension Methods Helpers.DeepCopy<FileAccessMode>()"
  },
  "api/CCSPluginAPI.Helpers.html": {
    "href": "api/CCSPluginAPI.Helpers.html",
    "title": "Class Helpers | Cyber Conflict Simulator",
    "keywords": "Class Helpers Inheritance System.Object Helpers Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public static class Helpers : object Methods WarnIfNullOrWrongLabel(Object, String, String) Checks the given object for null, empty or missing given label. If so, logs the given message along with the info about which check failed. Returns true if any check failed; false otherwise. Declaration public static bool WarnIfNullOrWrongLabel(dynamic obj, string label = \"\", string errMsg = \"\") Parameters System.Object obj System.String label System.String errMsg Returns System.Boolean"
  },
  "api/CCSPluginAPI.html": {
    "href": "api/CCSPluginAPI.html",
    "title": "Namespace CCSPluginAPI | Cyber Conflict Simulator",
    "keywords": "Namespace CCSPluginAPI Classes ActionBase ActionConfig Attribute ConditionCheckOutput ControlBase ControlOutput Contains properties neccessary for determining a control's output Extensions Helpers Label LabelAttribute LandscapeHelpers Hold helper functions for querying landscape Log Used for logging the action flow through observables passing through entity controls on their path. Defines log class properties and log string structure. Unifies log message composing! Observable Represents a data block (result of an action) used for triggering controls on the network. The data it carries is tied to the player issuing an action, and the actor used for it. Parameter Class defines Parameter object and it's members. Parameter hold information used by Action plugins. Each plugin defines it's own list of parameters but each one must instantiate this class ParameterConfig ParameterInfo Interfaces IAccessGraph IActionManager IActionState IActionValidator IActorTeam IAggregateControlOutput Contains the collection of IEntityControlOutput s over multiple entities on a stage of a path. IControlManager IEntityControlOutput Contains the aggregate of ControlOutput collections over multiple control types on a single entity. IInventory Defines and specifies public state and APIs for the Inventory ILandscape Defines and specifies public state and APIs for the Landscape ILedger Defines and specifies public state and APIs for the Ledger IMessenger Defines and specifies public state and APIs for the Messenger IPlayer Defines and specifies public state and APIs for the Player IReadOnlyApplication Defines basic set of methods needed for action plugins to communicate to application state. IResponse Message type containing response for a Enums ActionStatus ControlReaction Enumerates possible reactions of controls to observables. FileAccessMode LoggerType LogType Defines log levels 1 - Log 2 - Alert ObservableContext Context given to an observable, modelling a more complex mechanism than the observable itself can. ObservableDirection Direction given to an observable. ParameterType Delegates ILandscape.UpdateHandler Delegate for ObjectUpdatedEvent subscribers."
  },
  "api/CCSPluginAPI.IAccessGraph.html": {
    "href": "api/CCSPluginAPI.IAccessGraph.html",
    "title": "Interface IAccessGraph | Cyber Conflict Simulator",
    "keywords": "Interface IAccessGraph Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public interface IAccessGraph Methods NodeHasAccessTo(String, String, Privilege) Declaration bool NodeHasAccessTo(string nodeId, string targetNodeId, Privilege privilege = default(Privilege)) Parameters System.String nodeId System.String targetNodeId Privilege privilege Returns System.Boolean Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.IActionManager.html": {
    "href": "api/CCSPluginAPI.IActionManager.html",
    "title": "Interface IActionManager | Cyber Conflict Simulator",
    "keywords": "Interface IActionManager Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public interface IActionManager Methods FinishAction(String) Declaration void FinishAction(string actionId) Parameters System.String actionId GetActionName(String) Declaration string GetActionName(string actionId) Parameters System.String actionId Returns System.String GetActionOutput(String) Declaration DynamicDictionary GetActionOutput(string actionId) Parameters System.String actionId Returns DynamicDictionary GetActionState(String) Declaration IActionState GetActionState(string actionId) Parameters System.String actionId Returns IActionState GetActionStatus(String) Declaration ActionStatus GetActionStatus(string actionId) Parameters System.String actionId Returns ActionStatus GetActionSuccessFlag(String) Declaration bool GetActionSuccessFlag(string actionId) Parameters System.String actionId Returns System.Boolean KillAction(String) Declaration void KillAction(string actionId) Parameters System.String actionId Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.IActionState.html": {
    "href": "api/CCSPluginAPI.IActionState.html",
    "title": "Interface IActionState | Cyber Conflict Simulator",
    "keywords": "Interface IActionState Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public interface IActionState Properties ActorTeam A team of actors doing the action Declaration IActorTeam ActorTeam { get; } Property Value IActorTeam Duration Duration of action from it's start to the current datetime Declaration double Duration { get; } Property Value System.Double FinishedAt Action finished Declaration DateTime FinishedAt { get; } Property Value DateTime Id Declaration string Id { get; } Property Value System.String IsBackground Bool indicating whether action is run by player or is it a background process Declaration bool IsBackground { get; } Property Value System.Boolean Name Declaration string Name { get; } Property Value System.String Output Action output which must be set as prescripted by the config Declaration DynamicDictionary Output { get; } Property Value DynamicDictionary Parameters List of action parameters in order of the action's config file Declaration IReadOnlyList<Parameter> Parameters { get; } Property Value IReadOnlyList < Parameter > Player Id of a player who is responsible for starting the action Declaration string Player { get; } Property Value System.String Progress 0-1 indicator of action progress Declaration double Progress { get; } Property Value System.Double RemainingTime Estimated time until the end of the action Current output of the TimeToFinish() method Declaration double RemainingTime { get; } Property Value System.Double StartedAt Action started Declaration DateTime StartedAt { get; } Property Value DateTime Status Current status of the action Declaration ActionStatus Status { get; } Property Value ActionStatus Success Whether or not action finished successfuly Declaration bool Success { get; } Property Value System.Boolean TotalTime Estimated total duration of action. Sum of the Duration and the RemainingTime Declaration double TotalTime { get; } Property Value System.Double TypeName Name of action type Declaration string TypeName { get; } Property Value System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.IActionValidator.html": {
    "href": "api/CCSPluginAPI.IActionValidator.html",
    "title": "Interface IActionValidator | Cyber Conflict Simulator",
    "keywords": "Interface IActionValidator Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public interface IActionValidator Properties Attributes Declaration IReadOnlyDictionary<string, Attribute> Attributes { get; } Property Value IReadOnlyDictionary < System.String , Attribute > Labels Declaration IReadOnlyList<Label> Labels { get; } Property Value IReadOnlyList < Label > Methods CheckParameters(List<Parameter>, ActionConfig) Declaration bool CheckParameters(List<Parameter> parameters, ActionConfig config) Parameters List < Parameter > parameters ActionConfig config Returns System.Boolean ValidateAttribute(Attribute, Object, List<Object>) Validates a single attribute. Returns true if the attribute is valid, false otherwise. Declaration bool ValidateAttribute(Attribute attribute, dynamic value, List<dynamic> landscapeObjects) Parameters Attribute attribute The attribute definition System.Object value Attribute value List < System.Object > landscapeObjects List of landscape objects which are used to validate reference attributes Returns System.Boolean Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.IActorTeam.html": {
    "href": "api/CCSPluginAPI.IActorTeam.html",
    "title": "Interface IActorTeam | Cyber Conflict Simulator",
    "keywords": "Interface IActorTeam Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public interface IActorTeam Properties Actors Declaration IReadOnlyList<string> Actors { get; } Property Value IReadOnlyList < System.String > NumActors Declaration int NumActors { get; } Property Value System.Int32 Methods ContainsActor(Object) Declaration bool ContainsActor(dynamic actor) Parameters System.Object actor Returns System.Boolean ContainsActor(String) Declaration bool ContainsActor(string actorId) Parameters System.String actorId Returns System.Boolean GetAvgSkillValue(String) Get average skill value of actors in the team Declaration double GetAvgSkillValue(string skill) Parameters System.String skill Returns System.Double GetBestNSkillValue(String, Int32) Get sum of skill value over best N actors in the team Declaration double GetBestNSkillValue(string skill, int N) Parameters System.String skill System.Int32 N Returns System.Double GetMaxSkillValue(String) Get skill value of the actor with maximal skill value Declaration double GetMaxSkillValue(string skill) Parameters System.String skill Returns System.Double GetTotalSkillValue(String) Get sum of skill value over all actors in the team Declaration double GetTotalSkillValue(string skill) Parameters System.String skill Returns System.Double RemoveActor(Object) Declaration void RemoveActor(dynamic actor) Parameters System.Object actor RemoveActor(String) Declaration void RemoveActor(string actorId) Parameters System.String actorId Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.IAggregateControlOutput.html": {
    "href": "api/CCSPluginAPI.IAggregateControlOutput.html",
    "title": "Interface IAggregateControlOutput | Cyber Conflict Simulator",
    "keywords": "Interface IAggregateControlOutput Contains the collection of IEntityControlOutput s over multiple entities on a stage of a path. Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public interface IAggregateControlOutput Properties Pass True if all contained IEntityControlOutput s passed. Declaration bool Pass { get; } Property Value System.Boolean Methods GetOutput(String) Retrieves IEntityControlOutput of the entity specified by the ID. Declaration IEntityControlOutput GetOutput(string entityId) Parameters System.String entityId Returns IEntityControlOutput GetOutputOfType(String, String) Retrieves a collection of ControlOutput s of the control(s) specified by the type of the entity specified by the ID. Declaration IReadOnlyList<ControlOutput> GetOutputOfType(string entityId, string controlType) Parameters System.String entityId System.String controlType Returns IReadOnlyList < ControlOutput > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.IControlManager.html": {
    "href": "api/CCSPluginAPI.IControlManager.html",
    "title": "Interface IControlManager | Cyber Conflict Simulator",
    "keywords": "Interface IControlManager Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public interface IControlManager Methods TriggerControlsOfTypeOnObject(Object, String, Observable, Nullable<Double>) Triggers all available controls of the given controlType on the given entity (using the observable). Declaration IReadOnlyList<ControlOutput> TriggerControlsOfTypeOnObject(dynamic entity, string controlType, Observable observable, double? random = null) Parameters System.Object entity System.String controlType Observable observable System.Nullable < System.Double > random Spcifies the random variable value to be passed to controls that use it Returns IReadOnlyList < ControlOutput > TriggerControlsOnObject(Object, Observable, Nullable<Double>) Triggers all available controls for the given entity (using the observable). Declaration IEntityControlOutput TriggerControlsOnObject(dynamic entity, Observable observable, double? random = null) Parameters System.Object entity Observable observable System.Nullable < System.Double > random Spcifies the random variable value to be passed to controls that use it Returns IEntityControlOutput TriggerControlsOnPath(String, Observable, String, Privilege, String, Privilege) Finds the shortest path that satisfies given privilege requirements (if any) and triggers all available controls (modifying the observable as necessary) on it. If no 'via' is given, the observable is sent directly from any available actor's machine to target. However, if 'via' is defined, the observable from any available actor's machine to 'via' will be minimal - simulating a command being sent - and the observable from 'via' to 'target' will be as given, with full payload. Declaration IAggregateControlOutput TriggerControlsOnPath(string actorId, Observable observable, string target, Privilege targetPrivilege = default(Privilege), string via = null, Privilege viaPrivilege = default(Privilege)) Parameters System.String actorId Observable observable System.String target Privilege targetPrivilege System.String via Privilege viaPrivilege Returns IAggregateControlOutput TriggerControlsOnStage(Observable, String, String, Privilege) Finds the shortest path from source to target that satisfies given privilege requirements (if any) and triggers all available controls (modifying the observable as necessary) on it. Declaration IAggregateControlOutput TriggerControlsOnStage(Observable observable, string source, string target, Privilege targetPrivilege = default(Privilege)) Parameters Observable observable System.String source System.String target Privilege targetPrivilege Returns IAggregateControlOutput Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.IEntityControlOutput.html": {
    "href": "api/CCSPluginAPI.IEntityControlOutput.html",
    "title": "Interface IEntityControlOutput | Cyber Conflict Simulator",
    "keywords": "Interface IEntityControlOutput Contains the aggregate of ControlOutput collections over multiple control types on a single entity. Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public interface IEntityControlOutput Properties Pass True if all contained ControlOutput collections passed. Declaration bool Pass { get; } Property Value System.Boolean Methods GetOutput(String) Retrieves a collection of ControlOutput s of the control(s) specified by the type. Declaration IReadOnlyList<ControlOutput> GetOutput(string controlType) Parameters System.String controlType Returns IReadOnlyList < ControlOutput > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.IInventory.html": {
    "href": "api/CCSPluginAPI.IInventory.html",
    "title": "Interface IInventory | Cyber Conflict Simulator",
    "keywords": "Interface IInventory Defines and specifies public state and APIs for the Inventory Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public interface IInventory Properties Content Collection of items in inventory Declaration IReadOnlyList<dynamic> Content { get; } Property Value IReadOnlyList < System.Object > Count Number of items in inventory. Declaration int Count { get; } Property Value System.Int32 Methods Add(Object) Add an item to the inventory. Declaration bool Add(dynamic entity) Parameters System.Object entity Returns System.Boolean Contains(String) Checks if an item with the given Id exists in the Inventory. Declaration bool Contains(string id) Parameters System.String id Returns System.Boolean ContainsItemLabeled(String) Check if the inventory contains any items with the given label Declaration bool ContainsItemLabeled(string label) Parameters System.String label Returns System.Boolean Get(String) Retrieves an item of given Id. Declaration dynamic Get(string id) Parameters System.String id Returns System.Object GetItemIdsLabeled(String) Creates a list of Ids of all the items with the given label Declaration List<string> GetItemIdsLabeled(string label) Parameters System.String label Returns List < System.String > GetItemsLabeled(String) Creates a list of items with given label Declaration List<dynamic> GetItemsLabeled(string label) Parameters System.String label Returns List < System.Object > Remove(Object) Removes the given item./>. Declaration bool Remove(dynamic obj) Parameters System.Object obj Returns System.Boolean Remove(String) Removes item of given Id./>. Declaration bool Remove(string id) Parameters System.String id Returns System.Boolean Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.ILandscape.html": {
    "href": "api/CCSPluginAPI.ILandscape.html",
    "title": "Interface ILandscape | Cyber Conflict Simulator",
    "keywords": "Interface ILandscape Defines and specifies public state and APIs for the Landscape Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public interface ILandscape Properties AccessGraph Access graph, keeping track of object access relations (login, exploit, malware, physical etc.). Declaration IAccessGraph AccessGraph { get; } Property Value IAccessGraph Id Declaration Guid Id { get; } Property Value Guid Objects Objects that comprise the landscape. Returned as deepcopies. Declaration List<dynamic> Objects { get; } Property Value List < System.Object > Methods AddList(IEnumerable) Adding new list of objects to given landscape Declaration bool AddList(IEnumerable list) Parameters IEnumerable list Returns System.Boolean AddOrUpdate(Object, Boolean) Add or update given object to landscape Declaration bool AddOrUpdate(dynamic entity, bool genericName = false) Parameters System.Object entity System.Boolean genericName Returns System.Boolean AddToListAttribute(String, String, Object) Add a value to entity's list-type attribute. If the attribute doesnt' exist, add it. Used only for list-type attributes. Declaration bool AddToListAttribute(string entityId, string attributeName, object value) Parameters System.String entityId Entity on which to add to the list-type attribute System.String attributeName Name of the list-type attribute System.Object value Value to be added to the list-type attribute Returns System.Boolean Contains(String) Check if landscape contains object with given Id Declaration bool Contains(string entityId) Parameters System.String entityId Returns System.Boolean GetObject(String) Get object from landscape and create deepcopy from it. Declaration dynamic GetObject(string entityId) Parameters System.String entityId Returns System.Object GetObjectName(String) Get name of entity referenced by the ID. Doesn't perform any deepcopies. If the entity doesn't exist, returns 'Unknown entity'. Declaration string GetObjectName(string entityId) Parameters System.String entityId Returns System.String GetObjectsWhere(Func<Object, Boolean>) Filters ILandscape 's objects based on given predicate. Declaration List<dynamic> GetObjectsWhere(Func<dynamic, bool> predicate) Parameters Func < System.Object , System.Boolean > predicate Returns List < System.Object > GetObjectsWithAttributeValue(IEnumerable<(String attributeName, Object value)>) Overload for the retrieval of landscape objects according to multiple attribute-value pairs Declaration List<dynamic> GetObjectsWithAttributeValue(IEnumerable<(string attributeName, dynamic value)> attributeValuePairs) Parameters IEnumerable < System.ValueTuple < System.String , System.Object >> attributeValuePairs List of tuples containing attribute-value pairs to be used for filtering Returns List < System.Object > Filtered landscape GetObjectsWithAttributeValue(String, Object) Get all objects with given attribute and value Declaration List<dynamic> GetObjectsWithAttributeValue(string attributeName, dynamic value) Parameters System.String attributeName System.Object value Returns List < System.Object > GetObjectsWithLabel(String) Get all object that contain label Declaration List<dynamic> GetObjectsWithLabel(string label) Parameters System.String label Returns List < System.Object > Remove(Object) Removing an object from landscape Declaration bool Remove(dynamic entity) Parameters System.Object entity Returns System.Boolean Returns true if succeeded; false if object does not exist in landscape. Remove(String) Removing an object from landscape Declaration bool Remove(string entityId) Parameters System.String entityId Returns System.Boolean Returns true if succeeded; false if object does not exist in landscape. RemoveAll(Predicate<Object>) Remove all items that satisfy given predicate Declaration int RemoveAll(Predicate<dynamic> predicate) Parameters Predicate < System.Object > predicate Returns System.Int32 Number of removed items RemoveFromListAttribute(String, String, Predicate<Object>) Remove a value from entity's list-type attribute that satisfy given condition. Used only for list-type attributes. Declaration bool RemoveFromListAttribute(string entityId, string attributeName, Predicate<dynamic> condition) Parameters System.String entityId Entity on which to remove from the list-type attribute System.String attributeName Name of the list-type attribute Predicate < System.Object > condition Which entity to remove Returns System.Boolean RemoveFromListAttribute(String, String, String) Remove a value from entity's list-type attribute. Used only for list-type attributes. Declaration bool RemoveFromListAttribute(string entityId, string attributeName, string value) Parameters System.String entityId Entity on which to remove from the list-type attribute System.String attributeName Name of the list-type attribute System.String value Value to be removed from the list-type attribute Returns System.Boolean SetValueAttribute(String, String, Object) Set the value of an entity's attribute, if the attribute doesn't exist, add it. Used only for simple attributes. Declaration bool SetValueAttribute(string entityId, string attributeName, object value) Parameters System.String entityId Entity on which to change the value-type attributes System.String attributeName Name of the attribute System.Object value Value to which the attribute will be set Returns System.Boolean SetValueAttribute(String, String, Object, Object[]) Set the value of an entity's attribute. If the attribute doesn't exist, add it. Can access any subobject via operations. Declaration bool SetValueAttribute(string entityId, string attributeName, object value, params object[] operations) Parameters System.String entityId Entity on which to change an attribute or a subobject System.String attributeName Name of the attribute System.Object value Value to which the attribute will be set System.Object [] operations Operations that define a path to a subobject Returns System.Boolean Events ObjectUpdatedEvent Event called every time is entered. Declaration event ILandscape.UpdateHandler ObjectUpdatedEvent Event Type ILandscape.UpdateHandler Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.ILandscape.UpdateHandler.html": {
    "href": "api/CCSPluginAPI.ILandscape.UpdateHandler.html",
    "title": "Delegate ILandscape.UpdateHandler | Cyber Conflict Simulator",
    "keywords": "Delegate ILandscape.UpdateHandler Delegate for ObjectUpdatedEvent subscribers. Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public delegate void UpdateHandler(dynamic updatedObject, dynamic oldObject, bool viaExpression); Parameters System.Object updatedObject Exact updated object System.Object oldObject Object before update System.Boolean viaExpression Boolean indicating whether the updating is being done through an expression Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.ILedger.html": {
    "href": "api/CCSPluginAPI.ILedger.html",
    "title": "Interface ILedger | Cyber Conflict Simulator",
    "keywords": "Interface ILedger Defines and specifies public state and APIs for the Ledger Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public interface ILedger Methods GetDiscreteRecordsLoss(IPlayer) Declaration double GetDiscreteRecordsLoss(IPlayer player) Parameters IPlayer player Returns System.Double RecordToLedger(String, Object, String, String, String, Double, String) Record loss to ledger Declaration bool RecordToLedger(string playerId, dynamic actor, string objectId, string organizationId, string eventDescription, double lossAmount, string unitOfMeasure = \"dollars\") Parameters System.String playerId System.Object actor System.String objectId System.String organizationId System.String eventDescription System.Double lossAmount System.String unitOfMeasure Returns System.Boolean Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.IMessenger.html": {
    "href": "api/CCSPluginAPI.IMessenger.html",
    "title": "Interface IMessenger | Cyber Conflict Simulator",
    "keywords": "Interface IMessenger Defines and specifies public state and APIs for the Messenger Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public interface IMessenger Methods GetResponse(String) Declaration IResponse GetResponse(string requestSessionId) Parameters System.String requestSessionId Returns IResponse SendActionLog(Log) Declaration void SendActionLog(Log log) Parameters Log log SendAlert(Log) Declaration void SendAlert(Log log) Parameters Log log SendInject(String, String, String, IEnumerable<Object>) Declaration void SendInject(string message, string senderId, string recieverId, IEnumerable<dynamic> content = null) Parameters System.String message System.String senderId System.String recieverId IEnumerable < System.Object > content SendRequest(DynamicDictionary, Int32, String, String, String, String, String) Declaration string SendRequest(DynamicDictionary conditions, int number, string message, string title, string senderId, string senderObject, string receiverObject) Parameters DynamicDictionary conditions System.Int32 number System.String message System.String title System.String senderId System.String senderObject System.String receiverObject Returns System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.IPlayer.html": {
    "href": "api/CCSPluginAPI.IPlayer.html",
    "title": "Interface IPlayer | Cyber Conflict Simulator",
    "keywords": "Interface IPlayer Defines and specifies public state and APIs for the Player Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public interface IPlayer Properties Actors Declaration IReadOnlyList<string> Actors { get; } Property Value IReadOnlyList < System.String > Id Declaration string Id { get; } Property Value System.String Inventory Declaration IInventory Inventory { get; } Property Value IInventory Landscape Declaration ILandscape Landscape { get; } Property Value ILandscape Name Declaration string Name { get; } Property Value System.String Organizations Declaration IReadOnlyList<string> Organizations { get; } Property Value IReadOnlyList < System.String > Side Declaration string Side { get; } Property Value System.String Updated Declaration bool Updated { get; } Property Value System.Boolean Methods AddActor(String) Declaration bool AddActor(string id) Parameters System.String id Returns System.Boolean IsControllingActor(String) Declaration bool IsControllingActor(string actor) Parameters System.String actor Returns System.Boolean RemoveActor(String) Declaration bool RemoveActor(string id) Parameters System.String id Returns System.Boolean Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.IReadOnlyApplication.html": {
    "href": "api/CCSPluginAPI.IReadOnlyApplication.html",
    "title": "Interface IReadOnlyApplication | Cyber Conflict Simulator",
    "keywords": "Interface IReadOnlyApplication Defines basic set of methods needed for action plugins to communicate to application state. Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public interface IReadOnlyApplication Properties ControlManager Used for any and all Control related activities. Declaration IControlManager ControlManager { get; } Property Value IControlManager CurrentDateTime Gets base date time + simulator time Declaration DateTime CurrentDateTime { get; } Property Value DateTime DeltaT Declaration double DeltaT { get; } Property Value System.Double Landscape List of all objects in current state of simulation Declaration ILandscape Landscape { get; } Property Value ILandscape Ledger Record sheet for recording losses for individual players Declaration ILedger Ledger { get; } Property Value ILedger Logs Declaration IReadOnlyList<Log> Logs { get; } Property Value IReadOnlyList < Log > Messenger Used to send messages between application entities Declaration IMessenger Messenger { get; } Property Value IMessenger Players List of players Declaration IReadOnlyList<IPlayer> Players { get; } Property Value IReadOnlyList < IPlayer > SharedObjects List of objects that are shared between players Declaration ILandscape SharedObjects { get; } Property Value ILandscape SimulationTime Time passed inside the simulation since the beginning, in seconds Declaration double SimulationTime { get; } Property Value System.Double Methods AddToLog(Log) Declaration void AddToLog(Log log) Parameters Log log DoAction(ActionBase, Type, String, List<Parameter>) Declaration string DoAction(ActionBase caller, Type actionType, string playerId, List<Parameter> parameters) Parameters ActionBase caller Type actionType System.String playerId List < Parameter > parameters Returns System.String FinishAction(String) Declaration void FinishAction(string actionId) Parameters System.String actionId GetActionTypeName(String) Gets aplication type name Declaration string GetActionTypeName(string actionId) Parameters System.String actionId Returns System.String GetLogger(LoggerType) Declaration static Logger GetLogger(LoggerType type) Parameters LoggerType type Returns Logger GetPlayer(String) Gets single player object Declaration IPlayer GetPlayer(string playerID) Parameters System.String playerID Returns IPlayer GetPlayerLandscape(String) Gets requested player landscape object Declaration ILandscape GetPlayerLandscape(string playerID) Parameters System.String playerID Returns ILandscape KillAction(String) Declaration void KillAction(string actionId) Parameters System.String actionId Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.IResponse.html": {
    "href": "api/CCSPluginAPI.IResponse.html",
    "title": "Interface IResponse | Cyber Conflict Simulator",
    "keywords": "Interface IResponse Message type containing response for a Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public interface IResponse Properties Answer Answer message to request. Declaration string Answer { get; } Property Value System.String Content Objects that are passed as an answer to request Declaration dynamic Content { get; } Property Value System.Object DateTime Declaration DateTime DateTime { get; } Property Value DateTime Id Declaration string Id { get; } Property Value System.String Index Declaration int Index { get; } Property Value System.Int32 ReceiverObject Declaration string ReceiverObject { get; } Property Value System.String SenderId Declaration string SenderId { get; } Property Value System.String SenderObject Declaration string SenderObject { get; } Property Value System.String TextMessage Declaration string TextMessage { get; } Property Value System.String Title Declaration string Title { get; } Property Value System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.Label.html": {
    "href": "api/CCSPluginAPI.Label.html",
    "title": "Class Label | Cyber Conflict Simulator",
    "keywords": "Class Label Inheritance System.Object Label Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public class Label : object Properties Attributes Declaration public List<LabelAttribute> Attributes { get; set; } Property Value List < LabelAttribute > Id Declaration public string Id { get; set; } Property Value System.String Name Declaration public string Name { get; set; } Property Value System.String OrderNumber Declaration public int OrderNumber { get; set; } Property Value System.Int32 Requires Declaration public string[] Requires { get; set; } Property Value System.String [] Standalone Declaration public bool Standalone { get; set; } Property Value System.Boolean Methods LabelUnion(IList<Label>) Performs an union over given labels' attributes. Maximizes the Required property. Declaration public static List<LabelAttribute> LabelUnion(IList<Label> _allLabels) Parameters IList < Label > _allLabels Returns List < LabelAttribute > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.LabelAttribute.html": {
    "href": "api/CCSPluginAPI.LabelAttribute.html",
    "title": "Class LabelAttribute | Cyber Conflict Simulator",
    "keywords": "Class LabelAttribute Inheritance System.Object LabelAttribute Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public class LabelAttribute : object Properties Index Declaration public string Index { get; set; } Property Value System.String Internal Declaration public bool Internal { get; set; } Property Value System.Boolean OrderNumber Declaration public int OrderNumber { get; set; } Property Value System.Int32 Required Declaration public bool Required { get; set; } Property Value System.Boolean Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.LandscapeHelpers.html": {
    "href": "api/CCSPluginAPI.LandscapeHelpers.html",
    "title": "Class LandscapeHelpers | Cyber Conflict Simulator",
    "keywords": "Class LandscapeHelpers Hold helper functions for querying landscape Inheritance System.Object LandscapeHelpers Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public static class LandscapeHelpers : object Methods AddToListAttribute(IReadOnlyApplication, String, String, IEnumerable<Object>, String) Overload for adding a list of values to a list-type attribute of given entity. Declaration public static void AddToListAttribute(IReadOnlyApplication application, string entityId, string attributeName, IEnumerable<object> values, string playerId = null) Parameters IReadOnlyApplication application System.String entityId System.String attributeName IEnumerable < System.Object > values List of values to be added to the list-type attribute System.String playerId AddToListAttribute(IReadOnlyApplication, String, String, Object, String) Adds a value to the list-type attribute of given entity and updates the global landscape. If a playerId is given, also updates the player's landscape. Declaration public static void AddToListAttribute(IReadOnlyApplication application, string entityId, string attributeName, object value, string playerId = null) Parameters IReadOnlyApplication application System.String entityId Id of the entity in question System.String attributeName Name of the list-type attribute System.Object value Value to be added to the list-type attribute System.String playerId If specified, also updates the object on the player's landscape CreateLoginObject(Object, String, String, String) Creates a login object with the given parameters set as attributes Declaration public static dynamic CreateLoginObject(dynamic client, string privilege, string accountID, string protocol) Parameters System.Object client System.String privilege System.String accountID System.String protocol Returns System.Object Login object FindMailServerForMail(String, ILandscape) Find mail server for mail (get domain from mail address) Declaration public static dynamic FindMailServerForMail(string mail, ILandscape landscape) Parameters System.String mail ILandscape landscape Returns System.Object mail server object GetActorsRandomWorkstation(Object, ILandscape) Returns a randomly selected machine object from the landscape that is included in the given actor's workstations. If no workstations are found, returns null. Declaration public static dynamic GetActorsRandomWorkstation(dynamic actor, ILandscape landscape) Parameters System.Object actor ILandscape landscape Returns System.Object GetActorWithMail(String, ILandscape) Retrieves actor with given mail. Declaration public static dynamic GetActorWithMail(string mail, ILandscape landscape) Parameters System.String mail ILandscape landscape Returns System.Object actor object GetAllItemsOnMachineFileSystems(ILandscape, String) Get all items and remote files on all file_systems on a given machine Declaration public static List<dynamic> GetAllItemsOnMachineFileSystems(ILandscape landscape, string machineId) Parameters ILandscape landscape System.String machineId Returns List < System.Object > GetAllMachinesFromPhysicalZoneInOrganization(String, String, ILandscape) Get all machines that are present in the physicalZone Declaration public static List<dynamic> GetAllMachinesFromPhysicalZoneInOrganization(string physicalZone, string organizationId, ILandscape landscape) Parameters System.String physicalZone name of physical zone System.String organizationId ILandscape landscape Returns List < System.Object > list of machines GetBackupObjectsFromTarget(Object, IReadOnlyApplication) Get all objects for which backup is created based on given target. If target is file, then backup only file. If target is os (machine), backup that machine, all file systems and all files on file systems. Declaration public static List<dynamic> GetBackupObjectsFromTarget(dynamic target, IReadOnlyApplication App) Parameters System.Object target IReadOnlyApplication App Returns List < System.Object > List of backup objects GetControlsOfType(String, Object) Retrieves controls of given type from the given object Declaration public static List<dynamic> GetControlsOfType(string controlType, dynamic entity) Parameters System.String controlType System.Object entity Returns List < System.Object > List of controls of given type; empty if none found GetExternalPhysicalZone(Object, ILandscape) Returns external physical zone which contains given internal physical zone. If no external zone is found, null is returned. Declaration public static dynamic GetExternalPhysicalZone(dynamic internal_zone, ILandscape landscape) Parameters System.Object internal_zone ILandscape landscape Returns System.Object GetFunctionality(Object, String) Retrieves the specified functionality object from an entity. Declaration public static dynamic GetFunctionality(dynamic entity, string functionality) Parameters System.Object entity System.String functionality Returns System.Object GetInstalledSoftwareOnMachine(String, ILandscape) Returns list of all software objects on target machine. Declaration public static List<dynamic> GetInstalledSoftwareOnMachine(string machineId, ILandscape landscape) Parameters System.String machineId ILandscape landscape Returns List < System.Object > list of software objects GetLocalItemsInMachineFileSystems(ILandscape, String) Get landscape items located on file_system located on a given machine Declaration public static List<dynamic> GetLocalItemsInMachineFileSystems(ILandscape landscape, string machineId) Parameters ILandscape landscape System.String machineId Returns List < System.Object > GetMachineSoftwareList(String, ILandscape) Gets all entities of label \"software\" assigned to the given entity from the global landscape. Declaration public static List<dynamic> GetMachineSoftwareList(string entityId, ILandscape landscape) Parameters System.String entityId ILandscape landscape Returns List < System.Object > GetMachineWithFileOrMail(String, ILandscape) Retrieves the machine location of the file specified by fileId. If the file or its file_system are non-existent or have incorrect labels, returns null. Declaration public static dynamic GetMachineWithFileOrMail(string objectId, ILandscape landscape) Parameters System.String objectId ILandscape landscape Returns System.Object GetObjectGroups(String, ILandscape) Get groups in which entity is. Declaration public static List<dynamic> GetObjectGroups(string entityId, ILandscape landscape) Parameters System.String entityId ILandscape landscape Returns List < System.Object > GetPhysicalZonesTime(String, String, String, ILandscape) Returns time value in minutes needed to connect 2 physical zones. Zone defintions are undirected and from|to order doesn't matter! Declaration public static string GetPhysicalZonesTime(string physicaZoneObjectId, string physicalZoneFromId, string physicalZoneToId, ILandscape landscape) Parameters System.String physicaZoneObjectId Main physical zone definition object System.String physicalZoneFromId Physical zone id starting node System.String physicalZoneToId Physical zone id ending node ILandscape landscape Global landscape reference that holds info about physical zones Returns System.String GetRandomFileSystemForMachine(ILandscape, String) Get file system located on the machine on random TEMP: usually, only 1 file system for machine Declaration public static dynamic GetRandomFileSystemForMachine(ILandscape landscape, string machineId) Parameters ILandscape landscape System.String machineId Returns System.Object GetRemoteFilesInMachineFileSystems(ILandscape, String) Get machine's remote files Declaration public static List<dynamic> GetRemoteFilesInMachineFileSystems(ILandscape landscape, string machineId) Parameters ILandscape landscape System.String machineId Returns List < System.Object > GetSkill(Object, String) Retrieves the specified skill object value from an entity. Declaration public static double GetSkill(dynamic entity, string skill) Parameters System.Object entity System.String skill Returns System.Double Skill value if the entity contains specified skill, 0 otherwise GetTrustZonesForMachine(String, ILandscape) Get all existing trust zones the machine is part of, in the given landscape. Declaration public static List<dynamic> GetTrustZonesForMachine(string machineId, ILandscape landscape) Parameters System.String machineId ILandscape landscape Returns List < System.Object > List of TrustZone IDs GetWebAppWithURL(String, ILandscape) Retrieves website with given url. Declaration public static dynamic GetWebAppWithURL(string url, ILandscape landscape) Parameters System.String url ILandscape landscape Returns System.Object web_application object LogoutEntity(Object, IReadOnlyApplication) Removes given entity from all logged_in entries in all landscapes Declaration public static void LogoutEntity(dynamic entity, IReadOnlyApplication App) Parameters System.Object entity IReadOnlyApplication App RefreshPlayerKnowledgeOfFileSystemAndMachine(ILandscape, ILandscape, String) Add generic info about file system and machine it is on to player landscape Declaration public static void RefreshPlayerKnowledgeOfFileSystemAndMachine(ILandscape playerLandscape, ILandscape globalLandscape, string fileSystemId) Parameters ILandscape playerLandscape ILandscape globalLandscape System.String fileSystemId RefreshPlayerKnowledgeOfWebApplication(ILandscape, ILandscape, Object) Declaration public static void RefreshPlayerKnowledgeOfWebApplication(ILandscape playerLandscape, ILandscape globalLandscape, dynamic webAppId) Parameters ILandscape playerLandscape ILandscape globalLandscape System.Object webAppId RemoveFromListAttribute(IReadOnlyApplication, String, String, List<String>, String) Overload for adding a list of values to a list-type attribute of given entity. Declaration public static void RemoveFromListAttribute(IReadOnlyApplication application, string entityId, string attributeName, List<string> values, string playerId = null) Parameters IReadOnlyApplication application System.String entityId System.String attributeName List < System.String > values List of values to be added to the list-type attribute System.String playerId RemoveFromListAttribute(IReadOnlyApplication, String, String, Predicate<Object>, String) Removes a value from the list-type attribute of given entity that satisfies the given predicate contition. If a playerId is given, also updates the player's landscape. Declaration public static void RemoveFromListAttribute(IReadOnlyApplication application, string entityId, string attributeName, Predicate<dynamic> condition, string playerId = null) Parameters IReadOnlyApplication application System.String entityId System.String attributeName Predicate < System.Object > condition System.String playerId RemoveFromListAttribute(IReadOnlyApplication, String, String, String, String) Removes a value from the list-type attribute of given entity and updates the global landscape. If a playerId is given, also updates the player's landscape. Declaration public static void RemoveFromListAttribute(IReadOnlyApplication application, string entityId, string attributeName, string value, string playerId = null) Parameters IReadOnlyApplication application System.String entityId Id of the entity in question System.String attributeName Name of the list-type attribute System.String value Value to be removed from the list-type attribute System.String playerId If specified, also updates the object on the player's landscape RemoveLoginObjectFromPlayerLandscape(ILandscape, Object, Object) Updates player landscape by removing login object from given machine where login_client matches any of actor's machines. Declaration public static void RemoveLoginObjectFromPlayerLandscape(ILandscape player_ls, dynamic machine, dynamic actor) Parameters ILandscape player_ls System.Object machine System.Object actor RemoveReferencesToFile(String, ILandscape) Declaration public static void RemoveReferencesToFile(string fileId, ILandscape landscape) Parameters System.String fileId ILandscape landscape SetValueAttribute(IReadOnlyApplication, String, IDictionary<String, Object>, String) Sets simple attribute(s) of entity to the specified value(s) and updates the global landscape. If a playerId is given, also updates the player's landscape. Declaration public static void SetValueAttribute(IReadOnlyApplication application, string entityId, IDictionary<string, dynamic> attriValPairs, string playerId = null) Parameters IReadOnlyApplication application System.String entityId Id of the entity in question IDictionary < System.String , System.Object > attriValPairs Dictionary of key-value pairs to set to the entity System.String playerId If specified, also updates the object on the player's landscape SetValueAttribute(IReadOnlyApplication, String, String, Object, String) Sets a simple attribute of entity to the specified value and updates the global landscape. If a playerId is given, also updates the player's landscape. Declaration public static void SetValueAttribute(IReadOnlyApplication application, string entityId, string attributeName, dynamic value, string playerId = null) Parameters IReadOnlyApplication application System.String entityId Id of the entity in question System.String attributeName Name of the attribute to be set System.Object value Value which the attribute will be set to System.String playerId If specified, also updates the object on the player's landscape SetValueAttribute(IReadOnlyApplication, String, String, Object, String, Object[]) Sets simple attribute of entity's subobject to the specified value and updates the global landscape. If a playerId is given, also updates the player's landscape. Path to subobject whose attribute will be changed is given by operations. Declaration public static void SetValueAttribute(IReadOnlyApplication application, string entityId, string attributeName, object value, string playerId = null, params object[] operations) Parameters IReadOnlyApplication application System.String entityId Id of the entity in question System.String attributeName Name of the attribute System.Object value Value the attribute will be set to System.String playerId If specified, also updates the object on the player's landscape System.Object [] operations Operations that define a path to a subobject"
  },
  "api/CCSPluginAPI.Log.html": {
    "href": "api/CCSPluginAPI.Log.html",
    "title": "Class Log | Cyber Conflict Simulator",
    "keywords": "Class Log Used for logging the action flow through observables passing through entity controls on their path. Defines log class properties and log string structure. Unifies log message composing! Inheritance System.Object Log Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public class Log : object Constructors Log() Declaration public Log() Log(Double, DateTime, LogType, Object, Observable, String, String, String, String, String, String, String) Declaration public Log(double simTime, DateTime gameDateTime, LogType logType, dynamic entity = null, Observable observable = null, string playerId = null, string actionName = null, string actionId = null, string controlName = \"\", string controlTypeId = \"\", string controlTypeName = \"\", string message = \"\") Parameters System.Double simTime Time stamp inside the simulation DateTime gameDateTime LogType logType Type of log, enum System.Object entity The entity on which a control logged an observable Observable observable The observable being logged System.String playerId System.String actionName System.String actionId System.String controlName Name of the logging control System.String controlTypeId ID of the control's type System.String controlTypeName System.String message Control's message Properties ActionId Action ID. Declaration public string ActionId { get; set; } Property Value System.String ActionName Name of action. Declaration public string ActionName { get; set; } Property Value System.String ActorId ID of actor linked to the observable. Declaration public string ActorId { get; set; } Property Value System.String ControlName Logging control's name (as defined in the landscape). Declaration public string ControlName { get; set; } Property Value System.String ControlTypeId Logging control's type ID; i.e. 'wblisting', 'antispam'. Declaration public string ControlTypeId { get; set; } Property Value System.String ControlTypeName Logging control's type name; i.e. 'WB Listing', 'Anti spam'. Declaration public string ControlTypeName { get; set; } Property Value System.String DateTime DateTime stamp indicating when the log was recorded. Declaration public DateTime DateTime { get; set; } Property Value DateTime DestinationApplicationId ID of the observable's destination application (if any). Declaration public string DestinationApplicationId { get; set; } Property Value System.String DestinationObjectId ID of the observable's destination object. Declaration public string DestinationObjectId { get; set; } Property Value System.String EntityId ID of the entity the control was triggered on. Declaration public string EntityId { get; set; } Property Value System.String EntityName Name of the entity the control was triggered on. Declaration public string EntityName { get; set; } Property Value System.String Location Where log is located Declaration public string Location { get; set; } Property Value System.String LogType Log type. Declaration public LogType LogType { get; set; } Property Value LogType Message Logging control's message. Declaration public string Message { get; set; } Property Value System.String Payload Observable's payload. Declaration public dynamic Payload { get; set; } Property Value System.Object PlayerId ID of player linked to the observable. Declaration public string PlayerId { get; set; } Property Value System.String Protocol The observable's used protocol:port. Declaration public string Protocol { get; set; } Property Value System.String Quantity The quantity of observable's data. Declaration public int Quantity { get; set; } Property Value System.Int32 SimTime Simulation timestamp in seconds, since the game beginning. Declaration public double SimTime { get; set; } Property Value System.Double SourceApplicationId ID of the observable's source application (if any). Declaration public string SourceApplicationId { get; set; } Property Value System.String SourceObjectId ID of the observable's source object. Declaration public string SourceObjectId { get; set; } Property Value System.String Methods ToString() Declaration public override string ToString() Returns System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.LoggerType.html": {
    "href": "api/CCSPluginAPI.LoggerType.html",
    "title": "Enum LoggerType | Cyber Conflict Simulator",
    "keywords": "Enum LoggerType Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public enum LoggerType : int ActionCombination Player ProgramFlow Simulation Extension Methods Helpers.DeepCopy<LoggerType>()"
  },
  "api/CCSPluginAPI.LogType.html": {
    "href": "api/CCSPluginAPI.LogType.html",
    "title": "Enum LogType | Cyber Conflict Simulator",
    "keywords": "Enum LogType Defines log levels 1 - Log 2 - Alert Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public enum LogType : int Alert Log Extension Methods Helpers.DeepCopy<LogType>()"
  },
  "api/CCSPluginAPI.Observable.html": {
    "href": "api/CCSPluginAPI.Observable.html",
    "title": "Class Observable | Cyber Conflict Simulator",
    "keywords": "Class Observable Represents a data block (result of an action) used for triggering controls on the network. The data it carries is tied to the player issuing an action, and the actor used for it. Inheritance System.Object Observable Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public class Observable : object Constructors Observable() Declaration public Observable() Observable(Observable) Declaration public Observable(Observable original) Parameters Observable original Observable(String, Object) Declaration public Observable(string playerId, dynamic actor) Parameters System.String playerId System.Object actor Observable(String, Object, Object, Object) Declaration public Observable(string playerId, dynamic actor, dynamic sourceObject, dynamic destinationObject) Parameters System.String playerId System.Object actor System.Object sourceObject System.Object destinationObject Observable(String, Object, Object, Object, ObservableContext) Declaration public Observable(string playerId, dynamic actor, dynamic sourceObject, dynamic destinationObject, ObservableContext context) Parameters System.String playerId System.Object actor System.Object sourceObject System.Object destinationObject ObservableContext context Properties Actor Actor acting the action/event that creates the observable. Declaration public dynamic Actor { get; set; } Property Value System.Object Context Context of the observable, modelling more complex mechanics than the observable itself can. Declaration public ObservableContext Context { get; set; } Property Value ObservableContext DestinationApplication Ending software entity (if any) of the observable. Declaration public dynamic DestinationApplication { get; set; } Property Value System.Object DestinationObject Ending landscape entity of the observable. Declaration public dynamic DestinationObject { get; set; } Property Value System.Object Direction Direction of the observable. Declaration public ObservableDirection Direction { get; set; } Property Value ObservableDirection FileAccessMode Type of FileAccess requested Declaration public FileAccessMode FileAccessMode { get; set; } Property Value FileAccessMode Path Path the observable is traveling, consisting of object IDs. Declaration public List<string> Path { get; set; } Property Value List < System.String > Payload The package being sent by the observable, if any. Declaration public dynamic Payload { get; set; } Property Value System.Object PlayerId Player issuing the action/event that creates the observable. Declaration public string PlayerId { get; set; } Property Value System.String Protocol Procotol the observable uses. Declaration public string Protocol { get; set; } Property Value System.String Quantity Amount of units contained in the observable. Declaration public dynamic Quantity { get; set; } Property Value System.Object Size Size of the observable. Declaration public dynamic Size { get; set; } Property Value System.Object SourceApplication Starting software entity (if any) of the observable. Declaration public dynamic SourceApplication { get; set; } Property Value System.Object SourceObject Starting landscape entity of the observable. Declaration public dynamic SourceObject { get; set; } Property Value System.Object UserAccountId The user account under which the observable exists. Declaration public string UserAccountId { get; set; } Property Value System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.ObservableContext.html": {
    "href": "api/CCSPluginAPI.ObservableContext.html",
    "title": "Enum ObservableContext | Cyber Conflict Simulator",
    "keywords": "Enum ObservableContext Context given to an observable, modelling a more complex mechanism than the observable itself can. Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public enum ObservableContext : int AnalyzeFilesystem AnalyzeMemory ChangeSystemConfiguration Command DataTransfer EditFile FileAccess Login NetworkScan PhysicalAction PowerControl ReadFile ResolveDNS Untraceable VisitWebsite Extension Methods Helpers.DeepCopy<ObservableContext>()"
  },
  "api/CCSPluginAPI.ObservableDirection.html": {
    "href": "api/CCSPluginAPI.ObservableDirection.html",
    "title": "Enum ObservableDirection | Cyber Conflict Simulator",
    "keywords": "Enum ObservableDirection Direction given to an observable. Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public enum ObservableDirection : int Request Response Extension Methods Helpers.DeepCopy<ObservableDirection>()"
  },
  "api/CCSPluginAPI.Parameter.html": {
    "href": "api/CCSPluginAPI.Parameter.html",
    "title": "Class Parameter | Cyber Conflict Simulator",
    "keywords": "Class Parameter Class defines Parameter object and it's members. Parameter hold information used by Action plugins. Each plugin defines it's own list of parameters but each one must instantiate this class Inheritance System.Object ParameterInfo Parameter Inherited Members ParameterInfo.Info ParameterInfo.Value Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public class Parameter : ParameterInfo Constructors Parameter() Declaration public Parameter() Parameter(String, ParameterType, Object, String) Declaration public Parameter(string key, ParameterType type, dynamic value, string info) Parameters System.String key ParameterType type System.Object value System.String info Properties Key Declaration public string Key { get; set; } Property Value System.String Type Declaration public ParameterType Type { get; set; } Property Value ParameterType Methods CreateFromObjects(ActionConfig, Object[]) Creates parameters for the given actionType , using the given array. Declaration public static List<Parameter> CreateFromObjects(ActionConfig actionConfig, params object[] parameters) Parameters ActionConfig actionConfig System.Object [] parameters Array of parameter entities, identical to those given by Returns List < Parameter > StringToEnumType(String) Declaration public static ParameterType? StringToEnumType(string type) Parameters System.String type Returns System.Nullable < ParameterType > ToString() Declaration public override string ToString() Returns System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.ParameterConfig.html": {
    "href": "api/CCSPluginAPI.ParameterConfig.html",
    "title": "Class ParameterConfig | Cyber Conflict Simulator",
    "keywords": "Class ParameterConfig Inheritance System.Object ParameterConfig Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public class ParameterConfig : object Fields DataTypes Declaration public static readonly List<string> DataTypes Field Value List < System.String > Types Declaration public static readonly List<string> Types Field Value List < System.String > Properties AcceptsList Accepts is true if an inventory-type parameter is expected to have an Enumerable of objects in its Entity, as opposed to a single object. Declaration public bool AcceptsList { get; set; } Property Value System.Boolean DataType Data type of an 'input' type parameter. Supported data types are listed in DataTypes. Declaration public string DataType { get; set; } Property Value System.String Key Unique key of the parameter, used for identification among an action's parameters. Declaration public string Key { get; set; } Property Value System.String Preconditions List of rules used for objects filtering from CL. Declaration public List<DynamicDictionary> Preconditions { get; set; } Property Value List < DynamicDictionary > Reference Declaration public string Reference { get; set; } Property Value System.String Type States which parameter type. Currently 6 types are supported, as listed in Types. Declaration public string Type { get; set; } Property Value System.String Values Declaration public dynamic Values { get; set; } Property Value System.Object Methods CheckInputType(Object, String) Declaration public static bool CheckInputType(object value, string dataType) Parameters System.Object value System.String dataType Returns System.Boolean GetDataForEnum(Parameter) Declaration public string GetDataForEnum(Parameter parameter) Parameters Parameter parameter Returns System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.ParameterInfo.html": {
    "href": "api/CCSPluginAPI.ParameterInfo.html",
    "title": "Class ParameterInfo | Cyber Conflict Simulator",
    "keywords": "Class ParameterInfo Inheritance System.Object ParameterInfo Parameter Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public class ParameterInfo : object Properties Info Declaration public string Info { get; set; } Property Value System.String Value Declaration public dynamic Value { get; set; } Property Value System.Object Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CCSPluginAPI.ParameterType.html": {
    "href": "api/CCSPluginAPI.ParameterType.html",
    "title": "Enum ParameterType | Cyber Conflict Simulator",
    "keywords": "Enum ParameterType Namespace : CCSPluginAPI Assembly : CCSPluginAPI.dll Syntax public enum ParameterType : int Attribute Enum Input Inventory Landscape Player Shared Extension Methods Helpers.DeepCopy<ParameterType>()"
  },
  "api/CCSPluginAPI.Path.html": {
    "href": "api/CCSPluginAPI.Path.html",
    "title": "Namespace CCSPluginAPI.Path | Cyber Conflict Simulator",
    "keywords": "Namespace CCSPluginAPI.Path Enums Privilege Privilege associated with a connection."
  },
  "api/CCSPluginAPI.Path.Privilege.html": {
    "href": "api/CCSPluginAPI.Path.Privilege.html",
    "title": "Enum Privilege | Cyber Conflict Simulator",
    "keywords": "Enum Privilege Privilege associated with a connection. Namespace : CCSPluginAPI.Path Assembly : CCSPluginAPI.dll Syntax public enum Privilege : int Admin Unprivileged User Extension Methods Helpers.DeepCopy<Privilege>()"
  },
  "api/CommonInterfaces.AccessGraph.AccessGraphNode.html": {
    "href": "api/CommonInterfaces.AccessGraph.AccessGraphNode.html",
    "title": "Class AccessGraph.AccessGraphNode | Cyber Conflict Simulator",
    "keywords": "Class AccessGraph.AccessGraphNode Inner class of Graph class. Represents one node of the graph. Inheritance System.Object AccessGraph.AccessGraphNode Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class AccessGraphNode : Node Constructors AccessGraphNode(Object, Boolean, Boolean) Declaration public AccessGraphNode(dynamic obj, bool isRouter, bool isActive = true) Parameters System.Object obj System.Boolean isRouter System.Boolean isActive Properties AccessMap Declaration public Dictionary<string, List<AccessTuple>> AccessMap { get; set; } Property Value Dictionary < System.String , List < AccessTuple >> IsRouter Declaration public bool IsRouter { get; set; } Property Value System.Boolean IsTrustZone Declaration public bool IsTrustZone { get; set; } Property Value System.Boolean Successors Declaration public List<AccessGraph.AccessGraphNode> Successors { get; } Property Value List < AccessGraph.AccessGraphNode > Weight Weight of the node Declaration public int Weight { get; set; } Property Value System.Int32 Methods AddAccess(String, AccessTuple) Declaration public void AddAccess(string id, AccessTuple access) Parameters System.String id AccessTuple access Equals(Object) Declaration public override bool Equals(object obj) Parameters System.Object obj Returns System.Boolean GetAccess(String, Privilege) Returns a collection of AccessTuple s tied to object of given ID, with an optional minimum privilege. Declaration public IEnumerable<AccessTuple> GetAccess(string id, Privilege minPrivilege = default(Privilege)) Parameters System.String id Privilege minPrivilege Returns IEnumerable < AccessTuple > GetHashCode() Declaration public override int GetHashCode() Returns System.Int32 HasAccess(String, ConnectionType, Privilege) Declaration public bool HasAccess(string id, ConnectionType type, Privilege privilege = default(Privilege)) Parameters System.String id ConnectionType type Privilege privilege Returns System.Boolean RemoveAccess(String, ConnectionType, Privilege, String, String) Declaration public void RemoveAccess(string id, ConnectionType type, Privilege privilege, string accountId = \"\", string protocol = \"\") Parameters System.String id ConnectionType type Privilege privilege System.String accountId System.String protocol Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.AccessGraph.html": {
    "href": "api/CommonInterfaces.AccessGraph.html",
    "title": "Class AccessGraph | Cyber Conflict Simulator",
    "keywords": "Class AccessGraph A graph used for keeping track of object relations, mainly network connections and actor or software access to software/machines. Also provides pathfinding capability intended for use with Observables. Inheritance System.Object AccessGraph Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class AccessGraph : GraphBase<AccessGraph.AccessGraphNode>, IAccessGraph Constructors AccessGraph(IEnumerable<Object>) Creates a new instance of AccessGraph using the given landscape objects. The given object collection should be complete in order for connections to be properly established. Declaration public AccessGraph(IEnumerable<dynamic> landscapeObjects) Parameters IEnumerable < System.Object > landscapeObjects Properties Graph Declaration protected override Dictionary<string, AccessGraph.AccessGraphNode> Graph { get; } Property Value Dictionary < System.String , AccessGraph.AccessGraphNode > Methods FindShortestPath(String, String, String, Privilege) Returns the shortest path from startId to endId, subject to startAccessor and the requested minimum privilege. Declaration public List<PathNode> FindShortestPath(string startId, string endId, string startAccessor, Privilege targetPrivilege = default(Privilege)) Parameters System.String startId System.String endId System.String startAccessor Privilege targetPrivilege Returns List < PathNode > NodeHasAccessTo(String, String, Privilege) Checks if the node given by nodeId has access to node targetNodeId under the given privilege. Declaration public bool NodeHasAccessTo(string nodeId, string targetNodeId, Privilege privilege = default(Privilege)) Parameters System.String nodeId System.String targetNodeId Privilege privilege Returns System.Boolean Implements IAccessGraph.NodeHasAccessTo(String, String, Privilege) UpdatedObjectHandler(Object, Object, List<Object>) Handler method for landscape's object updates, additions or removals. Declaration public void UpdatedObjectHandler(dynamic updatedEntity, dynamic oldEntity, List<dynamic> landscapeObjects) Parameters System.Object updatedEntity Entity as it is after the update (can be null if object is removed) System.Object oldEntity Entity as it was before the update (can be null if new object is added) List < System.Object > landscapeObjects The rest of the landscape, used for referencing Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.AccessTuple.html": {
    "href": "api/CommonInterfaces.AccessTuple.html",
    "title": "Class AccessTuple | Cyber Conflict Simulator",
    "keywords": "Class AccessTuple Defines access information, comprising of ConnectionType and an associated Privilege. If the ConnectionType is Login, a Protocol is expected to be set as well. Inheritance System.Object AccessTuple Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class AccessTuple : object Constructors AccessTuple(ConnectionType, Privilege, String, String) Declaration public AccessTuple(ConnectionType connType, Privilege privilege, string accountId = \"\", string protocol = \"\") Parameters ConnectionType connType Privilege privilege System.String accountId System.String protocol Properties AccountId User account ID of the session under which the connection is established. Declaration public string AccountId { get; } Property Value System.String ConnectionType Declaration public ConnectionType ConnectionType { get; } Property Value ConnectionType Privilege Declaration public Privilege Privilege { get; } Property Value Privilege Protocol Protocol under which the connection is established. Used in case of ConnectionType Login. Declaration public string Protocol { get; } Property Value System.String Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters System.Object obj Returns System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns System.Int32 Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ActionAndParamsLocalization.html": {
    "href": "api/CommonInterfaces.ActionAndParamsLocalization.html",
    "title": "Class ActionAndParamsLocalization | Cyber Conflict Simulator",
    "keywords": "Class ActionAndParamsLocalization Inheritance System.Object ActionAndParamsLocalization Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class ActionAndParamsLocalization : object Constructors ActionAndParamsLocalization() Declaration public ActionAndParamsLocalization() Properties Description Declaration public string Description { get; set; } Property Value System.String Name Declaration public string Name { get; set; } Property Value System.String ParamsLocalizations Declaration public Dictionary<string, ParamsLocalization> ParamsLocalizations { get; set; } Property Value Dictionary < System.String , ParamsLocalization > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ActionCombinationAggregate.html": {
    "href": "api/CommonInterfaces.ActionCombinationAggregate.html",
    "title": "Class ActionCombinationAggregate | Cyber Conflict Simulator",
    "keywords": "Class ActionCombinationAggregate Defines object for multiple combinations of a particular action. Inheritance System.Object ActionCombinationAggregate Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class ActionCombinationAggregate : object Constructors ActionCombinationAggregate() Declaration public ActionCombinationAggregate() Properties ActionType Declaration public Type ActionType { get; set; } Property Value Type DataTypes Types of data for input field Declaration public List<string> DataTypes { get; set; } Property Value List < System.String > Description Declaration public string Description { get; set; } Property Value System.String IndependentParameters Dictionary containing all the combination-independent parameters. Mapped as Key -> ParameterInfo -collection. Each item inside the ParameterInfo collection can be used along any of the combinations listed in ParameterCombinations . Declaration public Dictionary<string, List<ParameterInfo>> IndependentParameters { get; set; } Property Value Dictionary < System.String , List < ParameterInfo >> Name Declaration public string Name { get; set; } Property Value System.String ParameterCombinations Collection containing all the combinations of combination-dependent parameters. Each collection item is a single combination, mapped as Key -> ParameterInfo . Declaration public List<Dictionary<string, ParameterInfo>> ParameterCombinations { get; set; } Property Value List < Dictionary < System.String , ParameterInfo >> ParamKeys Keys of the action's parameters, ordered as per the configuration. Declaration public List<string> ParamKeys { get; set; } Property Value List < System.String > ParamTypes Types of the action's parameters, ordered as per the configuration. Declaration public List<ParameterType> ParamTypes { get; set; } Property Value List < ParameterType > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ActionCombinationHandler.html": {
    "href": "api/CommonInterfaces.ActionCombinationHandler.html",
    "title": "Class ActionCombinationHandler | Cyber Conflict Simulator",
    "keywords": "Class ActionCombinationHandler Class defines functions for handling combination processing and parameters handling Inheritance System.Object ActionCombinationHandler Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class ActionCombinationHandler : object Constructors ActionCombinationHandler(IReadOnlyList<ActionConfig>) Declaration public ActionCombinationHandler(IReadOnlyList<ActionConfig> actionConfigs) Parameters IReadOnlyList < ActionConfig > actionConfigs Methods CheckConditions(IEnumerable<Parameter>, ActionConfig, Boolean) Check if one combination satisfies all conditions defined in the config file. This method is delegated through ActionConfig objects. Declaration public (bool, Dictionary<string, object>) CheckConditions(IEnumerable<Parameter> combination, ActionConfig config, bool checkOnGlobal) Parameters IEnumerable < Parameter > combination Parameter combination to check ActionConfig config Config containing the appropriate checker System.Boolean checkOnGlobal Returns System.ValueTuple < System.Boolean , Dictionary < System.String , System.Object >> GetCombinations(IPlayer, ActionConfig, Int32) Get all combinations that satisfy conditions defined in the config file. Declaration public (ActionCombinationAggregate, ActionCombinationLogRecord) GetCombinations(IPlayer player, ActionConfig config, int verbose = 0) Parameters IPlayer player ActionConfig config System.Int32 verbose Returns System.ValueTuple < ActionCombinationAggregate , ActionCombinationLogRecord > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ActionCombinationInfo.html": {
    "href": "api/CommonInterfaces.ActionCombinationInfo.html",
    "title": "Class ActionCombinationInfo | Cyber Conflict Simulator",
    "keywords": "Class ActionCombinationInfo Defines object for single action combination. Inheritance System.Object ActionCombinationInfo Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class ActionCombinationInfo : object Properties ActionType Declaration public Type ActionType { get; set; } Property Value Type Description Declaration public string Description { get; set; } Property Value System.String DurationForActor Declaration public float DurationForActor { get; set; } Property Value System.Single Name Declaration public string Name { get; set; } Property Value System.String Parameters Declaration public List<Parameter> Parameters { get; set; } Property Value List < Parameter > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ActionController.html": {
    "href": "api/CommonInterfaces.ActionController.html",
    "title": "Class ActionController | Cyber Conflict Simulator",
    "keywords": "Class ActionController Class used to control program flow of one instance of the action. Inheritance System.Object ActionController Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class ActionController : object Constructors ActionController(Func<IEnumerable<Parameter>, Type, Boolean, ConditionCheckOutput>, Dictionary<String, ActionState>) Declaration public ActionController(Func<IEnumerable<Parameter>, Type, bool, ConditionCheckOutput> checkParameters, Dictionary<string, ActionState> actionStates = null) Parameters Func < IEnumerable < Parameter >, Type , System.Boolean , ConditionCheckOutput > checkParameters Dictionary < System.String , ActionState > actionStates Methods FinishAction(String) Declaration public void FinishAction(string actionId) Parameters System.String actionId GetActionState(String) Declaration public IActionState GetActionState(string actionId) Parameters System.String actionId Returns IActionState InitializeAction(ActionBase, List<Parameter>, String, ActionConfig) Handles and initializes all the neccessary properties each Action requires. Preprocesses the given parameters so the useful carried information (as defined by the ParameterType ) is stored in Parameter 's Entity. Declaration public void InitializeAction(ActionBase action, List<Parameter> parameters, string guid, ActionConfig config) Parameters ActionBase action List < Parameter > parameters List of Parameter objects, expected to be in form as given by ActionCombinationHandler 's CreateDisplayableParameters. System.String guid Newly instantiated ActionConfig config Action's configuration, kept in PluginHandler 's ActionConfigDictionary or (after initialization) on the derived Action's class. KillAction(ActionBase) Declaration public void KillAction(ActionBase action) Parameters ActionBase action KillAction(String) Declaration public void KillAction(string actionId) Parameters System.String actionId StopAction(ActionBase) Declaration public void StopAction(ActionBase action) Parameters ActionBase action UpdateAction(ActionBase, ActionConfig) Performs one update of action lifecycle Declaration public void UpdateAction(ActionBase action, ActionConfig config) Parameters ActionBase action ActionConfig config Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ActionLocalization.html": {
    "href": "api/CommonInterfaces.ActionLocalization.html",
    "title": "Class ActionLocalization | Cyber Conflict Simulator",
    "keywords": "Class ActionLocalization Inheritance System.Object CCSData ActionLocalization Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class ActionLocalization : CCSData Constructors ActionLocalization() Declaration public ActionLocalization() Properties ActionLanguages Main dict key is action identifier, child dict key is language identifier which contains action and parameters info localized Example ActionLanguages[\"recon\"][\"en\"].Name Declaration public Dictionary<string, Dictionary<string, ActionAndParamsLocalization>> ActionLanguages { get; set; } Property Value Dictionary < System.String , Dictionary < System.String , ActionAndParamsLocalization >> Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ActionLog.html": {
    "href": "api/CommonInterfaces.ActionLog.html",
    "title": "Class ActionLog | Cyber Conflict Simulator",
    "keywords": "Class ActionLog Message type containing logs of actions Inheritance System.Object CCSData MessageBase PlayerMessageBase ActionLog Inherited Members PlayerMessageBase.TextMessage PlayerMessageBase.ReceiverId MessageBase.Id MessageBase.Title MessageBase.Index MessageBase.DateTime MessageBase.SenderId Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class ActionLog : PlayerMessageBase Properties Log Declaration public Log Log { get; set; } Property Value Log Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ActionManager.html": {
    "href": "api/CommonInterfaces.ActionManager.html",
    "title": "Class ActionManager | Cyber Conflict Simulator",
    "keywords": "Class ActionManager Class used to manage Actions and action lifecycle. It consists of components: CombinationHandler and ActionController Inheritance System.Object ActionManager Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class ActionManager : object, ISerializable<ActionManagerData>, IActionManager Constructors ActionManager(IReadOnlyList<ActionConfig>, ActionManagerData) Declaration public ActionManager(IReadOnlyList<ActionConfig> actionConfigs, ActionManagerData data) Parameters IReadOnlyList < ActionConfig > actionConfigs ActionManagerData data Properties ActionConfigDictionary Dictionary containing config files for all actions. Key is action name. Declaration public Dictionary<string, ActionConfig> ActionConfigDictionary { get; } Property Value Dictionary < System.String , ActionConfig > ActionController Declaration public ActionController ActionController { get; } Property Value ActionController ActionsHistory Declaration public List<ActionBase> ActionsHistory { get; } Property Value List < ActionBase > ActionsInProgress Declaration public List<ActionBase> ActionsInProgress { get; } Property Value List < ActionBase > ActionsToDo Declaration public ConcurrentList<ActionToDo> ActionsToDo { get; } Property Value ConcurrentList < ActionToDo > CombinationHandler Declaration public ActionCombinationHandler CombinationHandler { get; } Property Value ActionCombinationHandler NewActions Declaration public List<ActionToDo> NewActions { get; } Property Value List < ActionToDo > Methods CheckCombination(IEnumerable<Parameter>, Type, Boolean) Check combination for action with type actionType Declaration public ConditionCheckOutput CheckCombination(IEnumerable<Parameter> combination, Type actionType, bool checkOnGlobal = false) Parameters IEnumerable < Parameter > combination Type actionType System.Boolean checkOnGlobal Returns ConditionCheckOutput CreateNewAction(Type, String, List<Parameter>) Creates a new action of type actionType . actionType must be a known ActionBase -inheriting class. Declaration public ActionBase CreateNewAction(Type actionType, string guid, List<Parameter> parameters) Parameters Type actionType ActionBase -inheriting class. System.String guid Instance of List < Parameter > parameters List of Parameter s, as expected by ActionBase Returns ActionBase CreateNewAction(Type, String, Object[]) Creates a new action of type actionType . actionType must be a known ActionBase -inheriting class. Declaration public ActionBase CreateNewAction(Type actionType, string guid, params object[] parameters) Parameters Type actionType ActionBase -inheriting class. System.String guid Instance of System.Object [] parameters Array of parameter entities, identical to those given by Returns ActionBase CreateNewAction<T>(String, List<Parameter>) Creates a new action of type T . T must be a known ActionBase -inheriting class. Declaration public ActionBase CreateNewAction<T>(string guid, List<Parameter> parameters) Parameters System.String guid Instance of List < Parameter > parameters List of Parameter s, as expected by ActionBase Returns ActionBase Type Parameters T ActionBase -inheriting class. CreateNewAction<T>(String, Object[]) Creates a new action of type T . T must be a known ActionBase -inheriting class. Declaration public ActionBase CreateNewAction<T>(string guid, params object[] parameters) Parameters System.String guid Instance of System.Object [] parameters Array of parameter entities, identical to those given by Returns ActionBase Type Parameters T ActionBase -inheriting class. DoAction(ActionBase, Type, String, List<Parameter>) Declaration public string DoAction(ActionBase caller, Type actionType, string playerId, List<Parameter> parameters) Parameters ActionBase caller Type actionType System.String playerId List < Parameter > parameters Returns System.String DoAction(ActionToDo) Declaration public string DoAction(ActionToDo action) Parameters ActionToDo action Returns System.String Export() Declaration public ActionManagerData Export() Returns ActionManagerData Implements ISerializable<T>.Export() FinishAction(String) Declaration public void FinishAction(string actionId) Parameters System.String actionId Implements IActionManager.FinishAction(String) GetActionName(String) Get name of action with id actionId Declaration public string GetActionName(string actionId) Parameters System.String actionId Returns System.String Implements IActionManager.GetActionName(String) GetActionOutput(String) Get current output of action with id actionId Declaration public DynamicDictionary GetActionOutput(string actionId) Parameters System.String actionId Returns DynamicDictionary GetActionState(String) Get state of action with id actionId Declaration public IActionState GetActionState(string actionId) Parameters System.String actionId Returns IActionState Implements IActionManager.GetActionState(String) GetActionStatus(String) Get current status of action with id actionId Declaration public ActionStatus GetActionStatus(string actionId) Parameters System.String actionId Returns ActionStatus Implements IActionManager.GetActionStatus(String) GetActionSuccessFlag(String) Get sucess flag of action with id actionId Declaration public bool GetActionSuccessFlag(string actionId) Parameters System.String actionId Returns System.Boolean Implements IActionManager.GetActionSuccessFlag(String) GetActionTypeName(String) Get type name of action with id actionId Declaration public string GetActionTypeName(string actionId) Parameters System.String actionId Returns System.String GetCombinations(IPlayer, Type, Int32) Get collection of combinations of action with type actionType for player Declaration public (ActionCombinationAggregate, ActionCombinationLogRecord) GetCombinations(IPlayer player, Type actionType, int verbose = 0) Parameters IPlayer player Type actionType System.Int32 verbose Returns System.ValueTuple < ActionCombinationAggregate , ActionCombinationLogRecord > GetConfigForAction(ActionBase) Declaration public ActionConfig GetConfigForAction(ActionBase action) Parameters ActionBase action Returns ActionConfig KillAction(String) Kill action with id actionId Declaration public void KillAction(string actionId) Parameters System.String actionId Implements IActionManager.KillAction(String) ProcessRunningActions() Performs Update on currently running actions and returns any that have finished. Declaration public IEnumerable<ActionBase> ProcessRunningActions() Returns IEnumerable < ActionBase > StopAction(String) Declaration public bool StopAction(string actionId) Parameters System.String actionId Returns System.Boolean UpdateAction(ActionBase) Perform one update step with action Declaration public void UpdateAction(ActionBase action) Parameters ActionBase action Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ActionState.html": {
    "href": "api/CommonInterfaces.ActionState.html",
    "title": "Class ActionState | Cyber Conflict Simulator",
    "keywords": "Class ActionState Inheritance System.Object ActionState Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class ActionState : object, IActionState Properties ActorTeam Declaration public ActorTeam ActorTeam { get; set; } Property Value ActorTeam Duration Declaration public double Duration { get; set; } Property Value System.Double Implements IActionState.Duration FinishedAt Declaration public DateTime FinishedAt { get; set; } Property Value DateTime Id Declaration public string Id { get; set; } Property Value System.String Implements IActionState.Id IsBackground Declaration public bool IsBackground { get; set; } Property Value System.Boolean Implements IActionState.IsBackground Name Declaration public string Name { get; set; } Property Value System.String Implements IActionState.Name Output Declaration public DynamicDictionary Output { get; set; } Property Value DynamicDictionary Parameters Declaration public IReadOnlyList<Parameter> Parameters { get; set; } Property Value IReadOnlyList < Parameter > Player Declaration public string Player { get; set; } Property Value System.String Implements IActionState.Player Progress Declaration public double Progress { get; set; } Property Value System.Double Implements IActionState.Progress RemainingTime Declaration public double RemainingTime { get; set; } Property Value System.Double Implements IActionState.RemainingTime StartedAt Declaration public DateTime StartedAt { get; set; } Property Value DateTime StartParameters Declaration public IReadOnlyList<Parameter> StartParameters { get; set; } Property Value IReadOnlyList < Parameter > Status Declaration public ActionStatus Status { get; set; } Property Value ActionStatus Implements IActionState.Status Success Declaration public bool Success { get; set; } Property Value System.Boolean Implements IActionState.Success TotalTime Declaration public double TotalTime { get; set; } Property Value System.Double Implements IActionState.TotalTime TypeName Declaration public string TypeName { get; set; } Property Value System.String Implements IActionState.TypeName Explicit Interface Implementations IActionState.ActorTeam Declaration IActorTeam IActionState.ActorTeam { get; } Returns IActorTeam Implements IActionState.ActorTeam Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ActionToDo.html": {
    "href": "api/CommonInterfaces.ActionToDo.html",
    "title": "Class ActionToDo | Cyber Conflict Simulator",
    "keywords": "Class ActionToDo Inheritance System.Object ActionToDo Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class ActionToDo : object Properties ActionType Declaration public Type ActionType { get; set; } Property Value Type ActorDirection Declaration public ActorDirection ActorDirection { get; set; } Property Value ActorDirection ActorID Declaration public string ActorID { get; set; } Property Value System.String Id Declaration public string Id { get; set; } Property Value System.String IsVisibleToPlayer Declaration public bool IsVisibleToPlayer { get; set; } Property Value System.Boolean Name Declaration public string Name { get; set; } Property Value System.String Parameters Declaration public List<Parameter> Parameters { get; set; } Property Value List < Parameter > PlayerID Declaration public string PlayerID { get; set; } Property Value System.String Remove Declaration public bool Remove { get; set; } Property Value System.Boolean Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ActorDirection.html": {
    "href": "api/CommonInterfaces.ActorDirection.html",
    "title": "Enum ActorDirection | Cyber Conflict Simulator",
    "keywords": "Enum ActorDirection Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public enum ActorDirection : int Add Remove Extension Methods Helpers.DeepCopy<ActorDirection>()"
  },
  "api/CommonInterfaces.ActorTeam.html": {
    "href": "api/CommonInterfaces.ActorTeam.html",
    "title": "Class ActorTeam | Cyber Conflict Simulator",
    "keywords": "Class ActorTeam Inheritance System.Object ActorTeam Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class ActorTeam : object, IActorTeam Constructors ActorTeam() Declaration public ActorTeam() ActorTeam(IEnumerable<String>) Declaration public ActorTeam(IEnumerable<string> actors) Parameters IEnumerable < System.String > actors Properties Actors Declaration public IReadOnlyList<string> Actors { get; } Property Value IReadOnlyList < System.String > NumActors Declaration public int NumActors { get; } Property Value System.Int32 Implements IActorTeam.NumActors Methods AddActor(Object) Declaration public void AddActor(dynamic actor) Parameters System.Object actor AddActor(String) Declaration public void AddActor(string actorId) Parameters System.String actorId ContainsActor(Object) Declaration public bool ContainsActor(dynamic actor) Parameters System.Object actor Returns System.Boolean Implements IActorTeam.ContainsActor(Object) ContainsActor(String) Declaration public bool ContainsActor(string actorId) Parameters System.String actorId Returns System.Boolean Implements IActorTeam.ContainsActor(String) GetAvgSkillValue(String) Declaration public double GetAvgSkillValue(string skill) Parameters System.String skill Returns System.Double Implements IActorTeam.GetAvgSkillValue(String) GetBestNSkillValue(String, Int32) Declaration public double GetBestNSkillValue(string skill, int N) Parameters System.String skill System.Int32 N Returns System.Double Implements IActorTeam.GetBestNSkillValue(String, Int32) GetMaxSkillValue(String) Declaration public double GetMaxSkillValue(string skill) Parameters System.String skill Returns System.Double Implements IActorTeam.GetMaxSkillValue(String) GetTotalSkillValue(String) Declaration public double GetTotalSkillValue(string skill) Parameters System.String skill Returns System.Double Implements IActorTeam.GetTotalSkillValue(String) RemoveActor(Object) Declaration public void RemoveActor(dynamic actor) Parameters System.Object actor Implements IActorTeam.RemoveActor(Object) RemoveActor(String) Declaration public void RemoveActor(string actorId) Parameters System.String actorId Implements IActorTeam.RemoveActor(String) Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.AggregateControlOutput.html": {
    "href": "api/CommonInterfaces.AggregateControlOutput.html",
    "title": "Class AggregateControlOutput | Cyber Conflict Simulator",
    "keywords": "Class AggregateControlOutput Contains the collection of EntityControlOutput s over multiple entities on a path. Inheritance System.Object AggregateControlOutput Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class AggregateControlOutput : object, IAggregateControlOutput Constructors AggregateControlOutput() Declaration public AggregateControlOutput() Properties EntityOutputs Declaration public Dictionary<string, EntityControlOutput> EntityOutputs { get; } Property Value Dictionary < System.String , EntityControlOutput > Pass Declaration public bool Pass { get; } Property Value System.Boolean Implements IAggregateControlOutput.Pass Methods AddOutput(String, EntityControlOutput) Add the given output of the entity specified by the ID. Declaration public void AddOutput(string entityId, EntityControlOutput output) Parameters System.String entityId EntityControlOutput output GetOutput(String) Declaration public IEntityControlOutput GetOutput(string entityId) Parameters System.String entityId Returns IEntityControlOutput Implements IAggregateControlOutput.GetOutput(String) GetOutputOfType(String, String) Declaration public IReadOnlyList<ControlOutput> GetOutputOfType(string entityId, string controlType) Parameters System.String entityId System.String controlType Returns IReadOnlyList < ControlOutput > MergeOutput(AggregateControlOutput) Merges the given output with the current one. Declaration public void MergeOutput(AggregateControlOutput output) Parameters AggregateControlOutput output Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Alert.html": {
    "href": "api/CommonInterfaces.Alert.html",
    "title": "Class Alert | Cyber Conflict Simulator",
    "keywords": "Class Alert Message type containing logs of controls. Inheritance System.Object CCSData MessageBase PlayerMessageBase Alert Inherited Members PlayerMessageBase.TextMessage PlayerMessageBase.ReceiverId MessageBase.Id MessageBase.Title MessageBase.Index MessageBase.DateTime MessageBase.SenderId Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class Alert : PlayerMessageBase Properties Log Declaration public Log Log { get; set; } Property Value Log Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Application.html": {
    "href": "api/CommonInterfaces.Application.html",
    "title": "Class Application | Cyber Conflict Simulator",
    "keywords": "Class Application Inheritance System.Object Application Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public static class Application : object Properties Instance Declaration public static ApplicationBase Instance { get; set; } Property Value ApplicationBase Methods GetLogger(LoggerType) Declaration public static Logger GetLogger(LoggerType type) Parameters LoggerType type Returns Logger"
  },
  "api/CommonInterfaces.ApplicationBase.html": {
    "href": "api/CommonInterfaces.ApplicationBase.html",
    "title": "Class ApplicationBase | Cyber Conflict Simulator",
    "keywords": "Class ApplicationBase Simulator application implementation. This is singleton class as only single instance per simulation game is allowed! It implementes all interfaces needed for app to run. Maintains the player, landscape and actions state; Should Control time of simulation(needs refactoring, now game class fiddles with that logic?). Inheritance System.Object ApplicationBase Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public abstract class ApplicationBase : object, IReadOnlyApplication, ILog Properties ActionManager Declaration public ActionManager ActionManager { get; protected set; } Property Value ActionManager ControlManager Declaration public ControlManager ControlManager { get; protected set; } Property Value ControlManager CurrentDateTime Declaration public DateTime CurrentDateTime { get; protected set; } Property Value DateTime DeltaT Declaration public double DeltaT { get; protected set; } Property Value System.Double Implements IReadOnlyApplication.DeltaT ExpressionManager Declaration public ExpressionManager ExpressionManager { get; protected set; } Property Value ExpressionManager Landscape Declaration public Landscape Landscape { get; protected set; } Property Value Landscape Ledger Declaration public Ledger Ledger { get; protected set; } Property Value Ledger Logs Declaration public List<Log> Logs { get; protected set; } Property Value List < Log > Implements ILog.Logs Messenger Declaration public Messenger Messenger { get; protected set; } Property Value Messenger Metadata Declaration public Metadata Metadata { get; protected set; } Property Value Metadata Players Declaration public List<Player> Players { get; protected set; } Property Value List < Player > SharedObjects Declaration public Landscape SharedObjects { get; protected set; } Property Value Landscape SimulationTime Declaration public double SimulationTime { get; protected set; } Property Value System.Double Implements IReadOnlyApplication.SimulationTime Methods AddToLog(Log) Declaration public void AddToLog(Log log) Parameters Log log Implements IReadOnlyApplication.AddToLog(Log) ILog.AddToLog(Log) DoAction(ActionBase, Type, String, List<Parameter>) Declaration public string DoAction(ActionBase caller, Type actionType, string playerId, List<Parameter> parameters) Parameters ActionBase caller Type actionType System.String playerId List < Parameter > parameters Returns System.String DoAction(ActionToDo) Declaration public string DoAction(ActionToDo action) Parameters ActionToDo action Returns System.String FinishAction(String) Declaration public void FinishAction(string actionId) Parameters System.String actionId Implements IReadOnlyApplication.FinishAction(String) GetActionOutput(String) Declaration public DynamicDictionary GetActionOutput(string actionId) Parameters System.String actionId Returns DynamicDictionary GetActionsHistory() Declaration public List<ActionBase> GetActionsHistory() Returns List < ActionBase > GetActionsInProgress() Declaration public List<ActionBase> GetActionsInProgress() Returns List < ActionBase > GetActionStatus(String) Declaration public ActionStatus GetActionStatus(string actionId) Parameters System.String actionId Returns ActionStatus GetActionsToDo() Declaration public ConcurrentList<ActionToDo> GetActionsToDo() Returns ConcurrentList < ActionToDo > GetActionSuccessFlag(String) Declaration public bool GetActionSuccessFlag(string actionId) Parameters System.String actionId Returns System.Boolean GetActionTypeName(String) Declaration public string GetActionTypeName(string actionId) Parameters System.String actionId Returns System.String Implements IReadOnlyApplication.GetActionTypeName(String) GetConfigForAction(String) Declaration public ActionConfig GetConfigForAction(string actionName) Parameters System.String actionName Returns ActionConfig GetLogger(LoggerType) Declaration public static Logger GetLogger(LoggerType type) Parameters LoggerType type Returns Logger GetNewActions() Declaration public List<ActionToDo> GetNewActions() Returns List < ActionToDo > GetPlayer(String) Declaration public Player GetPlayer(string playerId) Parameters System.String playerId Returns Player GetPlayerLandscape(String) Declaration public Landscape GetPlayerLandscape(string playerId) Parameters System.String playerId Returns Landscape GetPlayerLogs(String) Declaration public List<Log> GetPlayerLogs(string playerId) Parameters System.String playerId Returns List < Log > Implements ILog.GetPlayerLogs(String) KillAction(String) Declaration public void KillAction(string actionId) Parameters System.String actionId Implements IReadOnlyApplication.KillAction(String) StopAction(String) Declaration public bool StopAction(string actionId) Parameters System.String actionId Returns System.Boolean UpdateCurrentDateTime(Double) Declaration public void UpdateCurrentDateTime(double simTimeDelta) Parameters System.Double simTimeDelta UpdateTime(Double) Increases the Application's time by given amount and updates any linked mechanisms. Declaration public void UpdateTime(double deltaT) Parameters System.Double deltaT Explicit Interface Implementations IReadOnlyApplication.ControlManager Declaration IControlManager IReadOnlyApplication.ControlManager { get; } Returns IControlManager Implements IReadOnlyApplication.ControlManager IReadOnlyApplication.GetPlayer(String) Declaration IPlayer IReadOnlyApplication.GetPlayer(string playerId) Parameters System.String playerId Returns IPlayer Implements IReadOnlyApplication.GetPlayer(String) IReadOnlyApplication.GetPlayerLandscape(String) Declaration ILandscape IReadOnlyApplication.GetPlayerLandscape(string playerId) Parameters System.String playerId Returns ILandscape Implements IReadOnlyApplication.GetPlayerLandscape(String) IReadOnlyApplication.Landscape Declaration ILandscape IReadOnlyApplication.Landscape { get; } Returns ILandscape Implements IReadOnlyApplication.Landscape IReadOnlyApplication.Ledger Declaration ILedger IReadOnlyApplication.Ledger { get; } Returns ILedger Implements IReadOnlyApplication.Ledger IReadOnlyApplication.Messenger Declaration IMessenger IReadOnlyApplication.Messenger { get; } Returns IMessenger Implements IReadOnlyApplication.Messenger IReadOnlyApplication.SharedObjects Declaration ILandscape IReadOnlyApplication.SharedObjects { get; } Returns ILandscape Implements IReadOnlyApplication.SharedObjects Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.AttributeExpression.html": {
    "href": "api/CommonInterfaces.AttributeExpression.html",
    "title": "Class AttributeExpression | Cyber Conflict Simulator",
    "keywords": "Class AttributeExpression Implements the construct for evaluating Expressions tied to attributes on landscape objects. Whenever an AttributeExpression is evaluated, the attribute specified by AttributeName on object with ID ResidingObjectId on the residing landscape is updated. Inheritance System.Object ExpressionBase AttributeExpression Inherited Members ExpressionBase.InputBlock ExpressionBase.Id ExpressionBase.Status ExpressionBase.ConditionArguments ExpressionBase.ExpressionArguments ExpressionBase.UnifiedArguments ExpressionBase.Initialize() ExpressionBase.Equals(Object) ExpressionBase.GetHashCode() ExpressionBase.PerformEvaluation(List<Object>, List<Object>) ExpressionBase.ListToDictionary(IEnumerable<Formula>) ExpressionBase.SetArguments(List<String>) ExpressionBase.Terminate() Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class AttributeExpression : ExpressionBase, ISerializable<AttributeExpressionData> Constructors AttributeExpression(AttributeExpressionData) Declaration public AttributeExpression(AttributeExpressionData data) Parameters AttributeExpressionData data Properties AttributeName Name of the attribute the AttributeExpression is setting. Declaration public string AttributeName { get; } Property Value System.String AttributeType Type of the attribute the AttributeExpression is setting. Currently supported types are 'string', 'bool', 'int' and 'double'. Declaration public string AttributeType { get; } Property Value System.String DefaultValue Default value of the Expression, to be set if the conditions are not met Declaration public object DefaultValue { get; } Property Value System.Object ResidingObjectId ID of the object in the landscape. When the Expression is evaluated the object will be updated. Declaration public string ResidingObjectId { get; } Property Value System.String Methods Evaluate(List<Object>, Boolean) Declaration protected override void Evaluate(List<object> objects, bool conditionState) Parameters List < System.Object > objects System.Boolean conditionState Overrides ExpressionBase.Evaluate(List<Object>, Boolean) Export() Declaration public AttributeExpressionData Export() Returns AttributeExpressionData Implements ISerializable<T>.Export() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ConnectionType.html": {
    "href": "api/CommonInterfaces.ConnectionType.html",
    "title": "Enum ConnectionType | Cyber Conflict Simulator",
    "keywords": "Enum ConnectionType Type of connection established to a node, ordered from least to most valuable. Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public enum ConnectionType : int Exploit Login Malware Physical Router Extension Methods Helpers.DeepCopy<ConnectionType>()"
  },
  "api/CommonInterfaces.ControlManager.html": {
    "href": "api/CommonInterfaces.ControlManager.html",
    "title": "Class ControlManager | Cyber Conflict Simulator",
    "keywords": "Class ControlManager Inheritance System.Object ControlManager Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class ControlManager : object, IControlManager Constructors ControlManager(List<Object>, IReadOnlyList<Type>, ControlsData) Declaration public ControlManager(List<dynamic> landscapeEntities, IReadOnlyList<Type> controlTypes, ControlsData data) Parameters List < System.Object > landscapeEntities IReadOnlyList < Type > controlTypes ControlsData data Properties ControlTypes Control labels (lowercase) matched to their respective instantiable types. Declaration public static IReadOnlyDictionary<string, Type> ControlTypes { get; } Property Value IReadOnlyDictionary < System.String , Type > Methods Export() Exports ControlsData created from all currently instantiated control objects. Declaration public ControlsData Export() Returns ControlsData TriggerControlsOfTypeOnObject(Object, String, Observable, Nullable<Double>) Declaration public IReadOnlyList<ControlOutput> TriggerControlsOfTypeOnObject(dynamic entity, string controlType, Observable observable, double? random = null) Parameters System.Object entity System.String controlType Observable observable System.Nullable < System.Double > random Returns IReadOnlyList < ControlOutput > TriggerControlsOnObject(Object, Observable, Nullable<Double>) Declaration public IEntityControlOutput TriggerControlsOnObject(dynamic entity, Observable observable, double? random = null) Parameters System.Object entity Observable observable System.Nullable < System.Double > random Returns IEntityControlOutput Implements IControlManager.TriggerControlsOnObject(Object, Observable, Nullable<Double>) TriggerControlsOnPath(String, Observable, String, Privilege, String, Privilege) Declaration public IAggregateControlOutput TriggerControlsOnPath(string actorId, Observable observable, string target, Privilege targetPrivilege = default(Privilege), string via = null, Privilege viaPrivilege = default(Privilege)) Parameters System.String actorId Observable observable System.String target Privilege targetPrivilege System.String via Privilege viaPrivilege Returns IAggregateControlOutput Implements IControlManager.TriggerControlsOnPath(String, Observable, String, Privilege, String, Privilege) TriggerControlsOnStage(Observable, String, String, Privilege) Declaration public IAggregateControlOutput TriggerControlsOnStage(Observable observable, string source, string target, Privilege targetPrivilege = default(Privilege)) Parameters Observable observable System.String source System.String target Privilege targetPrivilege Returns IAggregateControlOutput Implements IControlManager.TriggerControlsOnStage(Observable, String, String, Privilege) Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Culture.html": {
    "href": "api/CommonInterfaces.Culture.html",
    "title": "Class Culture | Cyber Conflict Simulator",
    "keywords": "Class Culture Static class used for setting default culture for whole app Inheritance System.Object Culture Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public static class Culture : object Methods SetCulture() Declaration public static void SetCulture()"
  },
  "api/CommonInterfaces.EntityControlOutput.html": {
    "href": "api/CommonInterfaces.EntityControlOutput.html",
    "title": "Class EntityControlOutput | Cyber Conflict Simulator",
    "keywords": "Class EntityControlOutput Contains the aggregate of ControlOutput collections over multiple control types on a single entity. Inheritance System.Object EntityControlOutput Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class EntityControlOutput : object, IEntityControlOutput Constructors EntityControlOutput() Declaration public EntityControlOutput() Properties ControlOutputs Declaration public Dictionary<string, List<ControlOutput>> ControlOutputs { get; } Property Value Dictionary < System.String , List < ControlOutput >> Pass Declaration public bool Pass { get; } Property Value System.Boolean Implements IEntityControlOutput.Pass Methods AddOutput(String, List<ControlOutput>) Add the given outputs of the specified control type. Declaration public void AddOutput(string controlType, List<ControlOutput> outputs) Parameters System.String controlType List < ControlOutput > outputs GetOutput(String) Declaration public IReadOnlyList<ControlOutput> GetOutput(string controlType) Parameters System.String controlType Returns IReadOnlyList < ControlOutput > MergeOutput(EntityControlOutput) Merges the given output with this one. Declaration public void MergeOutput(EntityControlOutput output) Parameters EntityControlOutput output Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ExpressionBase.html": {
    "href": "api/CommonInterfaces.ExpressionBase.html",
    "title": "Class ExpressionBase | Cyber Conflict Simulator",
    "keywords": "Class ExpressionBase Wrapper abstract class containing the minimal API for handling expressions dependant on particular Objects . The class implements an expression precondition mechanic using an ExpressionPrecondition object as input. Every class derived from ExpressionBase can (but doesn't have to) utilize the precondition mechanic. If no ExpressionPrecondition is given to ExpressionBase 's constructor, the precondition will always evaluate to true . Derived classes have the freedom to do whatever within their overridden Evaluate method, which is called every time a subject is updated. The method receives landscape objects corresponding to the IDs added by the derived class through SetArguments(List<String>) , along with the current evaluation of the precondition. Inheritance System.Object ExpressionBase AttributeExpression Indicator TriggerExpression Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public abstract class ExpressionBase : object Constructors ExpressionBase(ExpressionPrecondition) Handles the preconditions. Declaration public ExpressionBase(ExpressionPrecondition preconditionBlock) Parameters ExpressionPrecondition preconditionBlock Properties ConditionArguments Condition arguments, with repetition, in order. Declaration public ReadOnlyCollection<string> ConditionArguments { get; } Property Value ReadOnlyCollection < System.String > ExpressionArguments Expression arguments, with repetition, in order. To be set by the deriving class. Declaration public ReadOnlyCollection<string> ExpressionArguments { get; } Property Value ReadOnlyCollection < System.String > Id Unique ID of the Expression Declaration public Guid Id { get; } Property Value Guid InputBlock A reference to the expression block passed to the constructor. For future reference. Declaration public CCSData InputBlock { get; protected set; } Property Value CCSData Status Status of the expression Declaration public ExpressionStatus Status { get; } Property Value ExpressionStatus UnifiedArguments Union of ConditionArguments and ExpressionArguments, without repetition. Declaration public ReadOnlyCollection<string> UnifiedArguments { get; } Property Value ReadOnlyCollection < System.String > Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters System.Object obj Returns System.Boolean Evaluate(List<Object>, Boolean) Performs all the required evaluation for an ExpressionBase -inheriting class. This method is called after the precondition has been checked, and the precondition's evaluation is given in the conditionState parameter. Declaration protected abstract void Evaluate(List<object> expressionArgumentObjects, bool conditionState) Parameters List < System.Object > expressionArgumentObjects Objects which the inheriting class requires for evaluation. Defined through SetArguments(List<String>) System.Boolean conditionState Evaluation of the precondition GetHashCode() Declaration public override int GetHashCode() Returns System.Int32 Initialize() Initializes the Expression, locking its arguments and returning a complete argument list, without repetition. Declaration public List<string> Initialize() Returns List < System.String > ListToDictionary(IEnumerable<Formula>) Used for converting a Formula collection into a dictionary to be used by ExpressionDelegator . Declaration protected static DynamicDictionary ListToDictionary(IEnumerable<Formula> inputBlock) Parameters IEnumerable < Formula > inputBlock Returns DynamicDictionary PerformEvaluation(List<Object>, List<Object>) Evaluates the expression's precondition (if it has any) and the expression itself afterwards, using the given respective argument lists. Declaration public void PerformEvaluation(List<object> conditionArgumentObjects, List<object> expressionArgumentObjects) Parameters List < System.Object > conditionArgumentObjects Ordered argument objects for the precondition List < System.Object > expressionArgumentObjects Ordered argument objects for the expression SetArguments(List<String>) Sets arguments as given by ParseExpression(IEnumerable<KeyValuePair<String, Object>>, out List<String>) . Only these arguments will be used for observer-pattern initialization and, in extension, be passed to Evaluate (in the exact order as listed). Declaration protected void SetArguments(List<string> arguments) Parameters List < System.String > arguments Terminate() Sets the Status to Terminated . Declaration protected void Terminate() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ExpressionDelegator.html": {
    "href": "api/CommonInterfaces.ExpressionDelegator.html",
    "title": "Class ExpressionDelegator | Cyber Conflict Simulator",
    "keywords": "Class ExpressionDelegator Class containing of methods used to compile string expressions and operations. Every method returns compiled delegate of expression or operation. Inheritance System.Object ExpressionDelegator Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public static class ExpressionDelegator : object Methods GetActionConditionsChecker(ActionConfig, out List<String>) For action with given ActionConfig, create compiled Expression of Checker method to evaluate given combination. Declaration public static Func<IEnumerable<Parameter>, bool, (bool, Dictionary<string, object>)> GetActionConditionsChecker(ActionConfig config, out List<string> parameterList) Parameters ActionConfig config Action config List < System.String > parameterList Out parameret with list of parameter object ids Returns Func < IEnumerable < Parameter >, System.Boolean , System.ValueTuple < System.Boolean , Dictionary < System.String , System.Object >>> Compiled function delegate of action combination checker. ParseExpression(IEnumerable<KeyValuePair<String, Object>>, out List<String>) Used to parse expressions. Methods used in expressions are parsed once. Declaration public static Func<object[], (object, Dictionary<string, object>)> ParseExpression(IEnumerable<KeyValuePair<string, object>> operations, out List<string> objectList) Parameters IEnumerable < KeyValuePair < System.String , System.Object >> operations List < System.String > objectList Returns Func < System.Object [], System.ValueTuple < System.Object , Dictionary < System.String , System.Object >>> Func object with array object as input ParseExpression(IEnumerable<KeyValuePair<String, String>>, out List<String>) Used to parse expressions. Methods used in expressions are parsed once. Declaration public static Func<object[], (object, Dictionary<string, object>)> ParseExpression(IEnumerable<KeyValuePair<string, string>> operations, out List<string> objectList) Parameters IEnumerable < KeyValuePair < System.String , System.String >> operations List < System.String > objectList Returns Func < System.Object [], System.ValueTuple < System.Object , Dictionary < System.String , System.Object >>> Func object with array object as input. Output of func is explicit tuple with evaluated value as first item, Expression evaluation as second item and log record as third item. ParseOperation(String, String, out IEnumerable<String>) Used to parse one operation from config given in formula. In parameters enumeraton are ordered id's of objects used to evaluate the operation. Declaration public static Func<object[], object> ParseOperation(string name, string formula, out IEnumerable<string> parameters) Parameters System.String name System.String formula IEnumerable < System.String > parameters Returns Func < System.Object [], System.Object > Func object with object array as input"
  },
  "api/CommonInterfaces.ExpressionManager.html": {
    "href": "api/CommonInterfaces.ExpressionManager.html",
    "title": "Class ExpressionManager | Cyber Conflict Simulator",
    "keywords": "Class ExpressionManager Manager class for ExpressionBase -deriving classes. Contains existing expressions and prompts their evaluation according to the observer pattern. Inheritance System.Object ExpressionManager Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class ExpressionManager : object Constructors ExpressionManager(ExpressionsData) Declaration public ExpressionManager(ExpressionsData data) Parameters ExpressionsData data Properties AllExpressions Pool containing all Expressions, unsorted. Declaration public IEnumerable<ExpressionBase> AllExpressions { get; } Property Value IEnumerable < ExpressionBase > ExpressionPool Expression pool mapping object ID to a list of Expressions that depend on that particular object. Declaration public IDictionary<string, List<ExpressionBase>> ExpressionPool { get; } Property Value IDictionary < System.String , List < ExpressionBase >> Indicators Pool containing Indicator expressions, unsorted. Declaration public List<Indicator> Indicators { get; } Property Value List < Indicator > Methods AddExpression(ExpressionBase) Adds the given Expression to the AllExpressions pool. Calling InitializeExpressions() is required before the added Expression can be used by the observer system. Declaration public void AddExpression(ExpressionBase expression) Parameters ExpressionBase expression Export() Exports the expressions' data. Declaration public ExpressionsData Export() Returns ExpressionsData GetIndicator(Guid) Retrieves an Indicator expression specified by the given ID. Declaration public Indicator GetIndicator(Guid recordId) Parameters Guid recordId Returns Indicator GetObservers(String) Retrieves the subject's observer expressions. Declaration public List<ExpressionBase> GetObservers(string subjectId) Parameters System.String subjectId Id of the entity in a landscape Returns List < ExpressionBase > List of the observer expressions, empty if none exist HasObservers(String) Checks if the given subject has any observer expressions. Declaration public bool HasObservers(string subjectId) Parameters System.String subjectId Id of the entity in a landscape Returns System.Boolean InitializeExpressions() Initializes all unitialized ExpressionBase instances in AllExpressions , thereby populating the ExpressionPool . Declaration public void InitializeExpressions() LandscapeUpdateHandler(Object, Object, Boolean) Handler method for ObjectUpdatedEvent . Intended for use ONLY on ground-truth landscapes (Global landscape, Shared objects etc.). Declaration public void LandscapeUpdateHandler(dynamic updatedObject, dynamic oldObject, bool viaExpression) Parameters System.Object updatedObject System.Object oldObject System.Boolean viaExpression RemoveExpression(Guid) Places an order for the ExpressionBase instance with the given Id to be removed from ExpressionPool and AllExpressions. The removal is performed on the next time update to ExpressionManager. Declaration public void RemoveExpression(Guid expressionId) Parameters Guid expressionId UpdateTime(Double) Updates the time delta value of the ExpressionManager and notifies all the expressions dependant on it. Also performs cleanup of Expressions that have to be disposed of. Declaration public void UpdateTime(double delta) Parameters System.Double delta Time delta, in seconds Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ExpressionStatus.html": {
    "href": "api/CommonInterfaces.ExpressionStatus.html",
    "title": "Enum ExpressionStatus | Cyber Conflict Simulator",
    "keywords": "Enum ExpressionStatus Enumerates possible ExpressionBase statuses. Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public enum ExpressionStatus : int Active Terminated Uninitialized Extension Methods Helpers.DeepCopy<ExpressionStatus>()"
  },
  "api/CommonInterfaces.FolderDataManager.html": {
    "href": "api/CommonInterfaces.FolderDataManager.html",
    "title": "Class FolderDataManager | Cyber Conflict Simulator",
    "keywords": "Class FolderDataManager Data manager for game files contained in folders. Inheritance System.Object StreamDataManager FolderDataManager Inherited Members StreamDataManager.ScenarioPath StreamDataManager.ScenarioStream StreamDataManager.LoadGlobalLandscape() StreamDataManager.LoadPlayers() StreamDataManager.LoadSharedObjects() StreamDataManager.LoadMetadata() StreamDataManager.LoadLedger() StreamDataManager.LoadExpressions() StreamDataManager.LoadControls(List<Object>) StreamDataManager.LoadClientInfo() StreamDataManager.LoadMessenger() StreamDataManager.LoadActions() StreamDataManager.LoadLogs() StreamDataManager.LoadLabels() StreamDataManager.LoadAttributes() StreamDataManager.LoadGlobalLandscapeData() StreamDataManager.LoadPlayersData() StreamDataManager.LoadSharedObjectsData() StreamDataManager.LoadLedgerData() StreamDataManager.LoadExpressionsData() StreamDataManager.LoadControlsData() StreamDataManager.LoadMessengerData() StreamDataManager.LoadActionsData() StreamDataManager.SaveGlobalLandscape(Landscape) StreamDataManager.SavePlayers(List<Player>) StreamDataManager.SaveSharedObjects(Landscape) StreamDataManager.SaveMetadata(Metadata) StreamDataManager.SaveLedger(Ledger) StreamDataManager.SaveExpressions(ExpressionManager) StreamDataManager.SaveClientInfo(List<ClientInfo>) StreamDataManager.SaveMessenger(Messenger) StreamDataManager.SaveActions(ActionManager) StreamDataManager.SaveControls(ControlManager) StreamDataManager.SaveLogs(List<Log>) StreamDataManager.SaveLabels(List<Label>) StreamDataManager.SaveAttributes(Dictionary<String, Attribute>) StreamDataManager.SaveGlobalLandscapeData(LandscapeData) StreamDataManager.SavePlayersData(List<PlayerData>) StreamDataManager.SaveSharedObjectsData(LandscapeData) StreamDataManager.SaveLedgerData(LedgerData) StreamDataManager.SaveExpressionsData(ExpressionsData) StreamDataManager.SaveMessengerData(MessengerData) StreamDataManager.SaveActionsData(ActionManagerData) StreamDataManager.SaveControlsData(ControlsData) StreamDataManager.CopyTo(ISimulatorDataManager) Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class FolderDataManager : StreamDataManager, ISimulatorDataManager, IDisposable Methods Create(String) Declaration public static ISimulatorDataManager Create(string fullPath) Parameters System.String fullPath Returns ISimulatorDataManager Create(String, String) Declaration public static ISimulatorDataManager Create(string name, string outPath) Parameters System.String name System.String outPath Returns ISimulatorDataManager CreateEntry(String) Declaration public override Stream CreateEntry(string entryName) Parameters System.String entryName Returns Stream Overrides StreamDataManager.CreateEntry(String) Dispose() Declaration public override void Dispose() Overrides StreamDataManager.Dispose() GetEntry(String) Declaration public override Stream GetEntry(string entryName) Parameters System.String entryName Returns Stream Overrides StreamDataManager.GetEntry(String) Open(String) Declaration public static ISimulatorDataManager Open(string scenarioPath) Parameters System.String scenarioPath Returns ISimulatorDataManager Read(String) Declaration public static ISimulatorDataManager Read(string fullPath) Parameters System.String fullPath Returns ISimulatorDataManager RemoveEntry(String) Declaration public override bool RemoveEntry(string entryName) Parameters System.String entryName Returns System.Boolean Overrides StreamDataManager.RemoveEntry(String) Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Helpers.html": {
    "href": "api/CommonInterfaces.Helpers.html",
    "title": "Class Helpers | Cyber Conflict Simulator",
    "keywords": "Class Helpers Inheritance System.Object Helpers Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public static class Helpers : object Methods DatetimeFromMilliseconds(Double) Declaration public static DateTime DatetimeFromMilliseconds(double milliseconds) Parameters System.Double milliseconds Returns DateTime GetParam(String, IEnumerable<Parameter>) Declaration public static Parameter GetParam(string key, IEnumerable<Parameter> parameters) Parameters System.String key IEnumerable < Parameter > parameters Returns Parameter MillisecondsFromDatetime(DateTime) Declaration public static double MillisecondsFromDatetime(DateTime datetime) Parameters DateTime datetime Returns System.Double"
  },
  "api/CommonInterfaces.Hint.html": {
    "href": "api/CommonInterfaces.Hint.html",
    "title": "Class Hint | Cyber Conflict Simulator",
    "keywords": "Class Hint Message type containing objects that serve as a hint to player. Only gamemaster is allowed to send hints. Inheritance System.Object CCSData MessageBase PlayerMessageBase Hint Inherited Members PlayerMessageBase.TextMessage PlayerMessageBase.ReceiverId MessageBase.Id MessageBase.Title MessageBase.Index MessageBase.DateTime MessageBase.SenderId Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class Hint : PlayerMessageBase Properties Content Declaration public IEnumerable<dynamic> Content { get; set; } Property Value IEnumerable < System.Object > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.html": {
    "href": "api/CommonInterfaces.html",
    "title": "Namespace CommonInterfaces | Cyber Conflict Simulator",
    "keywords": "Namespace CommonInterfaces Classes AccessGraph A graph used for keeping track of object relations, mainly network connections and actor or software access to software/machines. Also provides pathfinding capability intended for use with Observables. AccessGraph.AccessGraphNode Inner class of Graph class. Represents one node of the graph. AccessTuple Defines access information, comprising of ConnectionType and an associated Privilege. If the ConnectionType is Login, a Protocol is expected to be set as well. ActionAndParamsLocalization ActionCombinationAggregate Defines object for multiple combinations of a particular action. ActionCombinationHandler Class defines functions for handling combination processing and parameters handling ActionCombinationInfo Defines object for single action combination. ActionController Class used to control program flow of one instance of the action. ActionLocalization ActionLog Message type containing logs of actions ActionManager Class used to manage Actions and action lifecycle. It consists of components: CombinationHandler and ActionController ActionState ActionToDo ActorTeam AggregateControlOutput Contains the collection of EntityControlOutput s over multiple entities on a path. Alert Message type containing logs of controls. Application ApplicationBase Simulator application implementation. This is singleton class as only single instance per simulation game is allowed! It implementes all interfaces needed for app to run. Maintains the player, landscape and actions state; Should Control time of simulation(needs refactoring, now game class fiddles with that logic?). AttributeExpression Implements the construct for evaluating Expressions tied to attributes on landscape objects. Whenever an AttributeExpression is evaluated, the attribute specified by AttributeName on object with ID ResidingObjectId on the residing landscape is updated. ControlManager Culture Static class used for setting default culture for whole app EntityControlOutput Contains the aggregate of ControlOutput collections over multiple control types on a single entity. ExpressionBase Wrapper abstract class containing the minimal API for handling expressions dependant on particular Objects . The class implements an expression precondition mechanic using an ExpressionPrecondition object as input. Every class derived from ExpressionBase can (but doesn't have to) utilize the precondition mechanic. If no ExpressionPrecondition is given to ExpressionBase 's constructor, the precondition will always evaluate to true . Derived classes have the freedom to do whatever within their overridden Evaluate method, which is called every time a subject is updated. The method receives landscape objects corresponding to the IDs added by the derived class through SetArguments(List<String>) , along with the current evaluation of the precondition. ExpressionDelegator Class containing of methods used to compile string expressions and operations. Every method returns compiled delegate of expression or operation. ExpressionManager Manager class for ExpressionBase -deriving classes. Contains existing expressions and prompts their evaluation according to the observer pattern. FolderDataManager Data manager for game files contained in folders. Helpers Hint Message type containing objects that serve as a hint to player. Only gamemaster is allowed to send hints. Indicator Indicator type of expressions. Used for data display. Player can choose which numerical indicators are important to display on his dashboard. Inject Message containing inject and new objects that player receives due to inject. Inject is a message caused by an event happening. Inventory Landscape Class implementes ILandscape interface Loads and maintains CL objects Landscape oobject is part of the application and/or player object LandscapeStateDelta Contains state delta information of a Landscape or an Inventory . Ledger MessageSession A class containing all messages in one conversation. Messenger General class for sending all types of messages. Metadata NewMessage Class containing neccessary properties for processing new messages. NewMessages Contains a list of new messages. NewRecords Contains ledger records that have been added or updated. Offer Message type containing offer OperationParser Class used as parser of operations from config files. One instance is used to parse one operation. ParameterHandler ParamsLocalization Parser Implements methods for parsing objects into . PathNode Single node of a landscape path. Contains Id of the related landscape entity, access obtained to it, and the accessing node's Id. Player PlayerStateDelta Contains a Player 's Actors and Organizations as well as the available actions in a new state. PluginHandler This class is responsible for loading and keeping informations about different Actions that implement ActionBase abstract class. List of actions can be acquired by calling GetActionTypes(). Before we can do that we must call LoadActions() to load action types information from plugin dll file. Folder that keeps plugin dlls is acquired by calling Helpers.GetDataFolder(). Request Message type containing request. Request is directed to landscape object. Response Message type containing response for a Request Schema Contains everything related to the JSON schema. Load(String) must be called before accessing any other properties or methods. SimulatorDataManagerFactory Implements factory pattern for constructing DataManager for given scenario file/folder based on it's extension. Currently suppotred managers: Throws exception if DataManager is not supported. StreamDataManager SubjectData TextMessage Message type containing basic text message TriggerExpression Implements the construct for evaluating Expressions dependant on condition change. The given expression will be evaluated only when the precondition switches from false to true or vice-versa. The specific behaviour is defined by TriggerOnRisingEdge , where 'Rising edge' indicates the switch from false to true . Additionally, Charges indicates the number of times this trigger will happen. If it's initially set to 0 or a negative number, the amount of charges will be infinite. ZipDataManager Data manager for game files contained in zip archives. Interfaces IBoundGameSubject Defines method required by a Game subject bound to a player (Landscape, Inventory..) or bound globally. IDataManagerCreator IGameSubject Defines properties every Game subject must implement. A Game subject is any data container vital to the application that is tempered with during Action and Expression updating. ILog Custom logging interface for actions and controls usage ISimulatorDataManager IStandaloneGameSubject Defines method required by a Standalone Game subject, meaning not bound to a particular Player. Enums ActorDirection ConnectionType Type of connection established to a node, ordered from least to most valuable. ExpressionStatus Enumerates possible ExpressionBase statuses. SessionType"
  },
  "api/CommonInterfaces.IBoundGameSubject.html": {
    "href": "api/CommonInterfaces.IBoundGameSubject.html",
    "title": "Interface IBoundGameSubject | Cyber Conflict Simulator",
    "keywords": "Interface IBoundGameSubject Defines method required by a Game subject bound to a player (Landscape, Inventory..) or bound globally. Inherited Members IGameSubject.Updated IGameSubject.Clear() Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public interface IBoundGameSubject : IGameSubject Methods GetSubjectDelta() Returns object of type T intended to be passed to a Game event. Declaration SubjectData GetSubjectDelta() Returns SubjectData Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.IDataManagerCreator.html": {
    "href": "api/CommonInterfaces.IDataManagerCreator.html",
    "title": "Interface IDataManagerCreator | Cyber Conflict Simulator",
    "keywords": "Interface IDataManagerCreator Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public interface IDataManagerCreator Properties ScenarioPath Path to scenario data container. Declaration string ScenarioPath { get; } Property Value System.String ScenarioStream Stream of opened zip archive. Declaration Stream ScenarioStream { get; } Property Value Stream Methods Create() Create simulation data container. If one already exists, it is overridden. Declaration ISimulatorDataManager Create() Returns ISimulatorDataManager Open() Open simulation data container. Declaration ISimulatorDataManager Open() Returns ISimulatorDataManager Read() Read from simulation data container. Declaration ISimulatorDataManager Read() Returns ISimulatorDataManager Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.IGameSubject.html": {
    "href": "api/CommonInterfaces.IGameSubject.html",
    "title": "Interface IGameSubject | Cyber Conflict Simulator",
    "keywords": "Interface IGameSubject Defines properties every Game subject must implement. A Game subject is any data container vital to the application that is tempered with during Action and Expression updating. Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public interface IGameSubject Properties Updated Flag indicating whether the IGameSubject has changed since the last call to Clear() . Declaration bool Updated { get; } Property Value System.Boolean Methods Clear() Clears the GameSubject's accumulated changes and resets the Updated flag. Declaration void Clear() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ILog.html": {
    "href": "api/CommonInterfaces.ILog.html",
    "title": "Interface ILog | Cyber Conflict Simulator",
    "keywords": "Interface ILog Custom logging interface for actions and controls usage Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public interface ILog Properties Logs Declaration List<Log> Logs { get; } Property Value List < Log > Methods AddToLog(Log) Adds new log record to the log list Declaration virtual void AddToLog(Log logItem) Parameters Log logItem GetPlayerLogs(String) Gets list of log objects for given playerId Declaration List<Log> GetPlayerLogs(string playerId) Parameters System.String playerId Returns List < Log > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Indicator.html": {
    "href": "api/CommonInterfaces.Indicator.html",
    "title": "Class Indicator | Cyber Conflict Simulator",
    "keywords": "Class Indicator Indicator type of expressions. Used for data display. Player can choose which numerical indicators are important to display on his dashboard. Inheritance System.Object ExpressionBase Indicator Inherited Members ExpressionBase.InputBlock ExpressionBase.Id ExpressionBase.Status ExpressionBase.ConditionArguments ExpressionBase.ExpressionArguments ExpressionBase.UnifiedArguments ExpressionBase.Initialize() ExpressionBase.Equals(Object) ExpressionBase.GetHashCode() ExpressionBase.PerformEvaluation(List<Object>, List<Object>) ExpressionBase.ListToDictionary(IEnumerable<Formula>) ExpressionBase.SetArguments(List<String>) ExpressionBase.Terminate() Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class Indicator : ExpressionBase, ISerializable<IndicatorData> Constructors Indicator(IndicatorData) Declaration public Indicator(IndicatorData data) Parameters IndicatorData data Properties DisplayType Declaration public string DisplayType { get; } Property Value System.String Expression Declaration public Func<object[], object> Expression { get; } Property Value Func < System.Object [], System.Object > Name Declaration public string Name { get; } Property Value System.String OrganizationId Declaration public string OrganizationId { get; } Property Value System.String OrganizationName Declaration public string OrganizationName { get; } Property Value System.String Ranges Declaration public List<DynamicDictionary> Ranges { get; } Property Value List < DynamicDictionary > Record Declaration public ContinuousLedgerRecord Record { get; } Property Value ContinuousLedgerRecord ValueExpression Declaration public string ValueExpression { get; } Property Value System.String Methods Evaluate(List<Object>, Boolean) Declaration protected override void Evaluate(List<object> objects, bool conditionState) Parameters List < System.Object > objects System.Boolean conditionState Overrides ExpressionBase.Evaluate(List<Object>, Boolean) Export() Declaration public IndicatorData Export() Returns IndicatorData Implements ISerializable<T>.Export() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Inject.html": {
    "href": "api/CommonInterfaces.Inject.html",
    "title": "Class Inject | Cyber Conflict Simulator",
    "keywords": "Class Inject Message containing inject and new objects that player receives due to inject. Inject is a message caused by an event happening. Inheritance System.Object CCSData MessageBase PlayerMessageBase Inject Inherited Members PlayerMessageBase.TextMessage PlayerMessageBase.ReceiverId MessageBase.Id MessageBase.Title MessageBase.Index MessageBase.DateTime MessageBase.SenderId Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class Inject : PlayerMessageBase Properties Content Declaration public IEnumerable<dynamic> Content { get; set; } Property Value IEnumerable < System.Object > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Inventory.html": {
    "href": "api/CommonInterfaces.Inventory.html",
    "title": "Class Inventory | Cyber Conflict Simulator",
    "keywords": "Class Inventory Inheritance System.Object Inventory Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class Inventory : object, IInventory, IBoundGameSubject, IGameSubject, ISerializable<InventoryData> Constructors Inventory(InventoryData) Declaration public Inventory(InventoryData data) Parameters InventoryData data Properties Content Copy of all the inventory items. Declaration public IReadOnlyList<dynamic> Content { get; } Property Value IReadOnlyList < System.Object > Count Number of items in the Inventory. Declaration public int Count { get; } Property Value System.Int32 Implements IInventory.Count RemovedObjectIds Ids of objects that have been removed since the last call to Clear() . Declaration public List<string> RemovedObjectIds { get; } Property Value List < System.String > Updated Indicator of changes in Inventory content. Declaration public bool Updated { get; } Property Value System.Boolean Implements IGameSubject.Updated UpdatedObjects Objects that have been updated since the last call to Clear() . Declaration public List<dynamic> UpdatedObjects { get; } Property Value List < System.Object > Methods Add(Object) Declaration public bool Add(dynamic entity) Parameters System.Object entity Returns System.Boolean Implements IInventory.Add(Object) Clear() Declaration public void Clear() Implements IGameSubject.Clear() Contains(String) Declaration public bool Contains(string id) Parameters System.String id Returns System.Boolean Implements IInventory.Contains(String) ContainsItemLabeled(String) Declaration public bool ContainsItemLabeled(string label) Parameters System.String label Returns System.Boolean Implements IInventory.ContainsItemLabeled(String) Export() Declaration public InventoryData Export() Returns InventoryData Implements ISerializable<T>.Export() Get(String) Retrieves an item of given Id. Declaration public dynamic Get(string id) Parameters System.String id Returns System.Object Implements IInventory.Get(String) GetItemIdsLabeled(String) Declaration public List<string> GetItemIdsLabeled(string label) Parameters System.String label Returns List < System.String > GetItemsLabeled(String) Creates a list of items with given label Declaration public List<dynamic> GetItemsLabeled(string label) Parameters System.String label Returns List < System.Object > GetSubjectDelta() Declaration public SubjectData GetSubjectDelta() Returns SubjectData Implements IBoundGameSubject.GetSubjectDelta() Remove(Object) Removes the given item. If removed successfully, also adds the item's id to RemovedObjectIds . Declaration public bool Remove(dynamic obj) Parameters System.Object obj Returns System.Boolean Implements IInventory.Remove(Object) Remove(String) Removes item of given Id. If removed successfully, also adds the Id to RemovedObjectIds . Declaration public bool Remove(string id) Parameters System.String id Returns System.Boolean Implements IInventory.Remove(String) Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ISimulatorDataManager.html": {
    "href": "api/CommonInterfaces.ISimulatorDataManager.html",
    "title": "Interface ISimulatorDataManager | Cyber Conflict Simulator",
    "keywords": "Interface ISimulatorDataManager Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public interface ISimulatorDataManager : IDisposable Properties ScenarioPath Declaration string ScenarioPath { get; } Property Value System.String Methods CopyTo(ISimulatorDataManager) Declaration void CopyTo(ISimulatorDataManager manager) Parameters ISimulatorDataManager manager LoadActions() Declaration ActionManager LoadActions() Returns ActionManager LoadActionsData() Declaration ActionManagerData LoadActionsData() Returns ActionManagerData LoadAttributes() Declaration Dictionary<string, Attribute> LoadAttributes() Returns Dictionary < System.String , Attribute > LoadClientInfo() Declaration List<ClientInfo> LoadClientInfo() Returns List < ClientInfo > LoadControls(List<Object>) Declaration ControlManager LoadControls(List<dynamic> landscapeEntities) Parameters List < System.Object > landscapeEntities Returns ControlManager LoadControlsData() Declaration ControlsData LoadControlsData() Returns ControlsData LoadExpressions() Declaration ExpressionManager LoadExpressions() Returns ExpressionManager LoadExpressionsData() Declaration ExpressionsData LoadExpressionsData() Returns ExpressionsData LoadGlobalLandscape() Declaration Landscape LoadGlobalLandscape() Returns Landscape LoadGlobalLandscapeData() Declaration LandscapeData LoadGlobalLandscapeData() Returns LandscapeData LoadLabels() Declaration List<Label> LoadLabels() Returns List < Label > LoadLedger() Declaration Ledger LoadLedger() Returns Ledger LoadLedgerData() Declaration LedgerData LoadLedgerData() Returns LedgerData LoadLogs() Declaration List<Log> LoadLogs() Returns List < Log > LoadMessenger() Declaration Messenger LoadMessenger() Returns Messenger LoadMessengerData() Declaration MessengerData LoadMessengerData() Returns MessengerData LoadMetadata() Declaration Metadata LoadMetadata() Returns Metadata LoadPlayers() Declaration List<Player> LoadPlayers() Returns List < Player > LoadPlayersData() Declaration List<PlayerData> LoadPlayersData() Returns List < PlayerData > LoadSharedObjects() Declaration Landscape LoadSharedObjects() Returns Landscape LoadSharedObjectsData() Declaration LandscapeData LoadSharedObjectsData() Returns LandscapeData SaveActions(ActionManager) Declaration void SaveActions(ActionManager actions) Parameters ActionManager actions SaveActionsData(ActionManagerData) Declaration void SaveActionsData(ActionManagerData data) Parameters ActionManagerData data SaveAttributes(Dictionary<String, Attribute>) Declaration void SaveAttributes(Dictionary<string, Attribute> data) Parameters Dictionary < System.String , Attribute > data SaveClientInfo(List<ClientInfo>) Declaration void SaveClientInfo(List<ClientInfo> clientInfo) Parameters List < ClientInfo > clientInfo SaveControls(ControlManager) Declaration void SaveControls(ControlManager controlManager) Parameters ControlManager controlManager SaveControlsData(ControlsData) Declaration void SaveControlsData(ControlsData data) Parameters ControlsData data SaveExpressions(ExpressionManager) Declaration void SaveExpressions(ExpressionManager expressionManager) Parameters ExpressionManager expressionManager SaveExpressionsData(ExpressionsData) Declaration void SaveExpressionsData(ExpressionsData expressions) Parameters ExpressionsData expressions SaveGlobalLandscape(Landscape) Declaration void SaveGlobalLandscape(Landscape landscape) Parameters Landscape landscape SaveGlobalLandscapeData(LandscapeData) Declaration void SaveGlobalLandscapeData(LandscapeData landscape) Parameters LandscapeData landscape SaveLabels(List<Label>) Declaration void SaveLabels(List<Label> data) Parameters List < Label > data SaveLedger(Ledger) Declaration void SaveLedger(Ledger ledger) Parameters Ledger ledger SaveLedgerData(LedgerData) Declaration void SaveLedgerData(LedgerData ledger) Parameters LedgerData ledger SaveLogs(List<Log>) Declaration void SaveLogs(List<Log> data) Parameters List < Log > data SaveMessenger(Messenger) Declaration void SaveMessenger(Messenger messenger) Parameters Messenger messenger SaveMessengerData(MessengerData) Declaration void SaveMessengerData(MessengerData data) Parameters MessengerData data SaveMetadata(Metadata) Declaration void SaveMetadata(Metadata metadata) Parameters Metadata metadata SavePlayers(List<Player>) Declaration void SavePlayers(List<Player> players) Parameters List < Player > players SavePlayersData(List<PlayerData>) Declaration void SavePlayersData(List<PlayerData> players) Parameters List < PlayerData > players SaveSharedObjects(Landscape) Declaration void SaveSharedObjects(Landscape sharedObjects) Parameters Landscape sharedObjects SaveSharedObjectsData(LandscapeData) Declaration void SaveSharedObjectsData(LandscapeData sharedObjects) Parameters LandscapeData sharedObjects Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.IStandaloneGameSubject.html": {
    "href": "api/CommonInterfaces.IStandaloneGameSubject.html",
    "title": "Interface IStandaloneGameSubject | Cyber Conflict Simulator",
    "keywords": "Interface IStandaloneGameSubject Defines method required by a Standalone Game subject, meaning not bound to a particular Player. Inherited Members IGameSubject.Updated IGameSubject.Clear() Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public interface IStandaloneGameSubject : IGameSubject Methods GetPlayerMappedSubjectDelta() Returns a dictionary mapping Id s to objects of type T inteded to be passed to a Game event. Declaration Dictionary<string, SubjectData> GetPlayerMappedSubjectDelta() Returns Dictionary < System.String , SubjectData > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Landscape.html": {
    "href": "api/CommonInterfaces.Landscape.html",
    "title": "Class Landscape | Cyber Conflict Simulator",
    "keywords": "Class Landscape Class implementes ILandscape interface Loads and maintains CL objects Landscape oobject is part of the application and/or player object Inheritance System.Object Landscape Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class Landscape : object, ILandscape, IBoundGameSubject, IGameSubject, ISerializable<LandscapeData> Constructors Landscape(LandscapeData) Declaration public Landscape(LandscapeData data) Parameters LandscapeData data Properties AccessGraph Access graph, keeping track of object access relations (login, exploit, malware, physical etc.). Declaration public AccessGraph AccessGraph { get; } Property Value AccessGraph Id Declaration public Guid Id { get; } Property Value Guid Objects Declaration public List<dynamic> Objects { get; } Property Value List < System.Object > RemovedObjectIds Declaration public List<string> RemovedObjectIds { get; } Property Value List < System.String > Updated Declaration public bool Updated { get; } Property Value System.Boolean Implements IGameSubject.Updated UpdatedObjects Declaration public List<dynamic> UpdatedObjects { get; } Property Value List < System.Object > Methods AddList(IEnumerable) Declaration public bool AddList(IEnumerable entity) Parameters IEnumerable entity Returns System.Boolean AddOrUpdate(Object, Boolean) Adds or updates given object into the landscape, notifiying object listeners if the object is being updated Declaration public bool AddOrUpdate(dynamic entity, bool genericName = false) Parameters System.Object entity System.Boolean genericName Returns System.Boolean Implements ILandscape.AddOrUpdate(Object, Boolean) AddToListAttribute(String, String, Object) Declaration public bool AddToListAttribute(string entityId, string attributeName, object value) Parameters System.String entityId System.String attributeName System.Object value Returns System.Boolean Implements ILandscape.AddToListAttribute(String, String, Object) Clear() Declaration public void Clear() Implements IGameSubject.Clear() Contains(String) Declaration public bool Contains(string entityId) Parameters System.String entityId Returns System.Boolean Implements ILandscape.Contains(String) Export() Declaration public LandscapeData Export() Returns LandscapeData Implements ISerializable<T>.Export() GetObject(String) Declaration public dynamic GetObject(string entityId) Parameters System.String entityId Returns System.Object Implements ILandscape.GetObject(String) GetObjectName(String) Declaration public string GetObjectName(string entityId) Parameters System.String entityId Returns System.String Implements ILandscape.GetObjectName(String) GetObjectsWhere(Func<Object, Boolean>) Declaration public List<dynamic> GetObjectsWhere(Func<dynamic, bool> predicate) Parameters Func < System.Object , System.Boolean > predicate Returns List < System.Object > GetObjectsWithAttributeValue(IEnumerable<(String attributeName, Object value)>) Declaration public List<dynamic> GetObjectsWithAttributeValue(IEnumerable<(string attributeName, dynamic value)> attributeValuePairs) Parameters IEnumerable < System.ValueTuple < System.String , System.Object >> attributeValuePairs Returns List < System.Object > GetObjectsWithAttributeValue(String, Object) Declaration public List<dynamic> GetObjectsWithAttributeValue(string attributeName, dynamic value) Parameters System.String attributeName System.Object value Returns List < System.Object > GetObjectsWithLabel(String) Declaration public List<dynamic> GetObjectsWithLabel(string label) Parameters System.String label Returns List < System.Object > GetObjectUnsafe(String) Declaration public dynamic GetObjectUnsafe(string entityId) Parameters System.String entityId Returns System.Object GetSubjectDelta() Declaration public SubjectData GetSubjectDelta() Returns SubjectData Implements IBoundGameSubject.GetSubjectDelta() Remove(Object) Declaration public bool Remove(dynamic entity) Parameters System.Object entity Returns System.Boolean Implements ILandscape.Remove(Object) Remove(String) Removes an object from Objects . Also, sets the Updated flag. Declaration public bool Remove(string entityId) Parameters System.String entityId Returns System.Boolean Implements ILandscape.Remove(String) RemoveAll(Predicate<Object>) Declaration public int RemoveAll(Predicate<dynamic> predicate) Parameters Predicate < System.Object > predicate Returns System.Int32 RemoveFromListAttribute(String, String, Predicate<Object>) Remove all elements from list that satisfy given condition Declaration public bool RemoveFromListAttribute(string entityId, string attributeName, Predicate<dynamic> condition) Parameters System.String entityId System.String attributeName Predicate < System.Object > condition Returns System.Boolean RemoveFromListAttribute(String, String, String) Declaration public bool RemoveFromListAttribute(string entityId, string attributeName, string value) Parameters System.String entityId System.String attributeName System.String value Returns System.Boolean Implements ILandscape.RemoveFromListAttribute(String, String, String) SetValueAttribute(String, String, Object) Declaration public bool SetValueAttribute(string entityId, string attributeName, object value) Parameters System.String entityId System.String attributeName System.Object value Returns System.Boolean Implements ILandscape.SetValueAttribute(String, String, Object) SetValueAttribute(String, String, Object, Object[]) Declaration public bool SetValueAttribute(string entityId, string attributeName, object value, params object[] operations) Parameters System.String entityId System.String attributeName System.Object value System.Object [] operations Returns System.Boolean Implements ILandscape.SetValueAttribute(String, String, Object, Object[]) UpdateViaExpression(String, Func<Object, Boolean>) Add or update given object to landscape and notify object listeners via expression Declaration public bool UpdateViaExpression(string entityId, Func<dynamic, bool> funcToDo) Parameters System.String entityId Func < System.Object , System.Boolean > funcToDo Returns System.Boolean Events ObjectUpdatedEvent Declaration public event ILandscape.UpdateHandler ObjectUpdatedEvent Event Type ILandscape.UpdateHandler Implements ILandscape.ObjectUpdatedEvent Explicit Interface Implementations ILandscape.AccessGraph Declaration IAccessGraph ILandscape.AccessGraph { get; } Returns IAccessGraph Implements ILandscape.AccessGraph Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.LandscapeStateDelta.html": {
    "href": "api/CommonInterfaces.LandscapeStateDelta.html",
    "title": "Class LandscapeStateDelta | Cyber Conflict Simulator",
    "keywords": "Class LandscapeStateDelta Contains state delta information of a Landscape or an Inventory . Inheritance System.Object SubjectData LandscapeStateDelta Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class LandscapeStateDelta : SubjectData Properties RemovedObjectIds Declaration public List<string> RemovedObjectIds { get; set; } Property Value List < System.String > UpdatedObjects Declaration public List<dynamic> UpdatedObjects { get; set; } Property Value List < System.Object > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Ledger.html": {
    "href": "api/CommonInterfaces.Ledger.html",
    "title": "Class Ledger | Cyber Conflict Simulator",
    "keywords": "Class Ledger Inheritance System.Object Ledger Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class Ledger : object, ILedger, IStandaloneGameSubject, IGameSubject, ISerializable<LedgerData> Constructors Ledger(LedgerData) Declaration public Ledger(LedgerData data) Parameters LedgerData data Properties ContinuousRecords Declaration public IReadOnlyList<ContinuousLedgerRecord> ContinuousRecords { get; } Property Value IReadOnlyList < ContinuousLedgerRecord > DiscreteRecords Declaration public IReadOnlyList<DiscreteLedgerRecord> DiscreteRecords { get; } Property Value IReadOnlyList < DiscreteLedgerRecord > Updated Declaration public bool Updated { get; } Property Value System.Boolean Implements IGameSubject.Updated Methods AddContinuousRecord(ContinuousLedgerRecord) Declaration public void AddContinuousRecord(ContinuousLedgerRecord record) Parameters ContinuousLedgerRecord record AddDiscreteRecord(DiscreteLedgerRecord) Declaration public void AddDiscreteRecord(DiscreteLedgerRecord record) Parameters DiscreteLedgerRecord record Clear() Declaration public void Clear() Implements IGameSubject.Clear() CreateContinuousRecord(String, String, Boolean, String) Declaration public static ContinuousLedgerRecord CreateContinuousRecord(string name, string playerId, bool isKnown, string displayType) Parameters System.String name System.String playerId System.Boolean isKnown System.String displayType Returns ContinuousLedgerRecord CreateDiscreteRecord(String, String, String, String, String, Double, String, Boolean, Nullable<Guid>) Declaration public static DiscreteLedgerRecord CreateDiscreteRecord(string name, string playerId, string actorId, string organizationId, string objectId, double value, string unitOfMeasure, bool visibleToPlayer = true, Guid? id = null) Parameters System.String name System.String playerId System.String actorId System.String organizationId System.String objectId System.Double value System.String unitOfMeasure System.Boolean visibleToPlayer System.Nullable < Guid > id Returns DiscreteLedgerRecord CreateIndicatorRecord(Indicator) Declaration public static ContinuousLedgerRecord CreateIndicatorRecord(Indicator indicator) Parameters Indicator indicator Returns ContinuousLedgerRecord Export() Declaration public LedgerData Export() Returns LedgerData Implements ISerializable<T>.Export() GetContinuousRecord(Guid) Declaration public ContinuousLedgerRecord GetContinuousRecord(Guid recordId) Parameters Guid recordId Returns ContinuousLedgerRecord GetDiscreteRecord(Guid) Declaration public DiscreteLedgerRecord GetDiscreteRecord(Guid recordId) Parameters Guid recordId Returns DiscreteLedgerRecord GetDiscreteRecordsLoss(IPlayer) Declaration public double GetDiscreteRecordsLoss(IPlayer player) Parameters IPlayer player Returns System.Double Implements ILedger.GetDiscreteRecordsLoss(IPlayer) GetPlayerMappedSubjectDelta() Declaration public Dictionary<string, SubjectData> GetPlayerMappedSubjectDelta() Returns Dictionary < System.String , SubjectData > Implements IStandaloneGameSubject.GetPlayerMappedSubjectDelta() RecordToLedger(String, Object, String, String, String, Double, String) Declaration public bool RecordToLedger(string playerId, dynamic actor, string objectId, string organizationId, string eventDescription, double lossAmount, string unitOfMeasure = \"dollars\") Parameters System.String playerId System.Object actor System.String objectId System.String organizationId System.String eventDescription System.Double lossAmount System.String unitOfMeasure Returns System.Boolean Implements ILedger.RecordToLedger(String, Object, String, String, String, Double, String) UpdateContinuousRecord(Guid, (Double time, Double value), Boolean) Declaration public void UpdateContinuousRecord(Guid recordId, (double time, double value) data, bool isKnown = false) Parameters Guid recordId System.ValueTuple < System.Double , System.Double > data System.Boolean isKnown Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.LogRecord.ActionCombinationLogRecord.html": {
    "href": "api/CommonInterfaces.LogRecord.ActionCombinationLogRecord.html",
    "title": "Class ActionCombinationLogRecord | Cyber Conflict Simulator",
    "keywords": "Class ActionCombinationLogRecord Inheritance System.Object ActionCombinationLogRecord Namespace : CommonInterfaces.LogRecord Assembly : CommonInterfaces.dll Syntax public class ActionCombinationLogRecord : object Properties ActionName Declaration public string ActionName { get; set; } Property Value System.String Combinations List of log records for every combination Declaration public List<EvalCombinationLogRecord> Combinations { get; set; } Property Value List < EvalCombinationLogRecord > Conditions Dictionary of conditions defined in action config Declaration public Dictionary<string, string> Conditions { get; set; } Property Value Dictionary < System.String , System.String > Parameters Parameters defined in parameter action config Declaration public List<ParameterConfig> Parameters { get; set; } Property Value List < ParameterConfig > Player Declaration public string Player { get; set; } Property Value System.String PlayerParameters For every parameter for action, e.g. player, actor, machine, ..., there is a list of possible objects that satisfy preconditions. Declaration public List<List<Parameter>> PlayerParameters { get; set; } Property Value List < List < Parameter >> Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.LogRecord.EvalCombinationLogRecord.html": {
    "href": "api/CommonInterfaces.LogRecord.EvalCombinationLogRecord.html",
    "title": "Class EvalCombinationLogRecord | Cyber Conflict Simulator",
    "keywords": "Class EvalCombinationLogRecord Inheritance System.Object EvalCombinationLogRecord Namespace : CommonInterfaces.LogRecord Assembly : CommonInterfaces.dll Syntax public class EvalCombinationLogRecord : object Properties Combination Concrete combination of parameters Declaration public List<Parameter> Combination { get; set; } Property Value List < Parameter > EvaluatedDict Dictionary containing evaluated conditions for combination Declaration public Dictionary<string, object> EvaluatedDict { get; set; } Property Value Dictionary < System.String , System.Object > Pass Is combination valid Declaration public bool Pass { get; set; } Property Value System.Boolean Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.LogRecord.html": {
    "href": "api/CommonInterfaces.LogRecord.html",
    "title": "Namespace CommonInterfaces.LogRecord | Cyber Conflict Simulator",
    "keywords": "Namespace CommonInterfaces.LogRecord Classes ActionCombinationLogRecord EvalCombinationLogRecord"
  },
  "api/CommonInterfaces.MessageSession.html": {
    "href": "api/CommonInterfaces.MessageSession.html",
    "title": "Class MessageSession | Cyber Conflict Simulator",
    "keywords": "Class MessageSession A class containing all messages in one conversation. Inheritance System.Object MessageSession Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class MessageSession : object, ISerializable<MessageSessionData> Constructors MessageSession(SessionType, String) Declaration public MessageSession(SessionType type, string id = null) Parameters SessionType type System.String id Properties Id Declaration public string Id { get; set; } Property Value System.String Messages Declaration public List<MessageBase> Messages { get; set; } Property Value List < MessageBase > Participants Declaration public List<string> Participants { get; set; } Property Value List < System.String > Type Declaration public SessionType Type { get; set; } Property Value SessionType Methods AddMessage(MessageBase) Declaration public int AddMessage(MessageBase msg) Parameters MessageBase msg Returns System.Int32 Export() Declaration public MessageSessionData Export() Returns MessageSessionData Implements ISerializable<T>.Export() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Messenger.html": {
    "href": "api/CommonInterfaces.Messenger.html",
    "title": "Class Messenger | Cyber Conflict Simulator",
    "keywords": "Class Messenger General class for sending all types of messages. Inheritance System.Object Messenger Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class Messenger : object, IMessenger, IStandaloneGameSubject, IGameSubject, ISerializable<MessengerData> Constructors Messenger(MessengerData) Declaration public Messenger(MessengerData data) Parameters MessengerData data Properties Gamemaster Declaration public string Gamemaster { get; } Property Value System.String OpenedSessions Declaration public ConcurrentDictionary<string, MessageSession> OpenedSessions { get; set; } Property Value ConcurrentDictionary < System.String , MessageSession > SessionsOfType Declaration public ConcurrentDictionary<SessionType, List<MessageSession>> SessionsOfType { get; set; } Property Value ConcurrentDictionary < SessionType , List < MessageSession >> Updated Declaration public bool Updated { get; } Property Value System.Boolean Implements IGameSubject.Updated Methods Clear() Declaration public void Clear() Implements IGameSubject.Clear() Export() Declaration public MessengerData Export() Returns MessengerData Implements ISerializable<T>.Export() GetAllSessions() Declaration public List<MessageSession> GetAllSessions() Returns List < MessageSession > GetPlayerMappedSubjectDelta() Declaration public Dictionary<string, SubjectData> GetPlayerMappedSubjectDelta() Returns Dictionary < System.String , SubjectData > Implements IStandaloneGameSubject.GetPlayerMappedSubjectDelta() GetPlayersForObject(String) Declaration public static List<string> GetPlayersForObject(string objectId) Parameters System.String objectId Returns List < System.String > GetResponse(String) Declaration public IResponse GetResponse(string requestSessionId) Parameters System.String requestSessionId Returns IResponse Implements IMessenger.GetResponse(String) GetSession(String) Declaration public MessageSession GetSession(string sessionId) Parameters System.String sessionId Returns MessageSession IsSessionRelevantForPlayer(MessageSession, String) Declaration public static bool IsSessionRelevantForPlayer(MessageSession sess, string playerId) Parameters MessageSession sess System.String playerId Returns System.Boolean SendActionLog(Log) Declaration public void SendActionLog(Log log) Parameters Log log Implements IMessenger.SendActionLog(Log) SendAlert(Log) Declaration public void SendAlert(Log log) Parameters Log log Implements IMessenger.SendAlert(Log) SendHint(String, String, IEnumerable<Object>) Declaration public void SendHint(string message, string recieverId, IEnumerable<dynamic> content = null) Parameters System.String message System.String recieverId IEnumerable < System.Object > content SendInject(String, String, String, IEnumerable<Object>) Declaration public void SendInject(string message, string senderId, string recieverId, IEnumerable<dynamic> content = null) Parameters System.String message System.String senderId System.String recieverId IEnumerable < System.Object > content SendOffer(String, String, String, String) Declaration public string SendOffer(string message, string title, string senderId, string receiverId) Parameters System.String message System.String title System.String senderId System.String receiverId Returns System.String SendRequest(DynamicDictionary, Int32, String, String, String, String, String) Declaration public string SendRequest(DynamicDictionary conditions, int number, string message, string title, string senderId, string senderObject, string receiverObject) Parameters DynamicDictionary conditions System.Int32 number System.String message System.String title System.String senderId System.String senderObject System.String receiverObject Returns System.String SendResponse(String, Object, String, String, String, String, String) Declaration public void SendResponse(string answer, dynamic content, string message, string title, string senderId, string senderObject, string sessionId) Parameters System.String answer System.Object content System.String message System.String title System.String senderId System.String senderObject System.String sessionId SendTextMessage(String, String, String, String, String, IEnumerable<String>) Declaration public void SendTextMessage(string message, string title, string fileName, string senderId, string senderObject, IEnumerable<string> receiverObjects) Parameters System.String message System.String title System.String fileName System.String senderId System.String senderObject IEnumerable < System.String > receiverObjects SendTextMessage(String, String, String, String, String, String) Declaration public void SendTextMessage(string message, string title, string fileName, string senderId, string senderObject, string sessionId) Parameters System.String message System.String title System.String fileName System.String senderId System.String senderObject System.String sessionId Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Metadata.html": {
    "href": "api/CommonInterfaces.Metadata.html",
    "title": "Class Metadata | Cyber Conflict Simulator",
    "keywords": "Class Metadata Inheritance System.Object CCSData Metadata Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class Metadata : CCSData Properties DateTime Declaration public DateTime DateTime { get; set; } Property Value DateTime Description Declaration public string Description { get; set; } Property Value System.String Note Declaration public string Note { get; set; } Property Value System.String Protocols Declaration public List<string> Protocols { get; set; } Property Value List < System.String > Scenario Declaration public string Scenario { get; set; } Property Value System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.ActionManagerData.html": {
    "href": "api/CommonInterfaces.ModelData.ActionManagerData.html",
    "title": "Class ActionManagerData | Cyber Conflict Simulator",
    "keywords": "Class ActionManagerData Inheritance System.Object CCSData ActionManagerData Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class ActionManagerData : CCSData Properties ActionsHistory Declaration public List<ActionBase> ActionsHistory { get; set; } Property Value List < ActionBase > ActionsInProgress Declaration public List<ActionBase> ActionsInProgress { get; set; } Property Value List < ActionBase > ActionsToDo Declaration public List<ActionToDo> ActionsToDo { get; set; } Property Value List < ActionToDo > NewActions Declaration public List<ActionToDo> NewActions { get; set; } Property Value List < ActionToDo > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.AttributeExpressionData.html": {
    "href": "api/CommonInterfaces.ModelData.AttributeExpressionData.html",
    "title": "Class AttributeExpressionData | Cyber Conflict Simulator",
    "keywords": "Class AttributeExpressionData Inheritance System.Object CCSData ExpressionPrecondition AttributeExpressionData Inherited Members ExpressionPrecondition.Name ExpressionPrecondition.ConditionComponents ExpressionPrecondition.ConditionFormula Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class AttributeExpressionData : ExpressionPrecondition Properties AttributeName Declaration public string AttributeName { get; set; } Property Value System.String AttributeType Declaration public string AttributeType { get; set; } Property Value System.String DefaultValue Declaration public string DefaultValue { get; set; } Property Value System.String ExpressionComponents Declaration public List<Formula> ExpressionComponents { get; set; } Property Value List < Formula > ExpressionFormula Declaration public string ExpressionFormula { get; set; } Property Value System.String ResidingObjectId Declaration public string ResidingObjectId { get; set; } Property Value System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.CCSData.html": {
    "href": "api/CommonInterfaces.ModelData.CCSData.html",
    "title": "Class CCSData | Cyber Conflict Simulator",
    "keywords": "Class CCSData Abstract class denoting that class is a data class. Every class which inherits this class MUST implement empty constructor. Inheritance System.Object CCSData ActionLocalization Metadata ActionManagerData DataGraph ExpressionPrecondition ExpressionsData Formula InventoryData LandscapeData LedgerData LedgerRecord MessageBase MessageSessionData MessengerData PlayerData UiConfig Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public abstract class CCSData : object Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.ClientInfo.html": {
    "href": "api/CommonInterfaces.ModelData.ClientInfo.html",
    "title": "Class ClientInfo | Cyber Conflict Simulator",
    "keywords": "Class ClientInfo Inheritance System.Object CCSData UiConfig ClientInfo Inherited Members UiConfig.PlayerId UiConfig.Objects Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class ClientInfo : UiConfig Properties Password Declaration public string Password { get; set; } Property Value System.String Username Declaration public string Username { get; set; } Property Value System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.ContinuousLedgerRecord.html": {
    "href": "api/CommonInterfaces.ModelData.ContinuousLedgerRecord.html",
    "title": "Class ContinuousLedgerRecord | Cyber Conflict Simulator",
    "keywords": "Class ContinuousLedgerRecord Inheritance System.Object CCSData LedgerRecord ContinuousLedgerRecord Inherited Members LedgerRecord.Id LedgerRecord.Name LedgerRecord.PlayerId LedgerRecord.OrganizationId LedgerRecord.ObjectId LedgerRecord.DateTime LedgerRecord.Value LedgerRecord.UnitOfMeasure LedgerRecord.Equals(Object) LedgerRecord.GetHashCode() Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class ContinuousLedgerRecord : LedgerRecord Constructors ContinuousLedgerRecord() Declaration public ContinuousLedgerRecord() Properties DisplayType Declaration public string DisplayType { get; set; } Property Value System.String History Declaration public DataGraph History { get; set; } Property Value DataGraph IsKnown Declaration public bool IsKnown { get; set; } Property Value System.Boolean Methods CopyWithoutHistory() Declaration public ContinuousLedgerRecord CopyWithoutHistory() Returns ContinuousLedgerRecord Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.ControlsData.html": {
    "href": "api/CommonInterfaces.ModelData.ControlsData.html",
    "title": "Class ControlsData | Cyber Conflict Simulator",
    "keywords": "Class ControlsData Contains a collection of ControlBase -deriving classes. Inheritance System.Object ControlsData Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class ControlsData : object Constructors ControlsData() Declaration public ControlsData() Properties Controls Declaration public List<ControlBase> Controls { get; set; } Property Value List < ControlBase > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.DataGraph.html": {
    "href": "api/CommonInterfaces.ModelData.DataGraph.html",
    "title": "Class DataGraph | Cyber Conflict Simulator",
    "keywords": "Class DataGraph Inheritance System.Object CCSData DataGraph Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class DataGraph : CCSData Constructors DataGraph() Declaration public DataGraph() Properties Data Declaration public List<double> Data { get; set; } Property Value List < System.Double > Time Declaration public List<double> Time { get; set; } Property Value List < System.Double > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.DiscreteLedgerRecord.html": {
    "href": "api/CommonInterfaces.ModelData.DiscreteLedgerRecord.html",
    "title": "Class DiscreteLedgerRecord | Cyber Conflict Simulator",
    "keywords": "Class DiscreteLedgerRecord Inheritance System.Object CCSData LedgerRecord DiscreteLedgerRecord Inherited Members LedgerRecord.Id LedgerRecord.Name LedgerRecord.PlayerId LedgerRecord.OrganizationId LedgerRecord.ObjectId LedgerRecord.DateTime LedgerRecord.Value LedgerRecord.UnitOfMeasure LedgerRecord.Equals(Object) LedgerRecord.GetHashCode() Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class DiscreteLedgerRecord : LedgerRecord Properties ActorId Declaration public string ActorId { get; set; } Property Value System.String EventDescription Declaration public string EventDescription { get; set; } Property Value System.String VisibleToPlayer Declaration public bool VisibleToPlayer { get; set; } Property Value System.Boolean Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.ExpressionPrecondition.html": {
    "href": "api/CommonInterfaces.ModelData.ExpressionPrecondition.html",
    "title": "Class ExpressionPrecondition | Cyber Conflict Simulator",
    "keywords": "Class ExpressionPrecondition Inheritance System.Object CCSData ExpressionPrecondition AttributeExpressionData IndicatorData TriggerExpressionData Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class ExpressionPrecondition : CCSData Properties ConditionComponents Declaration public List<Formula> ConditionComponents { get; set; } Property Value List < Formula > ConditionFormula Declaration public string ConditionFormula { get; set; } Property Value System.String Name Declaration public string Name { get; set; } Property Value System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.ExpressionsData.html": {
    "href": "api/CommonInterfaces.ModelData.ExpressionsData.html",
    "title": "Class ExpressionsData | Cyber Conflict Simulator",
    "keywords": "Class ExpressionsData Data model for deserializing a scenario's Expression JSON configuration files. Inheritance System.Object CCSData ExpressionsData Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class ExpressionsData : CCSData Constructors ExpressionsData() Returns a new instance of ExpressionsData with all properties initialized to their default values. Declaration public ExpressionsData() Properties AttributeExpressions Dictionary mapping an objectId (on the global landscape) to an AttributeExpressionData collection defining the AttributeExpression s residing on the object. Declaration public List<AttributeExpressionData> AttributeExpressions { get; set; } Property Value List < AttributeExpressionData > Indicators Collection of user defined indicators used for display and filter data Declaration public List<IndicatorData> Indicators { get; set; } Property Value List < IndicatorData > TriggerExpressions Collection defining the TriggerExpression s dependant on the global landscape. Declaration public List<TriggerExpressionData> TriggerExpressions { get; set; } Property Value List < TriggerExpressionData > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.Formula.html": {
    "href": "api/CommonInterfaces.ModelData.Formula.html",
    "title": "Class Formula | Cyber Conflict Simulator",
    "keywords": "Class Formula Inheritance System.Object CCSData Formula Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class Formula : CCSData Properties Expression Declaration public string Expression { get; set; } Property Value System.String Name Declaration public string Name { get; set; } Property Value System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.html": {
    "href": "api/CommonInterfaces.ModelData.html",
    "title": "Namespace CommonInterfaces.ModelData | Cyber Conflict Simulator",
    "keywords": "Namespace CommonInterfaces.ModelData Classes ActionManagerData AttributeExpressionData CCSData Abstract class denoting that class is a data class. Every class which inherits this class MUST implement empty constructor. ClientInfo ContinuousLedgerRecord ControlsData Contains a collection of ControlBase -deriving classes. DataGraph DiscreteLedgerRecord ExpressionPrecondition ExpressionsData Data model for deserializing a scenario's Expression JSON configuration files. Formula IndicatorData InventoryData LandscapeData LandscapeMessageBase Base message class for communication between landscape entities (actor, organization, ...). LedgerData LedgerRecord MessageBase Base message class for communication between non-landscape entities (player, gamemaster, action, control). MessageSessionData MessengerData PlayerData PlayerMessageBase Base message class for communication between non-landscape entities (player, gamemaster, action, control). Position TriggerExpressionData UiConfig"
  },
  "api/CommonInterfaces.ModelData.IndicatorData.html": {
    "href": "api/CommonInterfaces.ModelData.IndicatorData.html",
    "title": "Class IndicatorData | Cyber Conflict Simulator",
    "keywords": "Class IndicatorData Inheritance System.Object CCSData ExpressionPrecondition IndicatorData Inherited Members ExpressionPrecondition.Name ExpressionPrecondition.ConditionComponents ExpressionPrecondition.ConditionFormula Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class IndicatorData : ExpressionPrecondition Properties DisplayType Declaration public string DisplayType { get; set; } Property Value System.String IsKnown Declaration public bool IsKnown { get; set; } Property Value System.Boolean OrganizationId Declaration public string OrganizationId { get; set; } Property Value System.String OrganizationName Declaration public string OrganizationName { get; set; } Property Value System.String Ranges Declaration public List<DynamicDictionary> Ranges { get; set; } Property Value List < DynamicDictionary > RecordId Declaration public Guid RecordId { get; set; } Property Value Guid ValueExpression Declaration public string ValueExpression { get; set; } Property Value System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.InventoryData.html": {
    "href": "api/CommonInterfaces.ModelData.InventoryData.html",
    "title": "Class InventoryData | Cyber Conflict Simulator",
    "keywords": "Class InventoryData Inheritance System.Object CCSData InventoryData Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class InventoryData : CCSData Constructors InventoryData() Declaration public InventoryData() Properties Content Declaration public List<dynamic> Content { get; set; } Property Value List < System.Object > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.LandscapeData.html": {
    "href": "api/CommonInterfaces.ModelData.LandscapeData.html",
    "title": "Class LandscapeData | Cyber Conflict Simulator",
    "keywords": "Class LandscapeData Inheritance System.Object CCSData LandscapeData Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class LandscapeData : CCSData Constructors LandscapeData() Declaration public LandscapeData() Properties Objects Declaration public List<dynamic> Objects { get; set; } Property Value List < System.Object > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.LandscapeMessageBase.html": {
    "href": "api/CommonInterfaces.ModelData.LandscapeMessageBase.html",
    "title": "Class LandscapeMessageBase | Cyber Conflict Simulator",
    "keywords": "Class LandscapeMessageBase Base message class for communication between landscape entities (actor, organization, ...). Inheritance System.Object CCSData MessageBase LandscapeMessageBase Request Response TextMessage Inherited Members MessageBase.Id MessageBase.Title MessageBase.Index MessageBase.DateTime MessageBase.SenderId Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class LandscapeMessageBase : MessageBase Properties ReceiverObject Declaration public string ReceiverObject { get; set; } Property Value System.String SenderObject Declaration public string SenderObject { get; set; } Property Value System.String TextMessage Declaration public string TextMessage { get; set; } Property Value System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.LedgerData.html": {
    "href": "api/CommonInterfaces.ModelData.LedgerData.html",
    "title": "Class LedgerData | Cyber Conflict Simulator",
    "keywords": "Class LedgerData Inheritance System.Object CCSData LedgerData Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class LedgerData : CCSData Properties ContinuousRecords Declaration public List<ContinuousLedgerRecord> ContinuousRecords { get; set; } Property Value List < ContinuousLedgerRecord > DiscreteRecords Declaration public List<DiscreteLedgerRecord> DiscreteRecords { get; set; } Property Value List < DiscreteLedgerRecord > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.LedgerRecord.html": {
    "href": "api/CommonInterfaces.ModelData.LedgerRecord.html",
    "title": "Class LedgerRecord | Cyber Conflict Simulator",
    "keywords": "Class LedgerRecord Inheritance System.Object CCSData LedgerRecord ContinuousLedgerRecord DiscreteLedgerRecord Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class LedgerRecord : CCSData Properties DateTime Declaration public double DateTime { get; set; } Property Value System.Double Id Declaration public Guid Id { get; set; } Property Value Guid Name Declaration public string Name { get; set; } Property Value System.String ObjectId Declaration public string ObjectId { get; set; } Property Value System.String OrganizationId Declaration public string OrganizationId { get; set; } Property Value System.String PlayerId Declaration public string PlayerId { get; set; } Property Value System.String UnitOfMeasure Declaration public string UnitOfMeasure { get; set; } Property Value System.String Value Declaration public double Value { get; set; } Property Value System.Double Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters System.Object obj Returns System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns System.Int32 Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.MessageBase.html": {
    "href": "api/CommonInterfaces.ModelData.MessageBase.html",
    "title": "Class MessageBase | Cyber Conflict Simulator",
    "keywords": "Class MessageBase Base message class for communication between non-landscape entities (player, gamemaster, action, control). Inheritance System.Object CCSData MessageBase LandscapeMessageBase PlayerMessageBase Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class MessageBase : CCSData Properties DateTime Declaration public DateTime DateTime { get; set; } Property Value DateTime Id Declaration public string Id { get; set; } Property Value System.String Index Declaration public int Index { get; set; } Property Value System.Int32 SenderId Declaration public string SenderId { get; set; } Property Value System.String Title Declaration public string Title { get; set; } Property Value System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.MessageSessionData.html": {
    "href": "api/CommonInterfaces.ModelData.MessageSessionData.html",
    "title": "Class MessageSessionData | Cyber Conflict Simulator",
    "keywords": "Class MessageSessionData Inheritance System.Object CCSData MessageSessionData Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class MessageSessionData : CCSData Properties Id Declaration public string Id { get; set; } Property Value System.String Messages Declaration public List<MessageBase> Messages { get; set; } Property Value List < MessageBase > Participants Declaration public List<string> Participants { get; set; } Property Value List < System.String > Type Declaration public SessionType Type { get; set; } Property Value SessionType Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.MessengerData.html": {
    "href": "api/CommonInterfaces.ModelData.MessengerData.html",
    "title": "Class MessengerData | Cyber Conflict Simulator",
    "keywords": "Class MessengerData Inheritance System.Object CCSData MessengerData Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class MessengerData : CCSData Properties Sessions Declaration public List<MessageSessionData> Sessions { get; set; } Property Value List < MessageSessionData > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.PlayerData.html": {
    "href": "api/CommonInterfaces.ModelData.PlayerData.html",
    "title": "Class PlayerData | Cyber Conflict Simulator",
    "keywords": "Class PlayerData Inheritance System.Object CCSData PlayerData Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class PlayerData : CCSData Constructors PlayerData() Declaration public PlayerData() Properties Actors Declaration public List<string> Actors { get; set; } Property Value List < System.String > Id Declaration public string Id { get; set; } Property Value System.String Inventory Declaration public InventoryData Inventory { get; set; } Property Value InventoryData Landscape Declaration public LandscapeData Landscape { get; set; } Property Value LandscapeData Name Declaration public string Name { get; set; } Property Value System.String Organizations Declaration public List<string> Organizations { get; set; } Property Value List < System.String > Side Declaration public string Side { get; set; } Property Value System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.PlayerMessageBase.html": {
    "href": "api/CommonInterfaces.ModelData.PlayerMessageBase.html",
    "title": "Class PlayerMessageBase | Cyber Conflict Simulator",
    "keywords": "Class PlayerMessageBase Base message class for communication between non-landscape entities (player, gamemaster, action, control). Inheritance System.Object CCSData MessageBase PlayerMessageBase ActionLog Alert Hint Inject Offer Inherited Members MessageBase.Id MessageBase.Title MessageBase.Index MessageBase.DateTime MessageBase.SenderId Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class PlayerMessageBase : MessageBase Properties ReceiverId Declaration public string ReceiverId { get; set; } Property Value System.String TextMessage Declaration public string TextMessage { get; set; } Property Value System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.Position.html": {
    "href": "api/CommonInterfaces.ModelData.Position.html",
    "title": "Class Position | Cyber Conflict Simulator",
    "keywords": "Class Position Inheritance System.Object Position Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class Position : object Properties IconPath Declaration public string IconPath { get; set; } Property Value System.String X Declaration public decimal X { get; set; } Property Value System.Decimal Y Declaration public decimal Y { get; set; } Property Value System.Decimal Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.TriggerExpressionData.html": {
    "href": "api/CommonInterfaces.ModelData.TriggerExpressionData.html",
    "title": "Class TriggerExpressionData | Cyber Conflict Simulator",
    "keywords": "Class TriggerExpressionData Inheritance System.Object CCSData ExpressionPrecondition TriggerExpressionData Inherited Members ExpressionPrecondition.Name ExpressionPrecondition.ConditionComponents ExpressionPrecondition.ConditionFormula Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class TriggerExpressionData : ExpressionPrecondition Properties Charges Declaration public int Charges { get; set; } Property Value System.Int32 ExpressionComponents Declaration public List<Formula> ExpressionComponents { get; set; } Property Value List < Formula > ExpressionFormula Declaration public string ExpressionFormula { get; set; } Property Value System.String TriggerOnRisingEdge Declaration public bool TriggerOnRisingEdge { get; set; } Property Value System.Boolean Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ModelData.UiConfig.html": {
    "href": "api/CommonInterfaces.ModelData.UiConfig.html",
    "title": "Class UiConfig | Cyber Conflict Simulator",
    "keywords": "Class UiConfig Inheritance System.Object CCSData UiConfig ClientInfo Namespace : CommonInterfaces.ModelData Assembly : CommonInterfaces.dll Syntax public class UiConfig : CCSData Properties Objects Declaration public Dictionary<string, Position> Objects { get; set; } Property Value Dictionary < System.String , Position > PlayerId Declaration public string PlayerId { get; set; } Property Value System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.NewMessage.html": {
    "href": "api/CommonInterfaces.NewMessage.html",
    "title": "Class NewMessage | Cyber Conflict Simulator",
    "keywords": "Class NewMessage Class containing neccessary properties for processing new messages. Inheritance System.Object NewMessage Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class NewMessage : object Properties Message Declaration public MessageBase Message { get; set; } Property Value MessageBase SessionId Declaration public string SessionId { get; set; } Property Value System.String Type Declaration public SessionType Type { get; set; } Property Value SessionType Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.NewMessages.html": {
    "href": "api/CommonInterfaces.NewMessages.html",
    "title": "Class NewMessages | Cyber Conflict Simulator",
    "keywords": "Class NewMessages Contains a list of new messages. Inheritance System.Object SubjectData NewMessages Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class NewMessages : SubjectData Properties Messages Declaration public List<NewMessage> Messages { get; set; } Property Value List < NewMessage > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.NewRecords.html": {
    "href": "api/CommonInterfaces.NewRecords.html",
    "title": "Class NewRecords | Cyber Conflict Simulator",
    "keywords": "Class NewRecords Contains ledger records that have been added or updated. Inheritance System.Object SubjectData NewRecords Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class NewRecords : SubjectData Constructors NewRecords() Declaration public NewRecords() Properties Records Declaration public List<ContinuousLedgerRecord> Records { get; set; } Property Value List < ContinuousLedgerRecord > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Offer.html": {
    "href": "api/CommonInterfaces.Offer.html",
    "title": "Class Offer | Cyber Conflict Simulator",
    "keywords": "Class Offer Message type containing offer Inheritance System.Object CCSData MessageBase PlayerMessageBase Offer Inherited Members PlayerMessageBase.TextMessage PlayerMessageBase.ReceiverId MessageBase.Id MessageBase.Title MessageBase.Index MessageBase.DateTime MessageBase.SenderId Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class Offer : PlayerMessageBase Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.OperationParser.html": {
    "href": "api/CommonInterfaces.OperationParser.html",
    "title": "Class OperationParser | Cyber Conflict Simulator",
    "keywords": "Class OperationParser Class used as parser of operations from config files. One instance is used to parse one operation. Inheritance System.Object OperationParser Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class OperationParser : object Constructors OperationParser() Declaration public OperationParser() Properties Objects List of object id's used to perform operation. Declaration public List<string> Objects { get; } Property Value List < System.String > Parameters Object array which is passed to compiled expression. Because inorder passing through syntax tree structure, objects that are used in operadion appear in ordered way. Declaration public ParameterExpression Parameters { get; set; } Property Value ParameterExpression Methods ParseOperation(String, SyntaxNode) Method used to parse an operation as Expression. Currently, only binary expressions, prefix unary expressions and conditional expressions are supported. Declaration public Expression ParseOperation(string name, SyntaxNode root) Parameters System.String name SyntaxNode root Returns Expression Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ParameterHandler.html": {
    "href": "api/CommonInterfaces.ParameterHandler.html",
    "title": "Class ParameterHandler | Cyber Conflict Simulator",
    "keywords": "Class ParameterHandler Inheritance System.Object ParameterHandler Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public static class ParameterHandler : object Methods CheckAttributeParameters(IEnumerable<Parameter>, IEnumerable<ParameterConfig>) Checks 'Attribute' type parameters for validity of their reference in the given parameter combination Declaration public static bool CheckAttributeParameters(IEnumerable<Parameter> inputParameters, IEnumerable<ParameterConfig> attributeParamConfigs) Parameters IEnumerable < Parameter > inputParameters IEnumerable < ParameterConfig > attributeParamConfigs Returns System.Boolean bool indicating validity CheckSingleConfigurationItem(IDictionary<String, Object>, KeyValuePair<String, Object>) Checks given data using the configurationItem. If the data conforms, returns true , otherwise false . Declaration public static bool CheckSingleConfigurationItem(IDictionary<string, dynamic> data, KeyValuePair<string, object> configurationItem) Parameters IDictionary < System.String , System.Object > data The object to check using the given configurationItem KeyValuePair < System.String , System.Object > configurationItem Item mapping an attribute to an expected value Returns System.Boolean CreateDisplayableParameters(IEnumerable<Parameter>) Deepcopies the given parameters while also replacing their Value with a human-readable representation. Declaration public static List<Parameter> CreateDisplayableParameters(IEnumerable<Parameter> inputParameters) Parameters IEnumerable < Parameter > inputParameters Returns List < Parameter > Deepcopied altered parameter list CreateParameterInfos(IEnumerable<Parameter>) Creates displayable ParameterInfo objects from given input parameters, mapped according to their Key. Input collection should have no repeating Key -s. Declaration public static Dictionary<string, ParameterInfo> CreateParameterInfos(IEnumerable<Parameter> inputParameters) Parameters IEnumerable < Parameter > inputParameters Returns Dictionary < System.String , ParameterInfo > CreateStaticParameterInfos(IEnumerable<Parameter>) Creates displayable ParameterInfo objects from given input parameters. Declaration public static List<ParameterInfo> CreateStaticParameterInfos(IEnumerable<Parameter> inputParameters) Parameters IEnumerable < Parameter > inputParameters Returns List < ParameterInfo > GetAttributeParameter(Parameter, ILandscape) Returns the subentity referenced by the Parameter (which must be of Attribute ). If no entity can be retrieved, returns null. Declaration public static dynamic GetAttributeParameter(Parameter param, ILandscape landscape) Parameters Parameter param ILandscape landscape Returns System.Object GetParametersForPlayer(ActionConfig, IPlayer) Reads action configuration and gets all parameters that satisfy preconditions for the given player. If inner list has more than one element, it means that eather one of parameters satisfy preconditions. Declaration public static List<List<Parameter>> GetParametersForPlayer(ActionConfig config, IPlayer player) Parameters ActionConfig config Action configuration IPlayer player player who will issue the action Returns List < List < Parameter >> List of parameter combinations that satisfy preconditions. PreProcessActionParameters(IEnumerable<Parameter>, ActionConfig, String) Deepcopies given parameters, setting their Value to an object actions can use. Uses current Landscape and Player object state for resource retrival. Processes input parameter list to be useful to action instance. Declaration public static List<Parameter> PreProcessActionParameters(IEnumerable<Parameter> inputParameters, ActionConfig config, string playerID) Parameters IEnumerable < Parameter > inputParameters ActionConfig config System.String playerID Returns List < Parameter > Deepcopied altered parameter list"
  },
  "api/CommonInterfaces.ParamsLocalization.html": {
    "href": "api/CommonInterfaces.ParamsLocalization.html",
    "title": "Class ParamsLocalization | Cyber Conflict Simulator",
    "keywords": "Class ParamsLocalization Inheritance System.Object ParamsLocalization Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class ParamsLocalization : object Constructors ParamsLocalization() Declaration public ParamsLocalization() Properties Description Declaration public string Description { get; set; } Property Value System.String Name Declaration public string Name { get; set; } Property Value System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Parser.html": {
    "href": "api/CommonInterfaces.Parser.html",
    "title": "Class Parser | Cyber Conflict Simulator",
    "keywords": "Class Parser Implements methods for parsing objects into . Inheritance System.Object Parser Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public static class Parser : object Methods ParseList(Object) Declaration public static List<dynamic> ParseList(dynamic list) Parameters System.Object list Returns List < System.Object > ParseObject(Object) Parses an object and all of its subobjects into a . Used to standardize an object after deserialization. Declaration public static DynamicDictionary ParseObject(dynamic obj) Parameters System.Object obj Returns DynamicDictionary ParseObjectByAttributeType(DynamicDictionary, IDictionary<String, Attribute>) Converts object's attributes to appropriate types as specified by the given attributes dictionary. Sets non-existent attributes to default values, removes unknown attributes. Doesn't modify the original object. Declaration public static DynamicDictionary ParseObjectByAttributeType(DynamicDictionary obj, IDictionary<string, Attribute> attributes) Parameters DynamicDictionary obj IDictionary < System.String , Attribute > attributes Attribute dictionary as used by Landscape Returns DynamicDictionary"
  },
  "api/CommonInterfaces.PathNode.html": {
    "href": "api/CommonInterfaces.PathNode.html",
    "title": "Class PathNode | Cyber Conflict Simulator",
    "keywords": "Class PathNode Single node of a landscape path. Contains Id of the related landscape entity, access obtained to it, and the accessing node's Id. Inheritance System.Object PathNode Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class PathNode : object Constructors PathNode(String) Declaration public PathNode(string id) Parameters System.String id Properties Access Type of access established to the node Declaration public AccessTuple Access { get; set; } Property Value AccessTuple AccessedBy Id of the accessing node Declaration public string AccessedBy { get; set; } Property Value System.String Id Id of the node, also of the landscape entity represented by it Declaration public string Id { get; set; } Property Value System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Player.html": {
    "href": "api/CommonInterfaces.Player.html",
    "title": "Class Player | Cyber Conflict Simulator",
    "keywords": "Class Player Inheritance System.Object Player Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class Player : object, IPlayer, IBoundGameSubject, IGameSubject, ISerializable<PlayerData> Constructors Player(PlayerData) Declaration public Player(PlayerData data) Parameters PlayerData data Properties Actors Declaration public List<string> Actors { get; set; } Property Value List < System.String > Id Declaration public string Id { get; } Property Value System.String Implements IPlayer.Id Inventory Declaration public Inventory Inventory { get; } Property Value Inventory Landscape Declaration public Landscape Landscape { get; } Property Value Landscape Name Declaration public string Name { get; } Property Value System.String Implements IPlayer.Name Organizations Declaration public List<string> Organizations { get; set; } Property Value List < System.String > Side Declaration public string Side { get; } Property Value System.String Implements IPlayer.Side Updated Declaration public bool Updated { get; } Property Value System.Boolean Implements IPlayer.Updated IGameSubject.Updated Methods AddActor(String) Declaration public bool AddActor(string id) Parameters System.String id Returns System.Boolean Implements IPlayer.AddActor(String) Clear() Declaration public void Clear() Implements IGameSubject.Clear() Export() Declaration public PlayerData Export() Returns PlayerData Implements ISerializable<T>.Export() GetSubjectDelta() Declaration public SubjectData GetSubjectDelta() Returns SubjectData Implements IBoundGameSubject.GetSubjectDelta() IsControllingActor(String) Declaration public bool IsControllingActor(string actor) Parameters System.String actor Returns System.Boolean Implements IPlayer.IsControllingActor(String) RemoveActor(String) Declaration public bool RemoveActor(string id) Parameters System.String id Returns System.Boolean Implements IPlayer.RemoveActor(String) ToString() Declaration public override string ToString() Returns System.String Explicit Interface Implementations IPlayer.Inventory Declaration IInventory IPlayer.Inventory { get; } Returns IInventory Implements IPlayer.Inventory IPlayer.Landscape Declaration ILandscape IPlayer.Landscape { get; } Returns ILandscape Implements IPlayer.Landscape Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.PlayerStateDelta.html": {
    "href": "api/CommonInterfaces.PlayerStateDelta.html",
    "title": "Class PlayerStateDelta | Cyber Conflict Simulator",
    "keywords": "Class PlayerStateDelta Contains a Player 's Actors and Organizations as well as the available actions in a new state. Inheritance System.Object SubjectData PlayerStateDelta Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class PlayerStateDelta : SubjectData Properties Actions Declaration public List<ActionCombinationAggregate> Actions { get; set; } Property Value List < ActionCombinationAggregate > Actors Declaration public List<string> Actors { get; set; } Property Value List < System.String > Organizations Declaration public List<string> Organizations { get; set; } Property Value List < System.String > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.PluginHandler.html": {
    "href": "api/CommonInterfaces.PluginHandler.html",
    "title": "Class PluginHandler | Cyber Conflict Simulator",
    "keywords": "Class PluginHandler This class is responsible for loading and keeping informations about different Actions that implement ActionBase abstract class. List of actions can be acquired by calling GetActionTypes(). Before we can do that we must call LoadActions() to load action types information from plugin dll file. Folder that keeps plugin dlls is acquired by calling Helpers.GetDataFolder(). Inheritance System.Object PluginHandler Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public static class PluginHandler : object Properties ActionConfigs Declaration public static List<ActionConfig> ActionConfigs { get; } Property Value List < ActionConfig > ActionTypes Declaration public static List<Type> ActionTypes { get; } Property Value List < Type > ControlTypes Declaration public static List<Type> ControlTypes { get; } Property Value List < Type > Methods GetActionConfig(String) Declaration public static ActionConfig GetActionConfig(string actionTypeName) Parameters System.String actionTypeName Returns ActionConfig LoadActionConfigs(String) Declaration public static void LoadActionConfigs(string configsFolderPath) Parameters System.String configsFolderPath LoadActions(String) Load all actions from dll and initialize action configs. Declaration public static void LoadActions(string pluginsFolderPath) Parameters System.String pluginsFolderPath LoadControls(String) Loads available assemblies and extracts s that derive from ControlBase . Declaration public static void LoadControls(string pluginsFolderPath) Parameters System.String pluginsFolderPath Path to the folder plugin assemblies are located in LoadPlugins(String, String, String) Declaration public static void LoadPlugins(string actionPluginsFolderPath, string actionConfigsFolderPath, string controlPluginsFolderPath) Parameters System.String actionPluginsFolderPath System.String actionConfigsFolderPath System.String controlPluginsFolderPath"
  },
  "api/CommonInterfaces.Request.html": {
    "href": "api/CommonInterfaces.Request.html",
    "title": "Class Request | Cyber Conflict Simulator",
    "keywords": "Class Request Message type containing request. Request is directed to landscape object. Inheritance System.Object CCSData MessageBase LandscapeMessageBase Request Inherited Members LandscapeMessageBase.TextMessage LandscapeMessageBase.SenderObject LandscapeMessageBase.ReceiverObject MessageBase.Id MessageBase.Title MessageBase.Index MessageBase.DateTime MessageBase.SenderId Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class Request : LandscapeMessageBase Properties Conditions Conditions that wanted objects have to satisfy Declaration public DynamicDictionary Conditions { get; set; } Property Value DynamicDictionary Number Number of objects wanted. Declaration public int Number { get; set; } Property Value System.Int32 Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Response.html": {
    "href": "api/CommonInterfaces.Response.html",
    "title": "Class Response | Cyber Conflict Simulator",
    "keywords": "Class Response Message type containing response for a Request Inheritance System.Object CCSData MessageBase LandscapeMessageBase Response Inherited Members LandscapeMessageBase.TextMessage LandscapeMessageBase.SenderObject LandscapeMessageBase.ReceiverObject MessageBase.Id MessageBase.Title MessageBase.Index MessageBase.DateTime MessageBase.SenderId Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class Response : LandscapeMessageBase, IResponse Properties Answer Answer message to request. Declaration public string Answer { get; set; } Property Value System.String Implements IResponse.Answer Content Objects that are passed as an answer to request Declaration public dynamic Content { get; set; } Property Value System.Object Implements IResponse.Content Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Schema.html": {
    "href": "api/CommonInterfaces.Schema.html",
    "title": "Class Schema | Cyber Conflict Simulator",
    "keywords": "Class Schema Contains everything related to the JSON schema. Load(String) must be called before accessing any other properties or methods. Inheritance System.Object Schema Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public static class Schema : object Properties Attributes Gets a dictionary mapping attribute names to their definitions. Declaration public static IDictionary<string, Attribute> Attributes { get; } Property Value IDictionary < System.String , Attribute > Labels Gets a list of labels defined for the current scenario. Declaration public static IList<Label> Labels { get; } Property Value IList < Label > LabelsDict Declaration public static IDictionary<string, Label> LabelsDict { get; } Property Value IDictionary < System.String , Label > Methods CreateNewEntityFromLabels(String[]) Creates a new entity (according to the schema) using the given labels. All attributes are initialized to their default values according to their type. If the entity is standalone, it is required to set the 'id' attribute before adding the entity to the landscape. Declaration public static dynamic CreateNewEntityFromLabels(params string[] labels) Parameters System.String [] labels IDs of labels the new entity should have Returns System.Object GetTypeOfAttribute(Attribute) Declaration public static Type GetTypeOfAttribute(Attribute attribute) Parameters Attribute attribute Returns Type GetTypeOfAttribute(String) Declaration public static Type GetTypeOfAttribute(string attributeName) Parameters System.String attributeName Returns Type InitializeEntityByLabels(Object) Initializes the given entity recursively, in-place, according to its labels (taking into account label inheritance) Declaration public static void InitializeEntityByLabels(dynamic entity) Parameters System.Object entity IsObjectOfAttributeType(Object, String) Declaration public static bool IsObjectOfAttributeType(object obj, string attributeName) Parameters System.Object obj System.String attributeName Returns System.Boolean IsObjectOfListAttributeType(Object, String) Declaration public static bool IsObjectOfListAttributeType(object obj, string attributeName) Parameters System.Object obj System.String attributeName Returns System.Boolean Load(String) Loads Labels.json and Attributes.json found in the given path. Overwrites existing Labels and Attributes . Declaration public static void Load(string schemaFolderPath) Parameters System.String schemaFolderPath LoadExtension(String) Loads Labels.json and Attributes.json found in the given path and adds them to existing Labels and Attributes . Declaration public static void LoadExtension(string schemaFolderPath) Parameters System.String schemaFolderPath NormalizeAttribute(String, Attribute) Sets all properties used in the simulation mechanics to lowercase. Declaration public static (string Key, Attribute Attribute) NormalizeAttribute(string key, Attribute attribute) Parameters System.String key Attribute attribute Returns System.ValueTuple < System.String , Attribute > NormalizeAttributes(Dictionary<String, Attribute>) Sets all properties used in the simulation mechanics to lowercase. Declaration public static Dictionary<string, Attribute> NormalizeAttributes(Dictionary<string, Attribute> inputDict) Parameters Dictionary < System.String , Attribute > inputDict Returns Dictionary < System.String , Attribute > NormalizeLabel(Label) Sets all properties used in the simulation mechanics to lowercase. Declaration public static Label NormalizeLabel(Label inputLabel) Parameters Label inputLabel Returns Label NormalizeLabels(List<Label>) Sets all properties used in the simulation mechanics to lowercase. Declaration public static List<Label> NormalizeLabels(List<Label> inputList) Parameters List < Label > inputList Returns List < Label > ObjectImplementsAttribute(Object, String) Declaration public static bool ObjectImplementsAttribute(dynamic obj, string attributeName) Parameters System.Object obj System.String attributeName Returns System.Boolean ValidateObject(Object, IList<Object>) Vaildates a single object against the given object collection and against the schema. Declaration public static List<LandscapeValidationError> ValidateObject(dynamic entity, IList<dynamic> objects) Parameters System.Object entity IList < System.Object > objects Returns List < LandscapeValidationError > ValidateObjects(IList<Object>) Validate all given objects against each other and against the schema. Declaration public static List<LandscapeValidationError> ValidateObjects(IList<dynamic> objects) Parameters IList < System.Object > objects Returns List < LandscapeValidationError >"
  },
  "api/CommonInterfaces.Serializer.html": {
    "href": "api/CommonInterfaces.Serializer.html",
    "title": "Namespace CommonInterfaces.Serializer | Cyber Conflict Simulator",
    "keywords": "Namespace CommonInterfaces.Serializer Classes SerializeConverters Converters used by JsonSerializer for common CCS objects. SerializeConverters.DynamicConverter Implements serialization and deserialization for dynamic-type objects. SerializeConverters.DynamicDictionaryConverter Implements serialization and deserialization for objects. SerializeConverters.GenericCollectionConverterFactory SerializeConverters.InventoryDataConverter Implements serialization and deserialization for Inventory objects. SerializeConverters.LandscapeDataConverter Implements serialization and deserialization for Landscape objects. SerializeConverters.SerializableConverterFactory Implements creation of converters for classes that inherit ISerializable<T> generic interface SerializeConverters.TypeConverter Implements serialization and deserialization for objects, using the AssemblyQualifiedName property. SerializerOptions Interfaces ISerializable<T> Used to denote that a class that inherits can be serialized/deserialized via data class. Every class that implements this interface MUST implement a constructor with one argument of type"
  },
  "api/CommonInterfaces.Serializer.ISerializable-1.html": {
    "href": "api/CommonInterfaces.Serializer.ISerializable-1.html",
    "title": "Interface ISerializable<T> | Cyber Conflict Simulator",
    "keywords": "Interface ISerializable<T> Used to denote that a class that inherits can be serialized/deserialized via data class. Every class that implements this interface MUST implement a constructor with one argument of type Namespace : CommonInterfaces.Serializer Assembly : CommonInterfaces.dll Syntax public interface ISerializable<T> where T : CCSData, new() Type Parameters T Methods Export() Method called to create data object from self. Declaration T Export() Returns T Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Serializer.SerializeConverters.DynamicConverter.html": {
    "href": "api/CommonInterfaces.Serializer.SerializeConverters.DynamicConverter.html",
    "title": "Class SerializeConverters.DynamicConverter | Cyber Conflict Simulator",
    "keywords": "Class SerializeConverters.DynamicConverter Implements serialization and deserialization for dynamic-type objects. Inheritance System.Object SerializeConverters.DynamicConverter Namespace : CommonInterfaces.Serializer Assembly : CommonInterfaces.dll Syntax public class DynamicConverter : JsonConverter<dynamic> Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override dynamic Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Utf8JsonReader reader Type typeToConvert JsonSerializerOptions options Returns System.Object ReadWithCaseSensitive(ref Utf8JsonReader, Type, JsonSerializerOptions, Boolean) Declaration public dynamic ReadWithCaseSensitive(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options, bool caseSensitive = true) Parameters Utf8JsonReader reader Type typeToConvert JsonSerializerOptions options System.Boolean caseSensitive Returns System.Object Write(Utf8JsonWriter, Object, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, dynamic value, JsonSerializerOptions options) Parameters Utf8JsonWriter writer System.Object value JsonSerializerOptions options Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Serializer.SerializeConverters.DynamicDictionaryConverter.html": {
    "href": "api/CommonInterfaces.Serializer.SerializeConverters.DynamicDictionaryConverter.html",
    "title": "Class SerializeConverters.DynamicDictionaryConverter | Cyber Conflict Simulator",
    "keywords": "Class SerializeConverters.DynamicDictionaryConverter Implements serialization and deserialization for objects. Inheritance System.Object SerializeConverters.DynamicDictionaryConverter Namespace : CommonInterfaces.Serializer Assembly : CommonInterfaces.dll Syntax public class DynamicDictionaryConverter : JsonConverter<DynamicDictionary> Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override DynamicDictionary Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Utf8JsonReader reader Type typeToConvert JsonSerializerOptions options Returns DynamicDictionary Write(Utf8JsonWriter, DynamicDictionary, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, DynamicDictionary value, JsonSerializerOptions options) Parameters Utf8JsonWriter writer DynamicDictionary value JsonSerializerOptions options Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Serializer.SerializeConverters.GenericCollectionConverterFactory.html": {
    "href": "api/CommonInterfaces.Serializer.SerializeConverters.GenericCollectionConverterFactory.html",
    "title": "Class SerializeConverters.GenericCollectionConverterFactory | Cyber Conflict Simulator",
    "keywords": "Class SerializeConverters.GenericCollectionConverterFactory Inheritance System.Object SerializeConverters.GenericCollectionConverterFactory Namespace : CommonInterfaces.Serializer Assembly : CommonInterfaces.dll Syntax public class GenericCollectionConverterFactory : JsonConverterFactory Methods CanConvert(Type) Declaration public override bool CanConvert(Type typeToConvert) Parameters Type typeToConvert Returns System.Boolean CreateConverter(Type, JsonSerializerOptions) Declaration public override JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options) Parameters Type typeToConvert JsonSerializerOptions options Returns JsonConverter Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Serializer.SerializeConverters.html": {
    "href": "api/CommonInterfaces.Serializer.SerializeConverters.html",
    "title": "Class SerializeConverters | Cyber Conflict Simulator",
    "keywords": "Class SerializeConverters Converters used by JsonSerializer for common CCS objects. Inheritance System.Object SerializeConverters Namespace : CommonInterfaces.Serializer Assembly : CommonInterfaces.dll Syntax public class SerializeConverters : object Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Serializer.SerializeConverters.InventoryDataConverter.html": {
    "href": "api/CommonInterfaces.Serializer.SerializeConverters.InventoryDataConverter.html",
    "title": "Class SerializeConverters.InventoryDataConverter | Cyber Conflict Simulator",
    "keywords": "Class SerializeConverters.InventoryDataConverter Implements serialization and deserialization for Inventory objects. Inheritance System.Object SerializeConverters.InventoryDataConverter Namespace : CommonInterfaces.Serializer Assembly : CommonInterfaces.dll Syntax public class InventoryDataConverter : JsonConverter<InventoryData> Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override InventoryData Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Utf8JsonReader reader Type typeToConvert JsonSerializerOptions options Returns InventoryData Write(Utf8JsonWriter, InventoryData, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, InventoryData value, JsonSerializerOptions options) Parameters Utf8JsonWriter writer InventoryData value JsonSerializerOptions options Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Serializer.SerializeConverters.LandscapeDataConverter.html": {
    "href": "api/CommonInterfaces.Serializer.SerializeConverters.LandscapeDataConverter.html",
    "title": "Class SerializeConverters.LandscapeDataConverter | Cyber Conflict Simulator",
    "keywords": "Class SerializeConverters.LandscapeDataConverter Implements serialization and deserialization for Landscape objects. Inheritance System.Object SerializeConverters.LandscapeDataConverter Namespace : CommonInterfaces.Serializer Assembly : CommonInterfaces.dll Syntax public class LandscapeDataConverter : JsonConverter<LandscapeData> Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override LandscapeData Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Utf8JsonReader reader Type typeToConvert JsonSerializerOptions options Returns LandscapeData Write(Utf8JsonWriter, LandscapeData, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, LandscapeData value, JsonSerializerOptions options) Parameters Utf8JsonWriter writer LandscapeData value JsonSerializerOptions options Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Serializer.SerializeConverters.SerializableConverterFactory.html": {
    "href": "api/CommonInterfaces.Serializer.SerializeConverters.SerializableConverterFactory.html",
    "title": "Class SerializeConverters.SerializableConverterFactory | Cyber Conflict Simulator",
    "keywords": "Class SerializeConverters.SerializableConverterFactory Implements creation of converters for classes that inherit ISerializable<T> generic interface Inheritance System.Object SerializeConverters.SerializableConverterFactory Namespace : CommonInterfaces.Serializer Assembly : CommonInterfaces.dll Syntax public class SerializableConverterFactory : JsonConverterFactory Methods CanConvert(Type) Declaration public override bool CanConvert(Type typeToConvert) Parameters Type typeToConvert Returns System.Boolean CreateConverter(Type, JsonSerializerOptions) Declaration public override JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options) Parameters Type typeToConvert JsonSerializerOptions options Returns JsonConverter Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Serializer.SerializeConverters.TypeConverter.html": {
    "href": "api/CommonInterfaces.Serializer.SerializeConverters.TypeConverter.html",
    "title": "Class SerializeConverters.TypeConverter | Cyber Conflict Simulator",
    "keywords": "Class SerializeConverters.TypeConverter Implements serialization and deserialization for objects, using the AssemblyQualifiedName property. Inheritance System.Object SerializeConverters.TypeConverter Namespace : CommonInterfaces.Serializer Assembly : CommonInterfaces.dll Syntax public class TypeConverter : JsonConverter<Type> Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override Type Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Utf8JsonReader reader Type typeToConvert JsonSerializerOptions options Returns Type Write(Utf8JsonWriter, Type, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, Type value, JsonSerializerOptions options) Parameters Utf8JsonWriter writer Type value JsonSerializerOptions options Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Serializer.SerializerOptions.html": {
    "href": "api/CommonInterfaces.Serializer.SerializerOptions.html",
    "title": "Class SerializerOptions | Cyber Conflict Simulator",
    "keywords": "Class SerializerOptions Inheritance System.Object SerializerOptions Namespace : CommonInterfaces.Serializer Assembly : CommonInterfaces.dll Syntax public static class SerializerOptions : object Methods Initialize() Declaration public static void Initialize()"
  },
  "api/CommonInterfaces.SessionType.html": {
    "href": "api/CommonInterfaces.SessionType.html",
    "title": "Enum SessionType | Cyber Conflict Simulator",
    "keywords": "Enum SessionType Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public enum SessionType : int ACTIONLOG ALERT HINT INJECT OFFER REQUEST TEXTMESSAGE Extension Methods Helpers.DeepCopy<SessionType>()"
  },
  "api/CommonInterfaces.SimulatorDataManagerFactory.html": {
    "href": "api/CommonInterfaces.SimulatorDataManagerFactory.html",
    "title": "Class SimulatorDataManagerFactory | Cyber Conflict Simulator",
    "keywords": "Class SimulatorDataManagerFactory Implements factory pattern for constructing DataManager for given scenario file/folder based on it's extension. Currently suppotred managers: Throws exception if DataManager is not supported. Inheritance System.Object SimulatorDataManagerFactory Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public static class SimulatorDataManagerFactory : object Methods Create(String) Create corresponding DataManager based on extension of file/folder given in scenarioPath parameter Declaration public static IDataManagerCreator Create(string scenarioPath) Parameters System.String scenarioPath Returns IDataManagerCreator IDataManagerCreator instance Create(String, String) Create corresponding DataManager based on extension of file/folder given in name parameter Declaration public static IDataManagerCreator Create(string name, string folderPath) Parameters System.String name System.String folderPath Returns IDataManagerCreator ReadZip(Stream) Create ZipDataManager from given Stream on zip file. Used for reading zip files sent over similator. Declaration public static ISimulatorDataManager ReadZip(Stream stream) Parameters Stream stream Returns ISimulatorDataManager"
  },
  "api/CommonInterfaces.StreamDataManager.html": {
    "href": "api/CommonInterfaces.StreamDataManager.html",
    "title": "Class StreamDataManager | Cyber Conflict Simulator",
    "keywords": "Class StreamDataManager Inheritance System.Object StreamDataManager FolderDataManager ZipDataManager Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public abstract class StreamDataManager : object, ISimulatorDataManager, IDisposable Constructors StreamDataManager(Stream) Declaration public StreamDataManager(Stream stream) Parameters Stream stream StreamDataManager(String) Declaration public StreamDataManager(string scenarioPath) Parameters System.String scenarioPath Properties ScenarioPath Declaration public string ScenarioPath { get; } Property Value System.String Implements ISimulatorDataManager.ScenarioPath ScenarioStream Declaration public Stream ScenarioStream { get; } Property Value Stream Methods CopyTo(ISimulatorDataManager) Declaration public void CopyTo(ISimulatorDataManager manager) Parameters ISimulatorDataManager manager Implements ISimulatorDataManager.CopyTo(ISimulatorDataManager) CreateEntry(String) Declaration public abstract Stream CreateEntry(string entryName) Parameters System.String entryName Returns Stream Dispose() Declaration public abstract void Dispose() GetEntry(String) Declaration public abstract Stream GetEntry(string entryName) Parameters System.String entryName Returns Stream LoadActions() Declaration public ActionManager LoadActions() Returns ActionManager Implements ISimulatorDataManager.LoadActions() LoadActionsData() Declaration public ActionManagerData LoadActionsData() Returns ActionManagerData Implements ISimulatorDataManager.LoadActionsData() LoadAttributes() Declaration public Dictionary<string, Attribute> LoadAttributes() Returns Dictionary < System.String , Attribute > Implements ISimulatorDataManager.LoadAttributes() LoadClientInfo() Declaration public List<ClientInfo> LoadClientInfo() Returns List < ClientInfo > Implements ISimulatorDataManager.LoadClientInfo() LoadControls(List<Object>) Declaration public ControlManager LoadControls(List<dynamic> landscapeEntities) Parameters List < System.Object > landscapeEntities Returns ControlManager Implements ISimulatorDataManager.LoadControls(List<Object>) LoadControlsData() Declaration public ControlsData LoadControlsData() Returns ControlsData Implements ISimulatorDataManager.LoadControlsData() LoadExpressions() Declaration public ExpressionManager LoadExpressions() Returns ExpressionManager Implements ISimulatorDataManager.LoadExpressions() LoadExpressionsData() Declaration public ExpressionsData LoadExpressionsData() Returns ExpressionsData Implements ISimulatorDataManager.LoadExpressionsData() LoadGlobalLandscape() Declaration public Landscape LoadGlobalLandscape() Returns Landscape Implements ISimulatorDataManager.LoadGlobalLandscape() LoadGlobalLandscapeData() Declaration public LandscapeData LoadGlobalLandscapeData() Returns LandscapeData Implements ISimulatorDataManager.LoadGlobalLandscapeData() LoadLabels() Declaration public List<Label> LoadLabels() Returns List < Label > Implements ISimulatorDataManager.LoadLabels() LoadLedger() Declaration public Ledger LoadLedger() Returns Ledger Implements ISimulatorDataManager.LoadLedger() LoadLedgerData() Declaration public LedgerData LoadLedgerData() Returns LedgerData Implements ISimulatorDataManager.LoadLedgerData() LoadLogs() Declaration public List<Log> LoadLogs() Returns List < Log > Implements ISimulatorDataManager.LoadLogs() LoadMessenger() Declaration public Messenger LoadMessenger() Returns Messenger Implements ISimulatorDataManager.LoadMessenger() LoadMessengerData() Declaration public MessengerData LoadMessengerData() Returns MessengerData Implements ISimulatorDataManager.LoadMessengerData() LoadMetadata() Declaration public Metadata LoadMetadata() Returns Metadata Implements ISimulatorDataManager.LoadMetadata() LoadPlayers() Declaration public List<Player> LoadPlayers() Returns List < Player > Implements ISimulatorDataManager.LoadPlayers() LoadPlayersData() Declaration public List<PlayerData> LoadPlayersData() Returns List < PlayerData > Implements ISimulatorDataManager.LoadPlayersData() LoadSharedObjects() Declaration public Landscape LoadSharedObjects() Returns Landscape Implements ISimulatorDataManager.LoadSharedObjects() LoadSharedObjectsData() Declaration public LandscapeData LoadSharedObjectsData() Returns LandscapeData Implements ISimulatorDataManager.LoadSharedObjectsData() RemoveEntry(String) Declaration public abstract bool RemoveEntry(string entryName) Parameters System.String entryName Returns System.Boolean SaveActions(ActionManager) Declaration public void SaveActions(ActionManager actions) Parameters ActionManager actions Implements ISimulatorDataManager.SaveActions(ActionManager) SaveActionsData(ActionManagerData) Declaration public void SaveActionsData(ActionManagerData data) Parameters ActionManagerData data Implements ISimulatorDataManager.SaveActionsData(ActionManagerData) SaveAttributes(Dictionary<String, Attribute>) Declaration public void SaveAttributes(Dictionary<string, Attribute> data) Parameters Dictionary < System.String , Attribute > data Implements ISimulatorDataManager.SaveAttributes(Dictionary<String, Attribute>) SaveClientInfo(List<ClientInfo>) Declaration public void SaveClientInfo(List<ClientInfo> clientInfo) Parameters List < ClientInfo > clientInfo Implements ISimulatorDataManager.SaveClientInfo(List<ClientInfo>) SaveControls(ControlManager) Declaration public void SaveControls(ControlManager controlManager) Parameters ControlManager controlManager Implements ISimulatorDataManager.SaveControls(ControlManager) SaveControlsData(ControlsData) Declaration public void SaveControlsData(ControlsData data) Parameters ControlsData data Implements ISimulatorDataManager.SaveControlsData(ControlsData) SaveExpressions(ExpressionManager) Declaration public void SaveExpressions(ExpressionManager expressionManager) Parameters ExpressionManager expressionManager Implements ISimulatorDataManager.SaveExpressions(ExpressionManager) SaveExpressionsData(ExpressionsData) Declaration public void SaveExpressionsData(ExpressionsData expressions) Parameters ExpressionsData expressions Implements ISimulatorDataManager.SaveExpressionsData(ExpressionsData) SaveGlobalLandscape(Landscape) Declaration public void SaveGlobalLandscape(Landscape landscape) Parameters Landscape landscape Implements ISimulatorDataManager.SaveGlobalLandscape(Landscape) SaveGlobalLandscapeData(LandscapeData) Declaration public void SaveGlobalLandscapeData(LandscapeData landscape) Parameters LandscapeData landscape Implements ISimulatorDataManager.SaveGlobalLandscapeData(LandscapeData) SaveLabels(List<Label>) Declaration public void SaveLabels(List<Label> data) Parameters List < Label > data Implements ISimulatorDataManager.SaveLabels(List<Label>) SaveLedger(Ledger) Declaration public void SaveLedger(Ledger ledger) Parameters Ledger ledger Implements ISimulatorDataManager.SaveLedger(Ledger) SaveLedgerData(LedgerData) Declaration public void SaveLedgerData(LedgerData ledger) Parameters LedgerData ledger Implements ISimulatorDataManager.SaveLedgerData(LedgerData) SaveLogs(List<Log>) Declaration public void SaveLogs(List<Log> data) Parameters List < Log > data Implements ISimulatorDataManager.SaveLogs(List<Log>) SaveMessenger(Messenger) Declaration public void SaveMessenger(Messenger messenger) Parameters Messenger messenger Implements ISimulatorDataManager.SaveMessenger(Messenger) SaveMessengerData(MessengerData) Declaration public void SaveMessengerData(MessengerData data) Parameters MessengerData data Implements ISimulatorDataManager.SaveMessengerData(MessengerData) SaveMetadata(Metadata) Declaration public void SaveMetadata(Metadata metadata) Parameters Metadata metadata Implements ISimulatorDataManager.SaveMetadata(Metadata) SavePlayers(List<Player>) Declaration public void SavePlayers(List<Player> players) Parameters List < Player > players Implements ISimulatorDataManager.SavePlayers(List<Player>) SavePlayersData(List<PlayerData>) Declaration public void SavePlayersData(List<PlayerData> players) Parameters List < PlayerData > players Implements ISimulatorDataManager.SavePlayersData(List<PlayerData>) SaveSharedObjects(Landscape) Declaration public void SaveSharedObjects(Landscape sharedObjects) Parameters Landscape sharedObjects Implements ISimulatorDataManager.SaveSharedObjects(Landscape) SaveSharedObjectsData(LandscapeData) Declaration public void SaveSharedObjectsData(LandscapeData sharedObjects) Parameters LandscapeData sharedObjects Implements ISimulatorDataManager.SaveSharedObjectsData(LandscapeData) Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.SubjectData.html": {
    "href": "api/CommonInterfaces.SubjectData.html",
    "title": "Class SubjectData | Cyber Conflict Simulator",
    "keywords": "Class SubjectData Inheritance System.Object SubjectData LandscapeStateDelta NewMessages NewRecords PlayerStateDelta Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public abstract class SubjectData : object Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.TextMessage.html": {
    "href": "api/CommonInterfaces.TextMessage.html",
    "title": "Class TextMessage | Cyber Conflict Simulator",
    "keywords": "Class TextMessage Message type containing basic text message Inheritance System.Object CCSData MessageBase LandscapeMessageBase TextMessage Inherited Members LandscapeMessageBase.TextMessage LandscapeMessageBase.SenderObject LandscapeMessageBase.ReceiverObject MessageBase.Id MessageBase.Title MessageBase.Index MessageBase.DateTime MessageBase.SenderId Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class TextMessage : LandscapeMessageBase Properties FileName Name of the file that needs to be transfered Declaration public string FileName { get; set; } Property Value System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.TriggerExpression.html": {
    "href": "api/CommonInterfaces.TriggerExpression.html",
    "title": "Class TriggerExpression | Cyber Conflict Simulator",
    "keywords": "Class TriggerExpression Implements the construct for evaluating Expressions dependant on condition change. The given expression will be evaluated only when the precondition switches from false to true or vice-versa. The specific behaviour is defined by TriggerOnRisingEdge , where 'Rising edge' indicates the switch from false to true . Additionally, Charges indicates the number of times this trigger will happen. If it's initially set to 0 or a negative number, the amount of charges will be infinite. Inheritance System.Object ExpressionBase TriggerExpression Inherited Members ExpressionBase.InputBlock ExpressionBase.Id ExpressionBase.Status ExpressionBase.ConditionArguments ExpressionBase.ExpressionArguments ExpressionBase.UnifiedArguments ExpressionBase.Initialize() ExpressionBase.Equals(Object) ExpressionBase.GetHashCode() ExpressionBase.PerformEvaluation(List<Object>, List<Object>) ExpressionBase.ListToDictionary(IEnumerable<Formula>) ExpressionBase.SetArguments(List<String>) ExpressionBase.Terminate() Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class TriggerExpression : ExpressionBase, ISerializable<TriggerExpressionData> Constructors TriggerExpression(TriggerExpressionData) Declaration public TriggerExpression(TriggerExpressionData data) Parameters TriggerExpressionData data Properties Charges Indicates the number of executions the TriggerExpression has left, with '-1' meaning infinite charges. Upon reaching zero charges, the Expression terminates and won't be evaluated again. Declaration public int Charges { get; } Property Value System.Int32 TriggerOnRisingEdge If true , contained expression is evaluated when the precondition switches from false to true . If false , the other way around. Declaration public bool TriggerOnRisingEdge { get; } Property Value System.Boolean Methods Evaluate(List<Object>, Boolean) Declaration protected override void Evaluate(List<object> objects, bool conditionState) Parameters List < System.Object > objects System.Boolean conditionState Overrides ExpressionBase.Evaluate(List<Object>, Boolean) Export() Declaration public TriggerExpressionData Export() Returns TriggerExpressionData Implements ISerializable<T>.Export() Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Validator.ActionValidator.html": {
    "href": "api/CommonInterfaces.Validator.ActionValidator.html",
    "title": "Class ActionValidator | Cyber Conflict Simulator",
    "keywords": "Class ActionValidator Inheritance System.Object ActionValidator Namespace : CommonInterfaces.Validator Assembly : CommonInterfaces.dll Syntax public static class ActionValidator : object Methods CheckPreconditions(IEnumerable<Parameter>, ActionConfig) Declaration public static (bool, Dictionary<string, List<Dictionary<string, object>>>) CheckPreconditions(IEnumerable<Parameter> parameters, ActionConfig config) Parameters IEnumerable < Parameter > parameters ActionConfig config Returns System.ValueTuple < System.Boolean , Dictionary < System.String , List < Dictionary < System.String , System.Object >>>> ValidateAttribute(Attribute, Object, List<Object>) Declaration public static bool ValidateAttribute(Attribute attribute, dynamic value, List<dynamic> landscapeObjects) Parameters Attribute attribute System.Object value List < System.Object > landscapeObjects Returns System.Boolean ValidateOutputs(ActionBase, ActionConfig) Validate outputs on global landscape Declaration public static bool ValidateOutputs(ActionBase action, ActionConfig config) Parameters ActionBase action ActionConfig config Returns System.Boolean"
  },
  "api/CommonInterfaces.Validator.html": {
    "href": "api/CommonInterfaces.Validator.html",
    "title": "Namespace CommonInterfaces.Validator | Cyber Conflict Simulator",
    "keywords": "Namespace CommonInterfaces.Validator Classes ActionValidator LandscapeValidationError LandscapeValidator Implements functionality for validating whether a landscape (set of objects) or a single object is usable and will not cause runtime issues through missing attributes or labels. Upon construction, labels and attributes are set (forming a schema). Every call to validation methods must pass objects against which to validate. Enums LandscapeValidationError.ErrorTypes Types of errors found on an object or among its attributes"
  },
  "api/CommonInterfaces.Validator.LandscapeValidationError.ErrorTypes.html": {
    "href": "api/CommonInterfaces.Validator.LandscapeValidationError.ErrorTypes.html",
    "title": "Enum LandscapeValidationError.ErrorTypes | Cyber Conflict Simulator",
    "keywords": "Enum LandscapeValidationError.ErrorTypes Types of errors found on an object or among its attributes Namespace : CommonInterfaces.Validator Assembly : CommonInterfaces.dll Syntax public enum ErrorTypes : int AttributeInvalid AttributeMissing AttributeOutOfLabel AttributeUnknown LabelUnknown ObjectMissingLabel ObjectMissingName Other ReferenceMissing ReferenceWrongLabel RequiredLabelMissing SchemaIncomplete Extension Methods Helpers.DeepCopy<LandscapeValidationError.ErrorTypes>()"
  },
  "api/CommonInterfaces.Validator.LandscapeValidationError.html": {
    "href": "api/CommonInterfaces.Validator.LandscapeValidationError.html",
    "title": "Class LandscapeValidationError | Cyber Conflict Simulator",
    "keywords": "Class LandscapeValidationError Inheritance System.Object LandscapeValidationError Namespace : CommonInterfaces.Validator Assembly : CommonInterfaces.dll Syntax public class LandscapeValidationError : object Constructors LandscapeValidationError(String, String, String, LandscapeValidationError.ErrorTypes, String) Declaration public LandscapeValidationError(string objectId, string objectName, string attributeName, LandscapeValidationError.ErrorTypes errorType, string reference = \"\") Parameters System.String objectId System.String objectName System.String attributeName LandscapeValidationError.ErrorTypes errorType System.String reference Properties AttributeName Declaration public string AttributeName { get; } Property Value System.String ErrorType Declaration public LandscapeValidationError.ErrorTypes ErrorType { get; } Property Value LandscapeValidationError.ErrorTypes ObjectId Declaration public string ObjectId { get; } Property Value System.String ObjectName Declaration public string ObjectName { get; } Property Value System.String Reference Declaration public string Reference { get; } Property Value System.String Methods ToString() Declaration public override string ToString() Returns System.String Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.Validator.LandscapeValidator.html": {
    "href": "api/CommonInterfaces.Validator.LandscapeValidator.html",
    "title": "Class LandscapeValidator | Cyber Conflict Simulator",
    "keywords": "Class LandscapeValidator Implements functionality for validating whether a landscape (set of objects) or a single object is usable and will not cause runtime issues through missing attributes or labels. Upon construction, labels and attributes are set (forming a schema). Every call to validation methods must pass objects against which to validate. Inheritance System.Object LandscapeValidator Namespace : CommonInterfaces.Validator Assembly : CommonInterfaces.dll Syntax public class LandscapeValidator : object Constructors LandscapeValidator(IList<Label>, IDictionary<String, Attribute>) Construct a LandscapeValidator explicitly, passing label and attribute schemas along with the objects against which to validate. Declaration public LandscapeValidator(IList<Label> labels, IDictionary<string, Attribute> attributes) Parameters IList < Label > labels List of labels (from a schema) IDictionary < System.String , Attribute > attributes Dictionary of attributes (from a schema) Methods ValidateObject(Object, IList<Object>) Vaildates a single object against the given object collection and against the schema. Declaration public List<LandscapeValidationError> ValidateObject(dynamic entity, IList<dynamic> objects) Parameters System.Object entity IList < System.Object > objects Returns List < LandscapeValidationError > ValidateObjects(IList<Object>) Validate all given objects against each other and against the schema. Declaration public List<LandscapeValidationError> ValidateObjects(IList<dynamic> objects) Parameters IList < System.Object > objects Returns List < LandscapeValidationError > Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/CommonInterfaces.ZipDataManager.html": {
    "href": "api/CommonInterfaces.ZipDataManager.html",
    "title": "Class ZipDataManager | Cyber Conflict Simulator",
    "keywords": "Class ZipDataManager Data manager for game files contained in zip archives. Inheritance System.Object StreamDataManager ZipDataManager Inherited Members StreamDataManager.ScenarioPath StreamDataManager.ScenarioStream StreamDataManager.LoadGlobalLandscape() StreamDataManager.LoadPlayers() StreamDataManager.LoadSharedObjects() StreamDataManager.LoadMetadata() StreamDataManager.LoadLedger() StreamDataManager.LoadExpressions() StreamDataManager.LoadControls(List<Object>) StreamDataManager.LoadClientInfo() StreamDataManager.LoadMessenger() StreamDataManager.LoadActions() StreamDataManager.LoadLogs() StreamDataManager.LoadLabels() StreamDataManager.LoadAttributes() StreamDataManager.LoadGlobalLandscapeData() StreamDataManager.LoadPlayersData() StreamDataManager.LoadSharedObjectsData() StreamDataManager.LoadLedgerData() StreamDataManager.LoadExpressionsData() StreamDataManager.LoadControlsData() StreamDataManager.LoadMessengerData() StreamDataManager.LoadActionsData() StreamDataManager.SaveGlobalLandscape(Landscape) StreamDataManager.SavePlayers(List<Player>) StreamDataManager.SaveSharedObjects(Landscape) StreamDataManager.SaveMetadata(Metadata) StreamDataManager.SaveLedger(Ledger) StreamDataManager.SaveExpressions(ExpressionManager) StreamDataManager.SaveClientInfo(List<ClientInfo>) StreamDataManager.SaveMessenger(Messenger) StreamDataManager.SaveActions(ActionManager) StreamDataManager.SaveControls(ControlManager) StreamDataManager.SaveLogs(List<Log>) StreamDataManager.SaveLabels(List<Label>) StreamDataManager.SaveAttributes(Dictionary<String, Attribute>) StreamDataManager.SaveGlobalLandscapeData(LandscapeData) StreamDataManager.SavePlayersData(List<PlayerData>) StreamDataManager.SaveSharedObjectsData(LandscapeData) StreamDataManager.SaveLedgerData(LedgerData) StreamDataManager.SaveExpressionsData(ExpressionsData) StreamDataManager.SaveMessengerData(MessengerData) StreamDataManager.SaveActionsData(ActionManagerData) StreamDataManager.SaveControlsData(ControlsData) StreamDataManager.CopyTo(ISimulatorDataManager) Namespace : CommonInterfaces Assembly : CommonInterfaces.dll Syntax public class ZipDataManager : StreamDataManager, ISimulatorDataManager, IDisposable Methods Create(String) Declaration public static ISimulatorDataManager Create(string fullPath) Parameters System.String fullPath Returns ISimulatorDataManager Create(String, String) Declaration public static ISimulatorDataManager Create(string name, string outPath) Parameters System.String name System.String outPath Returns ISimulatorDataManager CreateEntry(String) Declaration public override Stream CreateEntry(string entryName) Parameters System.String entryName Returns Stream Overrides StreamDataManager.CreateEntry(String) Dispose() Declaration public override void Dispose() Overrides StreamDataManager.Dispose() GetEntry(String) Declaration public override Stream GetEntry(string entryName) Parameters System.String entryName Returns Stream Overrides StreamDataManager.GetEntry(String) Open(Stream) Declaration public static ISimulatorDataManager Open(Stream stream) Parameters Stream stream Returns ISimulatorDataManager Open(String) Declaration public static ISimulatorDataManager Open(string scenarioFile) Parameters System.String scenarioFile Returns ISimulatorDataManager Read(Stream) Declaration public static ISimulatorDataManager Read(Stream stream) Parameters Stream stream Returns ISimulatorDataManager Read(String) Declaration public static ISimulatorDataManager Read(string fullPath) Parameters System.String fullPath Returns ISimulatorDataManager RemoveEntry(String) Declaration public override bool RemoveEntry(string entryName) Parameters System.String entryName Returns System.Boolean Overrides StreamDataManager.RemoveEntry(String) Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Controls.AAAControl.html": {
    "href": "api/Controls.AAAControl.html",
    "title": "Class AAAControl | Cyber Conflict Simulator",
    "keywords": "Class AAAControl Inheritance System.Object ControlBase AAAControl Inherited Members ControlBase.ResidingObjectId ControlBase.Name ControlBase.IsActive ControlBase.Mode ControlBase.TypeId ControlBase.TypeName ControlBase.Logger(LoggerType) ControlBase.Initialize(String, String, String, String) ControlBase.Configure(Object) ControlBase.ConfigureAndTrigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) ControlBase.WriteToLog(Boolean, Object, Observable, IReadOnlyApplication, String, Boolean) ControlBase.GetPlayerForLogEntity(Object, IReadOnlyApplication) Namespace : Controls Assembly : Controls.dll Syntax public class AAAControl : ControlBase Properties Authorizations Declaration public List<dynamic> Authorizations { get; } Property Value List < System.Object > FileAccessRules Declaration public List<dynamic> FileAccessRules { get; } Property Value List < System.Object > LocalCredentialStore Declaration public string LocalCredentialStore { get; } Property Value System.String RemoteCredentialStore Declaration public string RemoteCredentialStore { get; } Property Value System.String Methods Reconfigure(Object) Declaration protected override void Reconfigure(dynamic controlEntity) Parameters System.Object controlEntity Overrides ControlBase.Reconfigure(Object) Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) AAA method checks for potentially malicious logins on target machine or software Declaration protected override ControlOutput Trigger(dynamic entity, Observable observable, IReadOnlyApplication application, double? _) Parameters System.Object entity Observable observable IReadOnlyApplication application System.Nullable < System.Double > _ Returns ControlOutput True if control passes, false if control blocks Overrides ControlBase.Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Controls.AntiSpamControl.html": {
    "href": "api/Controls.AntiSpamControl.html",
    "title": "Class AntiSpamControl | Cyber Conflict Simulator",
    "keywords": "Class AntiSpamControl Inheritance System.Object ControlBase AntiSpamControl Inherited Members ControlBase.ResidingObjectId ControlBase.Name ControlBase.IsActive ControlBase.Mode ControlBase.TypeId ControlBase.TypeName ControlBase.Logger(LoggerType) ControlBase.Initialize(String, String, String, String) ControlBase.Configure(Object) ControlBase.ConfigureAndTrigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) ControlBase.WriteToLog(Boolean, Object, Observable, IReadOnlyApplication, String, Boolean) ControlBase.GetPlayerForLogEntity(Object, IReadOnlyApplication) Namespace : Controls Assembly : Controls.dll Syntax public class AntiSpamControl : ControlBase Properties Effectiveness Declaration public double Effectiveness { get; } Property Value System.Double Methods Reconfigure(Object) Declaration protected override void Reconfigure(dynamic controlEntity) Parameters System.Object controlEntity Overrides ControlBase.Reconfigure(Object) Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) Checks if sent mail could be classified as SPAM. In case positive spam detection, mail is being blocked. Declaration protected override ControlOutput Trigger(dynamic entity, Observable observable, IReadOnlyApplication application, double? _) Parameters System.Object entity mail server Observable observable with payload containing mail IReadOnlyApplication application System.Nullable < System.Double > _ Returns ControlOutput Boolean : True indicates it passes email and false that it blocks it Overrides ControlBase.Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Controls.AVControl.html": {
    "href": "api/Controls.AVControl.html",
    "title": "Class AVControl | Cyber Conflict Simulator",
    "keywords": "Class AVControl Inheritance System.Object ControlBase AVControl Inherited Members ControlBase.ResidingObjectId ControlBase.Name ControlBase.IsActive ControlBase.Mode ControlBase.TypeId ControlBase.TypeName ControlBase.Logger(LoggerType) ControlBase.Initialize(String, String, String, String) ControlBase.Configure(Object) ControlBase.ConfigureAndTrigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) ControlBase.WriteToLog(Boolean, Object, Observable, IReadOnlyApplication, String, Boolean) ControlBase.GetPlayerForLogEntity(Object, IReadOnlyApplication) Namespace : Controls Assembly : Controls.dll Syntax public class AVControl : ControlBase Properties BehaviourDetection Declaration public double BehaviourDetection { get; } Property Value System.Double HeuristicDetection Declaration public double HeuristicDetection { get; } Property Value System.Double LastChanged Declaration public DateTime LastChanged { get; } Property Value DateTime Signatures Declaration public dynamic Signatures { get; } Property Value System.Object Updates Declaration public string Updates { get; } Property Value System.String Methods Reconfigure(Object) Declaration protected override void Reconfigure(dynamic controlEntity) Parameters System.Object controlEntity Overrides ControlBase.Reconfigure(Object) Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) AV method checks payload for malicious payload and possibly prevents installation Declaration protected override ControlOutput Trigger(dynamic entity, Observable observable, IReadOnlyApplication application, double? _) Parameters System.Object entity Observable observable IReadOnlyApplication application System.Nullable < System.Double > _ Returns ControlOutput Overrides ControlBase.Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Controls.BlockControl.html": {
    "href": "api/Controls.BlockControl.html",
    "title": "Class BlockControl | Cyber Conflict Simulator",
    "keywords": "Class BlockControl Inheritance System.Object ControlBase BlockControl Inherited Members ControlBase.ResidingObjectId ControlBase.Name ControlBase.IsActive ControlBase.Mode ControlBase.TypeId ControlBase.TypeName ControlBase.Logger(LoggerType) ControlBase.Initialize(String, String, String, String) ControlBase.Configure(Object) ControlBase.ConfigureAndTrigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) ControlBase.WriteToLog(Boolean, Object, Observable, IReadOnlyApplication, String, Boolean) ControlBase.GetPlayerForLogEntity(Object, IReadOnlyApplication) Namespace : Controls Assembly : Controls.dll Syntax public class BlockControl : ControlBase Methods Reconfigure(Object) Declaration protected override void Reconfigure(dynamic inputBlock) Parameters System.Object inputBlock Overrides ControlBase.Reconfigure(Object) Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) If object has control, always return false. Declaration protected override ControlOutput Trigger(dynamic entity, Observable observable, IReadOnlyApplication application, double? _) Parameters System.Object entity Observable observable IReadOnlyApplication application System.Nullable < System.Double > _ Returns ControlOutput Overrides ControlBase.Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Controls.ControlHelpers.html": {
    "href": "api/Controls.ControlHelpers.html",
    "title": "Class ControlHelpers | Cyber Conflict Simulator",
    "keywords": "Class ControlHelpers Inheritance System.Object ControlHelpers Namespace : Controls Assembly : Controls.dll Syntax public static class ControlHelpers : object Methods GetAllObjectsConnectedToEntity(String, List<Object>, ILandscape) Recursively collect all objects connected to given entity. For speed, list of all networks on global landscape is given to this method. Declaration public static List<string> GetAllObjectsConnectedToEntity(string entityId, List<dynamic> networks, ILandscape landscape) Parameters System.String entityId List < System.Object > networks ILandscape landscape Returns List < System.String > GetFirewallRuleObjects(String, ILandscape) Retrieves a list of IDs of all objects the given rule includes Declaration public static List<string> GetFirewallRuleObjects(string ruleObjectId, ILandscape landscape) Parameters System.String ruleObjectId ILandscape landscape Returns List < System.String >"
  },
  "api/Controls.Controls.html": {
    "href": "api/Controls.Controls.html",
    "title": "Class Controls | Cyber Conflict Simulator",
    "keywords": "Class Controls Inheritance System.Object Controls Namespace : Controls Assembly : Controls.dll Syntax public static class Controls : object"
  },
  "api/Controls.DNSBlacklistControl.html": {
    "href": "api/Controls.DNSBlacklistControl.html",
    "title": "Class DNSBlacklistControl | Cyber Conflict Simulator",
    "keywords": "Class DNSBlacklistControl DNSBlacklist control blocks traffic to webApplications that are located on domains that are listed on the control's blacklist Inheritance System.Object ControlBase DNSBlacklistControl Inherited Members ControlBase.ResidingObjectId ControlBase.Name ControlBase.IsActive ControlBase.Mode ControlBase.TypeId ControlBase.TypeName ControlBase.Logger(LoggerType) ControlBase.Initialize(String, String, String, String) ControlBase.Configure(Object) ControlBase.ConfigureAndTrigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) ControlBase.WriteToLog(Boolean, Object, Observable, IReadOnlyApplication, String, Boolean) ControlBase.GetPlayerForLogEntity(Object, IReadOnlyApplication) Namespace : Controls Assembly : Controls.dll Syntax public class DNSBlacklistControl : ControlBase Properties Blacklist Declaration public List<dynamic> Blacklist { get; } Property Value List < System.Object > Methods Reconfigure(Object) Declaration protected override void Reconfigure(dynamic controlEntity) Parameters System.Object controlEntity Overrides ControlBase.Reconfigure(Object) Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) Declaration protected override ControlOutput Trigger(dynamic entity, Observable observable, IReadOnlyApplication application, double? rand = null) Parameters System.Object entity Observable observable IReadOnlyApplication application System.Nullable < System.Double > rand Returns ControlOutput Overrides ControlBase.Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Controls.FirewallControl.html": {
    "href": "api/Controls.FirewallControl.html",
    "title": "Class FirewallControl | Cyber Conflict Simulator",
    "keywords": "Class FirewallControl Inheritance System.Object ControlBase FirewallControl Inherited Members ControlBase.ResidingObjectId ControlBase.Name ControlBase.IsActive ControlBase.Mode ControlBase.TypeId ControlBase.TypeName ControlBase.Logger(LoggerType) ControlBase.Initialize(String, String, String, String) ControlBase.Configure(Object) ControlBase.ConfigureAndTrigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) ControlBase.WriteToLog(Boolean, Object, Observable, IReadOnlyApplication, String, Boolean) ControlBase.GetPlayerForLogEntity(Object, IReadOnlyApplication) Namespace : Controls Assembly : Controls.dll Syntax public class FirewallControl : ControlBase Properties Rules Declaration public List<dynamic> Rules { get; } Property Value List < System.Object > Methods Reconfigure(Object) Declaration protected override void Reconfigure(dynamic inputBlock) Parameters System.Object inputBlock Overrides ControlBase.Reconfigure(Object) Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) Firewall control passes package only if source and destination communicate with desired protocol. If none of Firewall rules are satisfied, package is blocked. Declaration protected override ControlOutput Trigger(dynamic entity, Observable observable, IReadOnlyApplication application, double? _) Parameters System.Object entity Observable observable IReadOnlyApplication application System.Nullable < System.Double > _ Returns ControlOutput Overrides ControlBase.Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Controls.html": {
    "href": "api/Controls.html",
    "title": "Namespace Controls | Cyber Conflict Simulator",
    "keywords": "Namespace Controls Classes AAAControl AntiSpamControl AVControl BlockControl ControlHelpers Controls DNSBlacklistControl DNSBlacklist control blocks traffic to webApplications that are located on domains that are listed on the control's blacklist FirewallControl NIPSControl SecurityAwarenessControl WBListingControl WebProxyControl Web proxy control that blacklists urls given in the control's cofiguration"
  },
  "api/Controls.NIPSControl.html": {
    "href": "api/Controls.NIPSControl.html",
    "title": "Class NIPSControl | Cyber Conflict Simulator",
    "keywords": "Class NIPSControl Inheritance System.Object ControlBase NIPSControl Inherited Members ControlBase.ResidingObjectId ControlBase.Name ControlBase.IsActive ControlBase.Mode ControlBase.TypeId ControlBase.TypeName ControlBase.Logger(LoggerType) ControlBase.Initialize(String, String, String, String) ControlBase.Configure(Object) ControlBase.ConfigureAndTrigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) ControlBase.WriteToLog(Boolean, Object, Observable, IReadOnlyApplication, String, Boolean) ControlBase.GetPlayerForLogEntity(Object, IReadOnlyApplication) Namespace : Controls Assembly : Controls.dll Syntax public class NIPSControl : ControlBase Properties Blacklist Declaration public List<dynamic> Blacklist { get; } Property Value List < System.Object > CanReadEncryptedTraffic Declaration public bool CanReadEncryptedTraffic { get; } Property Value System.Boolean EncryptedProtocols Declaration public IReadOnlyList<string> EncryptedProtocols { get; } Property Value IReadOnlyList < System.String > ExploitSignatures Declaration public List<dynamic> ExploitSignatures { get; } Property Value List < System.Object > MalwareSignatures Declaration public List<dynamic> MalwareSignatures { get; } Property Value List < System.Object > QuantityThreshold Declaration public int QuantityThreshold { get; } Property Value System.Int32 Tailored Declaration public bool Tailored { get; } Property Value System.Boolean Updates Declaration public dynamic Updates { get; } Property Value System.Object Methods Reconfigure(Object) Declaration protected override void Reconfigure(dynamic controlEntity) Parameters System.Object controlEntity Overrides ControlBase.Reconfigure(Object) Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) Declaration protected override ControlOutput Trigger(dynamic entity, Observable observable, IReadOnlyApplication application, double? random = null) Parameters System.Object entity Observable observable IReadOnlyApplication application System.Nullable < System.Double > random Returns ControlOutput Overrides ControlBase.Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Controls.SecurityAwarenessControl.html": {
    "href": "api/Controls.SecurityAwarenessControl.html",
    "title": "Class SecurityAwarenessControl | Cyber Conflict Simulator",
    "keywords": "Class SecurityAwarenessControl Inheritance System.Object ControlBase SecurityAwarenessControl Inherited Members ControlBase.ResidingObjectId ControlBase.Name ControlBase.IsActive ControlBase.Mode ControlBase.TypeId ControlBase.TypeName ControlBase.Logger(LoggerType) ControlBase.Initialize(String, String, String, String) ControlBase.Configure(Object) ControlBase.ConfigureAndTrigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) ControlBase.WriteToLog(Boolean, Object, Observable, IReadOnlyApplication, String, Boolean) ControlBase.GetPlayerForLogEntity(Object, IReadOnlyApplication) Namespace : Controls Assembly : Controls.dll Syntax public class SecurityAwarenessControl : ControlBase Properties Awareness Declaration public double Awareness { get; } Property Value System.Double Methods Reconfigure(Object) Declaration protected override void Reconfigure(dynamic controlEntity) Parameters System.Object controlEntity Overrides ControlBase.Reconfigure(Object) Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) Security awareness control implements persons awareness of malicious payload. -Currently only for mail- Control is blocking with probability actor_awareness * (1 - mail_complexity) Declaration protected override ControlOutput Trigger(dynamic entity, Observable observable, IReadOnlyApplication application, double? rand = null) Parameters System.Object entity Observable observable IReadOnlyApplication application System.Nullable < System.Double > rand Returns ControlOutput Overrides ControlBase.Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Controls.WBListingControl.html": {
    "href": "api/Controls.WBListingControl.html",
    "title": "Class WBListingControl | Cyber Conflict Simulator",
    "keywords": "Class WBListingControl Inheritance System.Object ControlBase WBListingControl Inherited Members ControlBase.ResidingObjectId ControlBase.Name ControlBase.IsActive ControlBase.Mode ControlBase.TypeId ControlBase.TypeName ControlBase.Logger(LoggerType) ControlBase.Initialize(String, String, String, String) ControlBase.Configure(Object) ControlBase.ConfigureAndTrigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) ControlBase.WriteToLog(Boolean, Object, Observable, IReadOnlyApplication, String, Boolean) ControlBase.GetPlayerForLogEntity(Object, IReadOnlyApplication) Namespace : Controls Assembly : Controls.dll Syntax public class WBListingControl : ControlBase Properties BLEffectiveness Declaration public double BLEffectiveness { get; } Property Value System.Double WBListing Declaration public string WBListing { get; } Property Value System.String WLEffectiveness Declaration public double WLEffectiveness { get; } Property Value System.Double Methods Reconfigure(Object) Declaration protected override void Reconfigure(dynamic controlEntity) Parameters System.Object controlEntity Overrides ControlBase.Reconfigure(Object) Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) ApplicationWBListing checks if software is black/white listed on machine. Default probabilites for blocking for AWBListing control: whitelistingProbability: 0.97 blacklistingProbability: 0.05 Declaration protected override ControlOutput Trigger(dynamic entity, Observable observable, IReadOnlyApplication application, double? random = null) Parameters System.Object entity Observable observable IReadOnlyApplication application System.Nullable < System.Double > random Returns ControlOutput Overrides ControlBase.Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Controls.WebProxyControl.html": {
    "href": "api/Controls.WebProxyControl.html",
    "title": "Class WebProxyControl | Cyber Conflict Simulator",
    "keywords": "Class WebProxyControl Web proxy control that blacklists urls given in the control's cofiguration Inheritance System.Object ControlBase WebProxyControl Inherited Members ControlBase.ResidingObjectId ControlBase.Name ControlBase.IsActive ControlBase.Mode ControlBase.TypeId ControlBase.TypeName ControlBase.Logger(LoggerType) ControlBase.Initialize(String, String, String, String) ControlBase.Configure(Object) ControlBase.ConfigureAndTrigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) ControlBase.WriteToLog(Boolean, Object, Observable, IReadOnlyApplication, String, Boolean) ControlBase.GetPlayerForLogEntity(Object, IReadOnlyApplication) Namespace : Controls Assembly : Controls.dll Syntax public class WebProxyControl : ControlBase Properties Blacklist Declaration public List<dynamic> Blacklist { get; } Property Value List < System.Object > Methods Reconfigure(Object) Declaration protected override void Reconfigure(dynamic controlEntity) Parameters System.Object controlEntity Overrides ControlBase.Reconfigure(Object) Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) Declaration protected override ControlOutput Trigger(dynamic entity, Observable observable, IReadOnlyApplication application, double? rand = null) Parameters System.Object entity Observable observable IReadOnlyApplication application System.Nullable < System.Double > rand Returns ControlOutput Overrides ControlBase.Trigger(Object, Observable, IReadOnlyApplication, Nullable<Double>) Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/MethodContainers.ExpressionHelpers.html": {
    "href": "api/MethodContainers.ExpressionHelpers.html",
    "title": "Class ExpressionHelpers | Cyber Conflict Simulator",
    "keywords": "Class ExpressionHelpers Inheritance System.Object ExpressionHelpers Namespace : MethodContainers Assembly : CommonInterfaces.dll Syntax public static class ExpressionHelpers : object Methods Accumulator(Double, Double, Double) Accumulated sum Declaration public static double Accumulator(double accumulated, double val, double deltaT) Parameters System.Double accumulated Value to add to System.Double val Value to be added per second System.Double deltaT Time delta, in seconds Returns System.Double ActorCanCommandSoftwareOnGlobal(String, String) Used from config with string. Evaluated on global landscape. Declaration public static bool ActorCanCommandSoftwareOnGlobal(string actorId, string softwareId) Parameters System.String actorId System.String softwareId Returns System.Boolean DatetimeToSimulationTime(String) Converts the given standard datetime string into simulation time of the current simulation (in seconds). Declaration public static double DatetimeToSimulationTime(string datetime) Parameters System.String datetime Returns System.Double DHMToSeconds(Int32, Int32, Int32) Converts the given day, hour and minute offset into seconds. Declaration public static double DHMToSeconds(int day, int hour, int minute) Parameters System.Int32 day System.Int32 hour System.Int32 minute Returns System.Double GetAttributeOfObject(Object, String) Method used to access attributes with given path of object o Declaration public static object GetAttributeOfObject(dynamic o, string path) Parameters System.Object o System.String path Returns System.Object GetControllerParameterValue(Object, String) Get value for parameter with name paramName on given controller Declaration public static double GetControllerParameterValue(dynamic controller, string paramName) Parameters System.Object controller System.String paramName Returns System.Double PathExistsBetweenNodes(Object, Object, Double) Declaration public static bool PathExistsBetweenNodes(dynamic node1, dynamic node2, double time) Parameters System.Object node1 System.Object node2 System.Double time Returns System.Boolean PublishEventOrNews(String) Publishes an event from shared objects. Flag \"visible\" is set to true and reputation of organizations affected by event or news is adjusted. If parameter contains label \"news\" this method looks for existing press releases regarding the event the parameter is refering to. If such a press release exists, impact of the news for the organization that published it is adjusted before publishing. Declaration public static bool PublishEventOrNews(string eventOrNewsId) Parameters System.String eventOrNewsId Id of the event or news object in the shared objects that is triggered by an expression Returns System.Boolean true if action is successful, false otherwise RoundVal(Double, Int32) Round value to given number of decimals Declaration public static double RoundVal(double value, int decimals) Parameters System.Double value System.Int32 decimals Returns System.Double TriggerInject(String, String) Triggers an Inject message to the specified player. Declaration public static bool TriggerInject(string playerId, string message) Parameters System.String playerId Id of the target player System.String message The message to be displayed Returns System.Boolean"
  },
  "api/MethodContainers.html": {
    "href": "api/MethodContainers.html",
    "title": "Namespace MethodContainers | Cyber Conflict Simulator",
    "keywords": "Namespace MethodContainers Classes ExpressionHelpers LandscapeCheckers Hold checker functions for landscape. Every method has public and private variant. Public methods are used to define types of arguments and can be used in code at will. Private functions are not to be used in code and are used only to be wrapped in other methods. Conditions in json config call private methods defined here with signature defined in it's public method. MethodContainer Class used for creating generic methods from every static class in CommonInterfaces.MethodContainers namespace. Newly created methods call original methods but with object array as input parameter. Generic methods are called by config files."
  },
  "api/MethodContainers.LandscapeCheckers.html": {
    "href": "api/MethodContainers.LandscapeCheckers.html",
    "title": "Class LandscapeCheckers | Cyber Conflict Simulator",
    "keywords": "Class LandscapeCheckers Hold checker functions for landscape. Every method has public and private variant. Public methods are used to define types of arguments and can be used in code at will. Private functions are not to be used in code and are used only to be wrapped in other methods. Conditions in json config call private methods defined here with signature defined in it's public method. Inheritance System.Object LandscapeCheckers Namespace : MethodContainers Assembly : CCSPluginAPI.dll Syntax public static class LandscapeCheckers : object Fields Cache Declaration public static ConcurrentDictionary<string, bool> Cache Field Value ConcurrentDictionary < System.String , System.Boolean > UseCache Declaration public static volatile bool UseCache Field Value System.Boolean Methods ActorCanCommandSoftware(Object, Object) Check if actor controls remote software. Software must be running. Declaration public static bool ActorCanCommandSoftware(dynamic actor, dynamic software) Parameters System.Object actor System.Object software Returns System.Boolean Boolean indicating command capability ActorCanModifyControllerRemotely(ILandscape, Object, Object, Object) Declaration public static bool ActorCanModifyControllerRemotely(ILandscape landscape, dynamic actor, dynamic scada, dynamic controller) Parameters ILandscape landscape System.Object actor System.Object scada System.Object controller Returns System.Boolean ActorContainsAsset(Object, Object) Checks if actor contains asset in his assets collection Declaration public static bool ActorContainsAsset(dynamic actor, dynamic asset) Parameters System.Object actor System.Object asset Returns System.Boolean ActorControlsSoftware(Object, Object) Check if actor is set to control software. Declaration public static bool ActorControlsSoftware(dynamic actor, dynamic software) Parameters System.Object actor System.Object software Returns System.Boolean Boolean indicating if actor is set to control software ActorHasAccessTo(ILandscape, Object, Object, String) Check if actor has access to target machine's OS under given privilege. Declaration public static bool ActorHasAccessTo(ILandscape landscape, dynamic actor, dynamic target, string privilege = \"user\") Parameters ILandscape landscape System.Object actor System.Object target System.String privilege Returns System.Boolean Boolean indicating access ActorHasSkill(Object, String) Does actor have skill of type skill Declaration public static bool ActorHasSkill(dynamic actor, string skill) Parameters System.Object actor System.String skill Returns System.Boolean ActorWorksOnMachineWithFile(ILandscape, Object, Object) Declaration public static bool ActorWorksOnMachineWithFile(ILandscape landscape, dynamic actor, dynamic file) Parameters ILandscape landscape System.Object actor System.Object file Returns System.Boolean CheckAttributeRange(Object, String, String) Checks if object contains attribute and attribute is in range range (i.e 0-1 range) Declaration public static bool CheckAttributeRange(dynamic entity, string key, string range = \"0-1\") Parameters System.Object entity System.String key System.String range Returns System.Boolean CheckAttributeValue(Object, String, Object) Checks if object contains attribute and attribute is set to value Declaration public static bool CheckAttributeValue(dynamic entity, string key, dynamic value) Parameters System.Object entity DynamicDictionary object System.String key System.Object value Returns System.Boolean CheckFunctionalityAttribute(Object, String, String, Object) Checks if object's functionalites collection conatains key-value pair Declaration public static bool CheckFunctionalityAttribute(dynamic entity, string functionalityName, string attributeName, dynamic attributeValue) Parameters System.Object entity System.String functionalityName System.String attributeName System.Object attributeValue Returns System.Boolean CollectionContains(IEnumerable, Object) Checks if collection contains value Declaration public static bool CollectionContains(IEnumerable collection, dynamic value) Parameters IEnumerable collection System.Object value Returns System.Boolean EqualsPlayerId(IPlayer, String) Checks whether a given string equals the given player's Id Declaration public static bool EqualsPlayerId(IPlayer player, string toCheck) Parameters IPlayer player System.String toCheck Returns System.Boolean GroupObjectContainsEntity(Object, String) Does the group contain the object with the given resource id Declaration public static bool GroupObjectContainsEntity(dynamic groupEntity, string resourceID) Parameters System.Object groupEntity System.String resourceID Returns System.Boolean HaveContractOfType(IPlayer, ILandscape, Object, String) Declaration public static bool HaveContractOfType(IPlayer player, ILandscape landscape, dynamic organization, string contractType) Parameters IPlayer player ILandscape landscape System.Object organization System.String contractType Returns System.Boolean IsActorInTargetPhysicalZone(ILandscape, Object, Object) Checks if actor is in same physical zone as the target object. If the target has no physical_zone attribute returns false Declaration public static bool IsActorInTargetPhysicalZone(ILandscape landscape, dynamic actor, dynamic target) Parameters ILandscape landscape System.Object actor System.Object target Returns System.Boolean IsClientLoggedInTo(Object, Object, String) Checks if given client (os or software) is logged in under given privileges Declaration public static bool IsClientLoggedInTo(dynamic client, dynamic target, string privilege = \"user\") Parameters System.Object client System.Object target System.String privilege Returns System.Boolean IsDataInContainer(Object, Object) Checks if data is in data container Declaration public static bool IsDataInContainer(dynamic data, dynamic data_container) Parameters System.Object data System.Object data_container Returns System.Boolean True if data is in data container IsEqual(Object, Object) Are two objects equal. Declaration public static bool IsEqual(dynamic o1, dynamic o2) Parameters System.Object o1 System.Object o2 Returns System.Boolean IsFileAvailableForOrganization(Object, Object) Checks if all encryption keys used to encrypt file are available to given organizations Declaration public static bool IsFileAvailableForOrganization(dynamic file, dynamic organization) Parameters System.Object file System.Object organization Returns System.Boolean IsFileLocatedOnMachine(ILandscape, Object, Object) Checks if file is in file system that is located on the machine Declaration public static bool IsFileLocatedOnMachine(ILandscape landscape, dynamic file, dynamic machine) Parameters ILandscape landscape System.Object file System.Object machine Returns System.Boolean IsFunctionalityOn(Object, String) Checks if the given functionality is active on a given entity Declaration public static bool IsFunctionalityOn(dynamic entity, string functionalityName) Parameters System.Object entity System.String functionalityName Returns System.Boolean IsMachineConnectedToAnyNetwork(ILandscape, Object) Checks if target machine is connected to any trust zone on a given landscape Declaration public static bool IsMachineConnectedToAnyNetwork(ILandscape landscape, dynamic target) Parameters ILandscape landscape System.Object target Returns System.Boolean IsObjectFromPlayerOrganization(IPlayer, Object) Declaration public static bool IsObjectFromPlayerOrganization(IPlayer player, dynamic obj) Parameters IPlayer player System.Object obj Returns System.Boolean IsOrganizationAffectedByNewsOrEvent(String, Object) Checks if given organization Id is included in the list of organizations the given NewsOrEvent impacts. Checker also works if \"NewsOrEvent\" is of type \"event\" Declaration public static bool IsOrganizationAffectedByNewsOrEvent(string organizationId, dynamic NewsOrEvent) Parameters System.String organizationId System.Object NewsOrEvent Returns System.Boolean True if the given NewsOrEvent impacts the given organization IsSoftwareLocallyLoggedIn(ILandscape, Object) Checks if targeted software entity has an os entity logged in (coresponding with local login functionality) Declaration public static bool IsSoftwareLocallyLoggedIn(ILandscape landscape, dynamic target) Parameters ILandscape landscape System.Object target Returns System.Boolean true if software is localy logged into the host os, false otherwise IsSoftwareOrOSVulnerableForExploit(Object, Object) Checks if given software's version and patch date make it vulnerable for given exploit Declaration public static bool IsSoftwareOrOSVulnerableForExploit(dynamic target, dynamic exploit) Parameters System.Object target System.Object exploit Returns System.Boolean IsWebApplicationInfected(Object, Object) Checks if a web application is infected with a specified malware. Declaration public static bool IsWebApplicationInfected(dynamic web_application, dynamic malicious_file = null) Parameters System.Object web_application Web application to be inspected. System.Object malicious_file Malicious file to be inspected. If not specified, reports any malicious file infection of the website. Returns System.Boolean MachineHasAnyFilesystem(ILandscape, Object) Declaration public static bool MachineHasAnyFilesystem(ILandscape landscape, dynamic machine) Parameters ILandscape landscape System.Object machine Returns System.Boolean MachineHasTools(Object, String) Does machine have tools of type tools Declaration public static bool MachineHasTools(dynamic machine, string tools) Parameters System.Object machine System.String tools Returns System.Boolean ObjectHasAnyControlOfType(ILandscape, Object, String) Declaration public static bool ObjectHasAnyControlOfType(ILandscape landscape, dynamic entity, string controlType) Parameters ILandscape landscape System.Object entity System.String controlType Returns System.Boolean ObjectHasAttribute(Object, String) Checks if object has attribute Declaration public static bool ObjectHasAttribute(dynamic entity, string atr) Parameters System.Object entity System.String atr Returns System.Boolean ObjectHasControlNamed(Object, String) Checks whether the object has a control of any type with the given name. Declaration public static bool ObjectHasControlNamed(dynamic entity, string controlName) Parameters System.Object entity System.String controlName Returns System.Boolean ObjectHasControlOfType(Object, String) Does object contain any control of given type Declaration public static bool ObjectHasControlOfType(dynamic entity, string controlType) Parameters System.Object entity System.String controlType Returns System.Boolean Bool indicating whether controls of given type exist ObjectHasControlOfTypeInLandscape(ILandscape, Object, String) Does the object itself, its groups, or its organization contain the control of given type Declaration public static bool ObjectHasControlOfTypeInLandscape(ILandscape landscape, dynamic entity, string controlType) Parameters ILandscape landscape System.Object entity System.String controlType Returns System.Boolean ObjectHasFunctionality(Object, String) Checks if the given entity contains a functionality of the given type (according to functionality's labels). Declaration public static bool ObjectHasFunctionality(dynamic entity, string functionalityName) Parameters System.Object entity System.String functionalityName Returns System.Boolean ObjectHasGroupControlOfType(ILandscape, Object, String) Does any of the groups associated with the given object contains control of given type Declaration public static bool ObjectHasGroupControlOfType(ILandscape landscape, dynamic entity, string controlType) Parameters ILandscape landscape System.Object entity System.String controlType Returns System.Boolean Bool indicating whether the groups assigned to the object contain control of given type ObjectHasLabel(Object, String) Checks if object has label. Declaration public static bool ObjectHasLabel(dynamic entity, string label) Parameters System.Object entity System.String label Returns System.Boolean ObjectHasOrganizationControlOfType(ILandscape, Object, String) Does the organization associated with the given object contain control of given type Declaration public static bool ObjectHasOrganizationControlOfType(ILandscape landscape, dynamic entity, string controlType) Parameters ILandscape landscape System.Object entity System.String controlType Returns System.Boolean Bool indicating whether the organization assigned to the object contains control of given type RansomwareAttacksFile(Object) Checks if ransomware is intended to be used on individual files Declaration public static bool RansomwareAttacksFile(dynamic ransomware) Parameters System.Object ransomware Returns System.Boolean RansomwareAttacksFileSystem(Object) Checks if ransomware is intended to be used on file systems Declaration public static bool RansomwareAttacksFileSystem(dynamic ransomware) Parameters System.Object ransomware Returns System.Boolean VPNClientTZReady(ILandscape, Object, Object) Determines whether the given VPN client is able to login to the VPN server tied to the given trust zone. If no VPN server is found, the connection is considered valid due to possibility of player not knowing about the server. Declaration public static bool VPNClientTZReady(ILandscape landscape, dynamic client, dynamic trustZone) Parameters ILandscape landscape System.Object client System.Object trustZone Returns System.Boolean"
  },
  "api/MethodContainers.MethodContainer.html": {
    "href": "api/MethodContainers.MethodContainer.html",
    "title": "Class MethodContainer | Cyber Conflict Simulator",
    "keywords": "Class MethodContainer Class used for creating generic methods from every static class in CommonInterfaces.MethodContainers namespace. Newly created methods call original methods but with object array as input parameter. Generic methods are called by config files. Inheritance System.Object MethodContainer Namespace : MethodContainers Assembly : CommonInterfaces.dll Syntax public static class MethodContainer : object Fields Methods Dict containing MethodInfo of original and it's generic implementation. Declaration public static IDictionary<string, (MethodInfo original, MethodInfo generic)> Methods Field Value IDictionary < System.String , System.ValueTuple < MethodInfo , MethodInfo >>"
  },
  "api/Utils.CCSExtensions.html": {
    "href": "api/Utils.CCSExtensions.html",
    "title": "Class CCSExtensions | Cyber Conflict Simulator",
    "keywords": "Class CCSExtensions Inheritance System.Object CCSExtensions Namespace : Utils Assembly : Utils.dll Syntax public static class CCSExtensions : object Methods Enumerate<T>(IList<T>, Int32, Int32) Enumerates the list from (zero based) startIndex to endIndex (inclusive). If the startIndex is larger than endIndex, the enumeration is done backwards. Ex. startIndex is 2, endIndex is 4: the method yields members of the original list located at indices 2, 3, 4. Declaration public static IEnumerable<(int index, T item)> Enumerate<T>(this IList<T> list, int startIndex, int endIndex) Parameters IList <T> list System.Int32 startIndex System.Int32 endIndex Returns IEnumerable < System.ValueTuple < System.Int32 , T>> Type Parameters T"
  },
  "api/Utils.Collections.ConcurrentList-1.html": {
    "href": "api/Utils.Collections.ConcurrentList-1.html",
    "title": "Class ConcurrentList<T> | Cyber Conflict Simulator",
    "keywords": "Class ConcurrentList<T> Implements thread-safe list collection. Inheritance System.Object ConcurrentList<T> Namespace : Utils.Collections Assembly : Utils.dll Syntax public class ConcurrentList<T> : IEnumerable<T>, ICollection<T>, IList<T> Type Parameters T Constructors ConcurrentList() Declaration public ConcurrentList() ConcurrentList(IEnumerable<T>) Declaration public ConcurrentList(IEnumerable<T> collection) Parameters IEnumerable <T> collection Properties Count Declaration public int Count { get; } Property Value System.Int32 IsReadOnly Declaration public bool IsReadOnly { get; } Property Value System.Boolean Item[Int32] Declaration public T this[int index] { get; set; } Parameters System.Int32 index Property Value T Methods Add(T) Declaration public void Add(T item) Parameters T item Clear() Declaration public void Clear() Contains(T) Declaration public bool Contains(T value) Parameters T value Returns System.Boolean CopyTo(T[], Int32) Declaration public void CopyTo(T[] array, int arrayIndex) Parameters T[] array System.Int32 arrayIndex GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns IEnumerator <T> IndexOf(T) Declaration public int IndexOf(T item) Parameters T item Returns System.Int32 Insert(Int32, T) Declaration public void Insert(int index, T item) Parameters System.Int32 index T item Remove(T) Declaration public bool Remove(T item) Parameters T item Returns System.Boolean RemoveAll(Predicate<T>) Declaration public void RemoveAll(Predicate<T> match) Parameters Predicate <T> match RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters System.Int32 index Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Utils.Collections.ConcurrentPriorityQueue-1.html": {
    "href": "api/Utils.Collections.ConcurrentPriorityQueue-1.html",
    "title": "Class ConcurrentPriorityQueue<T> | Cyber Conflict Simulator",
    "keywords": "Class ConcurrentPriorityQueue<T> A Priority Queue enables O(1) retrieval of the first element, according to a given comparison. Being concurrent, it allows multiple threads to use it at the same time. Inheritance System.Object ConcurrentPriorityQueue<T> Namespace : Utils.Collections Assembly : Utils.dll Syntax public class ConcurrentPriorityQueue<T> : IEnumerable<T>, ICollection<T> Type Parameters T Constructors ConcurrentPriorityQueue(Comparison<T>) Returns a new instance of the ConcurrentPriorityQueue<T> which uses the given comparison as the method of sorting. Declaration public ConcurrentPriorityQueue(Comparison<T> comparison) Parameters Comparison <T> comparison A , determining a way to compare two objects of type T . Properties Count Declaration public int Count { get; } Property Value System.Int32 IsReadOnly Declaration public bool IsReadOnly { get; } Property Value System.Boolean Item[Int32] Declaration public T this[int index] { get; } Parameters System.Int32 index Property Value T Methods Add(T) Declaration public void Add(T item) Parameters T item Clear() Declaration public void Clear() Contains(T) Declaration public bool Contains(T value) Parameters T value Returns System.Boolean CopyTo(T[], Int32) Declaration public void CopyTo(T[] array, int arrayIndex) Parameters T[] array System.Int32 arrayIndex GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns IEnumerator <T> Peek() Returns the first element of the ConcurrentPriorityQueue<T> , without removing it. Declaration public T Peek() Returns T Pop() Removes the first element from the ConcurrentPriorityQueue<T> and returns it. Declaration public T Pop() Returns T Remove(T) Declaration public bool Remove(T item) Parameters T item Returns System.Boolean RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters System.Int32 index Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Utils.Collections.DynamicDictionary.html": {
    "href": "api/Utils.Collections.DynamicDictionary.html",
    "title": "Class DynamicDictionary | Cyber Conflict Simulator",
    "keywords": "Class DynamicDictionary Class used to represent every object on CL. Inheritance System.Object DynamicDictionary Namespace : Utils.Collections Assembly : Utils.dll Syntax public class DynamicDictionary : DynamicObject, IEnumerable, IDictionary<string, object> Constructors DynamicDictionary() Declaration public DynamicDictionary() DynamicDictionary(IDictionary<String, Object>, Boolean) Declaration public DynamicDictionary(IDictionary<string, object> entity, bool caseSensitive = false) Parameters IDictionary < System.String , System.Object > entity System.Boolean caseSensitive DynamicDictionary(Boolean) Declaration public DynamicDictionary(bool caseSensitive = false) Parameters System.Boolean caseSensitive Properties Count Declaration public int Count { get; } Property Value System.Int32 IsReadOnly Declaration public bool IsReadOnly { get; } Property Value System.Boolean Item[String] Declaration public object this[string key] { get; set; } Parameters System.String key Property Value System.Object Keys Declaration public ICollection<string> Keys { get; } Property Value ICollection < System.String > Values Declaration public ICollection<object> Values { get; } Property Value ICollection < System.Object > Methods Add(IDictionary<String, Object>) Add collection of properties to object Declaration public void Add(IDictionary<string, object> propertyCollection) Parameters IDictionary < System.String , System.Object > propertyCollection Add(KeyValuePair<String, Object>) Add KeyValuePair to object Declaration public void Add(KeyValuePair<string, object> o) Parameters KeyValuePair < System.String , System.Object > o Add(String, Object) Add new property to object with name=key and value=value Declaration public void Add(string key, object value) Parameters System.String key System.Object value Clear() Clear object. Declaration public void Clear() Contains(KeyValuePair<String, Object>) Check if object contains an item. Declaration public bool Contains(KeyValuePair<string, object> item) Parameters KeyValuePair < System.String , System.Object > item Returns System.Boolean Contains(String, Object) Check if object contains an item. Declaration public bool Contains(string key, object value) Parameters System.String key System.Object value Returns System.Boolean ContainsKey(String) Declaration public bool ContainsKey(string key) Parameters System.String key Returns System.Boolean CopyTo(KeyValuePair<String, Object>[], Int32) Not implemented. Declaration public void CopyTo(KeyValuePair<string, object>[] array, int arrayIndex) Parameters KeyValuePair < System.String , System.Object >[] array System.Int32 arrayIndex Get(Object[]) Retrieve a property (of any type) using the given operations. Operations can be attribute names (string) or queries (Func(dynamic, bool)) which are executed in order. Attribute names are used as keys to the dictionary. Queries are used for filtering lists. Declaration public dynamic Get(params object[] operations) Parameters System.Object [] operations Operation list Returns System.Object GetCaseInsensitive(String) Declaration public dynamic GetCaseInsensitive(string key) Parameters System.String key Returns System.Object GetEnumerator() Get enumerator of object. Declaration public IEnumerator GetEnumerator() Returns IEnumerator IsCaseSensitive() Checks if the dictionary is case sensitive Declaration public bool IsCaseSensitive() Returns System.Boolean IsNullOrEmpty(Object) Returns true if the given object is null or if it's a DynamicDictionary and empty. If it's not a DynamicDictionary , throws an exception. Declaration public static bool IsNullOrEmpty(object obj) Parameters System.Object obj Returns System.Boolean Remove(KeyValuePair<String, Object>) Remove property from object. Declaration public bool Remove(KeyValuePair<string, object> item) Parameters KeyValuePair < System.String , System.Object > item Returns System.Boolean Remove(String) Remove property with given key from object. Declaration public bool Remove(string key) Parameters System.String key Returns System.Boolean Set(String, Object, Object[]) Set an attribute (of any type) to the given value, using the given operations. Operations can be attribute names (string) or queries (Func(dynamic, bool)) which are executed in order. Attribute names are used as keys to the dictionary. Queries are used for filtering lists. Declaration public void Set(string attributeName, object value, params object[] operations) Parameters System.String attributeName Name of the attribute to be set System.Object value Value which the attribute will be set to System.Object [] operations Operation list ToString() Declaration public override string ToString() Returns System.String TryGetMember(GetMemberBinder, out Object) Get property by . operator Declaration public override bool TryGetMember(GetMemberBinder binder, out object result) Parameters GetMemberBinder binder System.Object result Returns System.Boolean TryGetValue(String, out Object) Try to get value from object. Declaration public bool TryGetValue(string key, out object value) Parameters System.String key System.Object value Returns System.Boolean TrySetMember(SetMemberBinder, Object) Set property by . operator Declaration public override bool TrySetMember(SetMemberBinder binder, object value) Parameters SetMemberBinder binder System.Object value Returns System.Boolean Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Utils.Collections.GraphBase-1.GetSuccessors.html": {
    "href": "api/Utils.Collections.GraphBase-1.GetSuccessors.html",
    "title": "Delegate GraphBase<T>.GetSuccessors | Cyber Conflict Simulator",
    "keywords": "Delegate GraphBase<T>.GetSuccessors Returns a list of successors for the given node, taking into account the path it's part of. Each successor tuple consists of the node and the corresponding heuristic (estimated future weight penalty). Namespace : Utils.Collections Assembly : Utils.dll Syntax protected delegate List<(T, int)> GetSuccessors(string nodeId, List<string> path); Parameters System.String nodeId List < System.String > path Returns List < System.ValueTuple <T, System.Int32 >> Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Utils.Collections.GraphBase-1.html": {
    "href": "api/Utils.Collections.GraphBase-1.html",
    "title": "Class GraphBase<T> | Cyber Conflict Simulator",
    "keywords": "Class GraphBase<T> Abstract Graph class with basic FindShortestPath implementation. Inheritance System.Object GraphBase<T> Namespace : Utils.Collections Assembly : Utils.dll Syntax public abstract class GraphBase<T> : object where T : Node Type Parameters T Constructors GraphBase(Int32, Boolean) Sets usage parameters for the Graph search Declaration protected GraphBase(int maxPathLength, bool onlyUseActive = false) Parameters System.Int32 maxPathLength Allowed length of path before it is discarded System.Boolean onlyUseActive If true, the FindShortestPath method will ignore nodes with Active set to false. Properties Graph Declaration protected abstract Dictionary<string, T> Graph { get; } Property Value Dictionary < System.String , T> Methods FindShortestPath(String, String, GraphBase<T>.GetSuccessors) Declaration protected List<T> FindShortestPath(string startId, string endId, GraphBase<T>.GetSuccessors getSuccessors) Parameters System.String startId System.String endId GraphBase.GetSuccessors <> getSuccessors Returns List <T> Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Utils.Collections.html": {
    "href": "api/Utils.Collections.html",
    "title": "Namespace Utils.Collections | Cyber Conflict Simulator",
    "keywords": "Namespace Utils.Collections Classes ConcurrentList<T> Implements thread-safe list collection. ConcurrentPriorityQueue<T> A Priority Queue enables O(1) retrieval of the first element, according to a given comparison. Being concurrent, it allows multiple threads to use it at the same time. DynamicDictionary Class used to represent every object on CL. GraphBase<T> Abstract Graph class with basic FindShortestPath implementation. Matrix<T> Node Base class for Nodes intended for use in GraphBase<T> pathfinding. PriorityQueue<T> A Priority Queue enables O(1) retrieval of the first element, according to a given comparison. Delegates GraphBase<T>.GetSuccessors Returns a list of successors for the given node, taking into account the path it's part of. Each successor tuple consists of the node and the corresponding heuristic (estimated future weight penalty)."
  },
  "api/Utils.Collections.Matrix-1.html": {
    "href": "api/Utils.Collections.Matrix-1.html",
    "title": "Class Matrix<T> | Cyber Conflict Simulator",
    "keywords": "Class Matrix<T> Inheritance System.Object Matrix<T> Namespace : Utils.Collections Assembly : Utils.dll Syntax public class Matrix<T> : object Type Parameters T Constructors Matrix(Int32, Int32) Declaration public Matrix(int numRows, int numCols) Parameters System.Int32 numRows System.Int32 numCols Properties Item[Int32, Int32] Declaration public T this[int row, int column] { get; set; } Parameters System.Int32 row System.Int32 column Property Value T NumColumns Number of columns in the matrix Declaration public int NumColumns { get; } Property Value System.Int32 NumRows Number of rows in the matrix Declaration public int NumRows { get; } Property Value System.Int32 Methods Expand(Int32, Int32) Expands the matrix by given number of rows and columns. Declaration public void Expand(int numNewRows, int numNewCols) Parameters System.Int32 numNewRows System.Int32 numNewCols Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Utils.Collections.Node.html": {
    "href": "api/Utils.Collections.Node.html",
    "title": "Class Node | Cyber Conflict Simulator",
    "keywords": "Class Node Base class for Nodes intended for use in GraphBase<T> pathfinding. Inheritance System.Object Node Namespace : Utils.Collections Assembly : Utils.dll Syntax public abstract class Node : object Properties Id Unique identifier of the node Declaration public string Id { get; set; } Property Value System.String IsActive Indicates whether or not a node is active - if onlyUseActive is set through graph instantiation, nodes can be disabled (excluded from pathfinding) by setting Active to false Declaration public bool IsActive { get; set; } Property Value System.Boolean Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Utils.Collections.PriorityQueue-1.html": {
    "href": "api/Utils.Collections.PriorityQueue-1.html",
    "title": "Class PriorityQueue<T> | Cyber Conflict Simulator",
    "keywords": "Class PriorityQueue<T> A Priority Queue enables O(1) retrieval of the first element, according to a given comparison. Inheritance System.Object PriorityQueue<T> Namespace : Utils.Collections Assembly : Utils.dll Syntax public class PriorityQueue<T> : IEnumerable<T>, ICollection<T> Type Parameters T Constructors PriorityQueue(Comparison<T>) Returns a new instance of the PriorityQueue<T> which uses the given comparison as the method of sorting. Declaration public PriorityQueue(Comparison<T> comparison) Parameters Comparison <T> comparison A , determining a way to compare two objects of type T . Properties Count Declaration public int Count { get; } Property Value System.Int32 IsReadOnly Declaration public bool IsReadOnly { get; } Property Value System.Boolean Item[Int32] Declaration public T this[int index] { get; } Parameters System.Int32 index Property Value T Methods Add(T) Declaration public void Add(T item) Parameters T item Clear() Declaration public void Clear() Contains(T) Declaration public bool Contains(T value) Parameters T value Returns System.Boolean CopyTo(T[], Int32) Declaration public void CopyTo(T[] array, int arrayIndex) Parameters T[] array System.Int32 arrayIndex GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns IEnumerator <T> Peek() Returns the first element of the PriorityQueue<T> , without removing it. Declaration public T Peek() Returns T Pop() Removes the first element from the PriorityQueue<T> and returns it. Declaration public T Pop() Returns T Remove(T) Declaration public bool Remove(T item) Parameters T item Returns System.Boolean RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters System.Int32 index Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Utils.EqualityComparer.html": {
    "href": "api/Utils.EqualityComparer.html",
    "title": "Namespace Utils.EqualityComparer | Cyber Conflict Simulator",
    "keywords": "Namespace Utils.EqualityComparer Classes StringEqualityComparer<T>"
  },
  "api/Utils.EqualityComparer.StringEqualityComparer-1.html": {
    "href": "api/Utils.EqualityComparer.StringEqualityComparer-1.html",
    "title": "Class StringEqualityComparer<T> | Cyber Conflict Simulator",
    "keywords": "Class StringEqualityComparer<T> Inheritance System.Object StringEqualityComparer<T> Namespace : Utils.EqualityComparer Assembly : Utils.dll Syntax public class StringEqualityComparer<T> : IEqualityComparer<T> Type Parameters T Methods Equals(T, T) Declaration public bool Equals(T first, T second) Parameters T first T second Returns System.Boolean GetHashCode(T) Declaration public int GetHashCode(T value) Parameters T value Returns System.Int32 Extension Methods Helpers.DeepCopy<T>(T) Helpers.DeepCopy(Object, Type)"
  },
  "api/Utils.Helpers.html": {
    "href": "api/Utils.Helpers.html",
    "title": "Class Helpers | Cyber Conflict Simulator",
    "keywords": "Class Helpers Inheritance System.Object Helpers Namespace : Utils Assembly : Utils.dll Syntax public static class Helpers : object Methods CreateDelegate(MethodInfo, Object) Creates delegate function from methodInfo Declaration public static Delegate CreateDelegate(MethodInfo methodInfo, object target = null) Parameters MethodInfo methodInfo System.Object target Returns Delegate DeepCopy(Object, Type) Declaration public static object DeepCopy(this object obj, Type t) Parameters System.Object obj Type t Returns System.Object DeepCopy<T>(T) Deepcopies given object. Declaration public static T DeepCopy<T>(this T obj) Parameters T obj Returns T Type Parameters T GenerateCombinations<T>(IEnumerable<IEnumerable<T>>) Declaration public static IEnumerable<IEnumerable<T>> GenerateCombinations<T>(IEnumerable<IEnumerable<T>> sequences) Parameters IEnumerable < IEnumerable <T>> sequences Returns IEnumerable < IEnumerable <T>> Type Parameters T GetAssemblyDirectory() Declaration public static DirectoryInfo GetAssemblyDirectory() Returns DirectoryInfo GetAssemblyPath() Gets the absolute path of the executing assembly Declaration public static string GetAssemblyPath() Returns System.String Absolute path GetDateTimeStamp() Declaration public static string GetDateTimeStamp() Returns System.String ReadJsonFileFromAssemblyPath(String) Reads a Json file into a DynamicDictionary object Declaration public static DynamicDictionary ReadJsonFileFromAssemblyPath(string relativeFilePath) Parameters System.String relativeFilePath Path to the file (including the file name) relative to the location of the assembly Returns DynamicDictionary DynamicDictionary of the Json data"
  },
  "api/Utils.html": {
    "href": "api/Utils.html",
    "title": "Namespace Utils | Cyber Conflict Simulator",
    "keywords": "Namespace Utils Classes CCSExtensions Helpers JsonSerializer Generic class implementing all serialization and deserialization required by the application. If not explicitly given, all JsonSerializer methods use default options which include:"
  },
  "api/Utils.JsonSerializer.html": {
    "href": "api/Utils.JsonSerializer.html",
    "title": "Class JsonSerializer | Cyber Conflict Simulator",
    "keywords": "Class JsonSerializer Generic class implementing all serialization and deserialization required by the application. If not explicitly given, all JsonSerializer methods use default options which include: Inheritance System.Object JsonSerializer Namespace : Utils Assembly : Utils.dll Syntax public static class JsonSerializer : object Properties Initialized Declaration public static bool Initialized { get; } Property Value System.Boolean Options Setter for options throws exception if Initialized is true Declaration public static JsonSerializerOptions Options { get; set; } Property Value JsonSerializerOptions Methods Deserialize(String, Type, JsonSerializerOptions) Generic method for json deserialization to given type Declaration public static object Deserialize(string objectJson, Type type, JsonSerializerOptions options = null) Parameters System.String objectJson Type type JsonSerializerOptions options Returns System.Object Deserialize<T>(String, JsonSerializerOptions) Generic method for json deserialization to given type Declaration public static T Deserialize<T>(string objectJson, JsonSerializerOptions options = null) where T : new() Parameters System.String objectJson JsonSerializerOptions options Returns T Type Parameters T Serialize(Object, JsonSerializerOptions) Generic method for json serialization. Extracts type from the given object. Declaration public static string Serialize(dynamic obj, JsonSerializerOptions options = null) Parameters System.Object obj JsonSerializerOptions options Returns System.String Serialize(Object, Type, JsonSerializerOptions) Generic method for json serialization from given type Declaration public static string Serialize(object obj, Type type, JsonSerializerOptions options = null) Parameters System.Object obj Type type JsonSerializerOptions options Returns System.String Serialize<T>(Object, JsonSerializerOptions) Generic method for json serialization from given type Declaration public static string Serialize<T>(object obj, JsonSerializerOptions options = null) Parameters System.Object obj JsonSerializerOptions options Returns System.String Type Parameters T"
  },
  "architecture-overview/index.html": {
    "href": "architecture-overview/index.html",
    "title": "Architecture overview | Cyber Conflict Simulator",
    "keywords": ""
  },
  "core-data-structures-and-mechanics/index.html": {
    "href": "core-data-structures-and-mechanics/index.html",
    "title": "Core structures and mechanics | Cyber Conflict Simulator",
    "keywords": ""
  },
  "getting-started/index.html": {
    "href": "getting-started/index.html",
    "title": "Getting started | Cyber Conflict Simulator",
    "keywords": ""
  },
  "index.html": {
    "href": "index.html",
    "title": "Cyber Conflict Simulator Documentation | Cyber Conflict Simulator",
    "keywords": "Cyber Conflict Simulator Documentation Project purpose is to develop cyber kinetic simulator which will enable education and training for the cyber kinetic security incedent managers. More on the topic on Utilis official site Documentation contents The CCS documentation provides provides detailed explanation of the simulator's key components and concepts in it's own sections. Also provides generated code API documentation. Documentation building process Documentation uses 'DocFX flavored Markdown'. Deatils on features provided by tool could be found here ."
  },
  "plugin-management-overview/index.html": {
    "href": "plugin-management-overview/index.html",
    "title": "Plugin management overview | Cyber Conflict Simulator",
    "keywords": ""
  }
}